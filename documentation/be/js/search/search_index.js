var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenAuthGuard.html",[0,2.993,1,2.012]],["body/guards/AccessTokenAuthGuard.html",[1,2.107,2,2.064,3,0.058,4,0.058,5,0.044,6,0.068,7,0.056,8,2.064,9,0.294,10,0.873,11,5.477,12,1.965,13,2.38,14,4.599,15,4.855,16,0.56,17,2.971,18,0.786,19,0.01,20,0.667,21,0.494,22,0.705,23,5.115,24,5.477,25,2.971,26,2.064,27,0.56,28,4.288,29,0.422,30,2.204,31,1.169,32,0.265,33,1.55,34,4.046,35,2.064,36,2.204,37,1.848,38,0.654,39,0.654,40,0.654,41,1.55,42,1.388,43,1.948,44,2.204,45,2.204,46,0.129,47,0.175,48,4.55,49,3.314,50,1.612,51,1.75,52,4.073,53,4.858,54,4.958,55,4.046,56,2.639,57,2.482,58,1.77,59,4.858,60,3.134,61,4.858,62,4.073,63,4.073,64,5.477,65,4.858,66,4.55,67,4.046,68,4.231,69,3.789,70,1.285,71,3.235,72,4.073,73,4.858,74,4.046,75,2.064,76,2.204,77,3.347,78,2.204,79,2.204,80,2.204,81,1.761,82,2.204,83,2.204,84,3.347,85,2.204,86,2.204,87,2.204,88,2.204,89,2.204,90,1.848,91,3.347,92,2.204,93,2.204,94,2.204,95,1.848,96,4.046,97,2.204,98,2.204,99,2.204,100,2.204,101,1.848,102,0.005,103,0.005]],["title/controllers/AdminController.html",[104,0.949,105,3.196]],["body/controllers/AdminController.html",[3,0.113,4,0.113,5,0.086,6,0.089,7,0.073,9,0.571,10,1.38,16,0.715,19,0.01,27,1.086,29,0.477,32,0.514,38,1.268,39,1.268,40,1.268,46,0.113,47,0.154,50,1.205,51,1.205,70,1.242,102,0.008,103,0.008,104,1.571,105,5.293,106,1.268,107,5.069,108,8.099,109,2.361,110,7.749,111,5.76,112,5.76,113,3.116,114,2.437,115,2.437,116,5.081,117,5.069,118,1.777,119,1.48,120,7.133,121,1.48,122,5.76,123,1.558,124,2.516,125,2.222]],["title/modules/AdminModule.html",[126,0.812,127,2.993]],["body/modules/AdminModule.html",[3,0.112,4,0.112,5,0.084,6,0.071,7,0.058,19,0.01,29,0.488,32,0.507,46,0.112,47,0.152,102,0.008,103,0.008,105,5.715,106,1.558,116,5.542,117,5,126,1.452,127,6.112,128,1.85,129,1.85,130,1.954,131,1.954,132,1.85,133,2.649,134,1.954,135,5,136,5,137,5,138,4.41,139,2.172,140,2.433,141,1.901,142,1.901,143,5.681,144,3.09,145,1.619,146,3.534,147,5.681]],["title/injectables/AdminService.html",[31,0.73,116,2.824]],["body/injectables/AdminService.html",[3,0.051,4,0.051,5,0.039,6,0.082,7,0.067,9,0.259,10,0.791,12,1.165,16,0.766,18,0.455,19,0.01,20,0.386,21,0.286,22,0.408,27,1.073,29,0.335,31,0.693,32,0.233,38,0.576,39,0.576,40,0.576,46,0.051,47,0.07,49,1.729,50,0.855,51,1.828,56,2.435,58,1.874,70,1.233,102,0.005,103,0.005,116,2.679,119,1.98,121,1.87,123,1.105,139,1.682,145,0.745,148,0.899,149,2.3,150,5.69,151,5.69,152,5.69,153,5.69,154,1.265,155,3.715,156,2.613,157,2.613,158,3.427,159,2.613,160,2.613,161,2.613,162,2.613,163,2.613,164,2.613,165,2.613,166,1.713,167,3.273,168,2.613,169,1.942,170,2.613,171,5.253,172,2.613,173,4.086,174,3.596,175,4.086,176,6.231,177,4.086,178,3.596,179,5.434,180,7.277,181,5.032,182,2.333,183,7.444,184,2.613,185,7.277,186,5.032,187,2.613,188,2.613,189,4.086,190,4.086,191,4.086,192,4.086,193,5.008,194,2.613,195,4.428,196,4.086,197,5.032,198,4.086,199,4.086,200,2.613,201,2.3,202,2.613,203,4.086,204,2.613,205,5.032,206,4.086,207,6.175,208,5.69,209,5.69,210,5.69,211,4.086,212,2.093,213,2.613,214,4.086,215,2.613,216,4.086,217,4.086,218,4.086,219,2.613,220,4.086,221,5.032,222,4.049,223,4.086,224,2.613,225,2.613,226,1.105,227,5.69,228,5.48,229,5.762,230,2.613,231,2.613,232,2.3,233,2.613,234,4.086,235,4.086,236,4.086,237,4.086,238,4.086,239,5.69,240,5.69,241,5.69,242,3.596,243,4.086,244,4.086,245,4.086,246,4.086,247,3.596,248,3.596,249,4.086,250,4.086,251,4.086,252,3.596,253,5.69,254,4.086,255,2.613,256,3.596,257,4.086,258,2.613,259,2.613,260,2.613,261,4.086,262,1.039,263,4.858,264,2.613,265,2.613,266,2.613,267,2.613,268,2.613]],["title/controllers/AppController.html",[104,0.949,269,3.196]],["body/controllers/AppController.html",[3,0.122,4,0.122,5,0.093,6,0.094,7,0.076,9,0.618,10,1.449,16,0.773,19,0.01,27,1.175,29,0.441,32,0.556,46,0.122,47,0.166,50,1.304,70,1.086,102,0.008,103,0.008,104,1.649,106,1.373,109,2.556,118,1.923,269,5.555,270,5.486,271,7.324,272,6.234,273,5.26,274,5.486,275,6.234]],["title/modules/AppModule.html",[126,0.812,276,3.196]],["body/modules/AppModule.html",[3,0.071,4,0.071,5,0.054,6,0.046,7,0.037,19,0.01,29,0.517,32,0.324,33,1.897,46,0.071,47,0.097,71,1.642,102,0.006,103,0.006,106,1.154,126,1.158,127,5.155,128,1.184,129,1.184,130,1.251,131,1.251,132,1.184,133,2.113,134,1.251,138,3.87,140,1.803,141,1.217,142,1.217,144,2.289,146,2.262,269,4.557,273,4.864,274,3.201,276,6.72,277,3.201,278,3.201,279,3.201,280,5.155,281,5.155,282,5.155,283,5.155,284,5.155,285,4.864,286,4.864,287,4.864,288,4.615,289,5.155,290,5.155,291,4.864,292,4.864,293,5.155,294,5.155,295,4.864,296,5.155,297,4.615,298,3.637,299,2.913,300,3.637,301,3.637,302,3.637,303,3.637,304,3.637,305,3.637,306,3.637,307,3.201,308,3.201,309,3.201,310,2.913,311,3.637,312,3.637,313,3.201,314,3.201,315,3.637,316,3.637,317,3.201,318,3.637,319,2.913,320,3.637,321,3.637,322,3.637,323,3.201]],["title/injectables/AppService.html",[31,0.73,273,2.824]],["body/injectables/AppService.html",[3,0.123,4,0.123,5,0.093,6,0.094,7,0.076,9,0.621,10,1.453,16,0.777,19,0.01,21,0.686,27,1.181,29,0.369,31,1.273,32,0.559,46,0.123,47,0.167,70,1.091,102,0.008,103,0.008,148,2.155,271,7.336,273,4.923,324,5.514,325,6.266,326,3.146,327,4.671,328,0.952,329,6.266,330,5.514]],["title/modules/AuthModule.html",[126,0.812,331,3.196]],["body/modules/AuthModule.html",[1,3.366,3,0.115,4,0.115,5,0.087,6,0.073,7,0.06,19,0.01,29,0.479,32,0.522,33,3.054,46,0.115,47,0.156,75,5.007,81,4.27,90,4.482,101,4.482,102,0.008,103,0.008,126,1.472,128,1.906,129,1.906,130,2.014,131,2.014,132,1.906,133,2.479,134,2.014,140,2.479,141,1.959,142,1.959,144,3.148,299,5.772,331,6.319,332,5.152,333,5.152,334,4.275,335,5.854,336,3.469,337,5.854]],["title/classes/Blog.html",[47,0.115,338,2.824]],["body/classes/Blog.html",[3,0.134,4,0.134,5,0.102,6,0.086,7,0.07,19,0.009,46,0.134,47,0.183,102,0.009,103,0.009,338,5.188,339,2.423,340,6.028]],["title/controllers/BlogsController.html",[104,0.949,341,3.196]],["body/controllers/BlogsController.html",[3,0.061,4,0.061,5,0.046,6,0.094,7,0.076,9,0.308,10,0.904,16,0.903,18,1.267,19,0.01,20,1.075,21,0.797,22,1.137,27,1.372,29,0.367,32,0.278,38,0.685,39,0.685,40,0.685,46,0.061,47,0.083,50,0.651,51,1.522,56,2.714,70,1.426,102,0.005,103,0.005,104,1.029,106,0.685,109,2.983,113,2.041,114,1.316,115,1.316,118,0.96,119,1.87,121,1.87,123,1.969,124,3.179,125,2.889,262,3.35,328,1.219,341,3.466,342,2.738,343,2.536,344,2.646,345,2.768,346,4.671,347,4.671,348,2.906,349,2.536,350,3.111,351,5.486,352,5.608,353,3.111,354,4.111,355,1.935,356,5.608,357,3.111,358,1.483,359,2.738,360,6.316,361,5.608,362,3.111,363,6.252,364,3.111,365,5.608,366,3.111,367,4.492,368,3.111,369,5.608,370,3.111,371,4.936,372,1.935,373,5.608,374,3.111,375,3.111,376,5.486,377,5.608,378,3.111,379,4.111,380,1.359,381,2.492,382,3.111,383,3.677,384,2.738,385,1.689,386,3.358,387,3.111,388,2.738,389,4.936,390,4.492,391,3.111,392,2.492,393,3.111,394,4.671,395,3.111,396,3.111,397,3.111,398,1.935,399,3.111,400,1.689,401,3.111,402,1.935,403,3.111]],["title/modules/BlogsModule.html",[126,0.812,280,2.993]],["body/modules/BlogsModule.html",[3,0.116,4,0.116,5,0.088,6,0.074,7,0.06,19,0.01,29,0.481,32,0.526,46,0.116,47,0.157,102,0.008,103,0.008,106,1.594,126,1.476,128,1.919,129,1.919,130,2.028,131,2.028,132,1.919,133,2.694,134,2.028,139,2.192,140,2.489,141,1.973,142,1.973,145,1.68,280,6.063,341,5.81,383,5.593,384,5.188,404,5.188,405,5.188,406,5.896,407,5.896]],["title/injectables/BlogsService.html",[31,0.73,383,2.824]],["body/injectables/BlogsService.html",[3,0.042,4,0.042,5,0.032,6,0.085,7,0.07,9,0.213,10,0.677,12,0.613,16,0.819,18,1.149,19,0.01,20,0.975,21,0.768,22,1.031,27,1.193,29,0.26,31,0.593,32,0.192,38,0.473,39,0.473,40,0.473,46,0.042,47,0.057,50,0.45,51,1.678,56,2.139,57,1.903,58,1.491,70,1.102,71,2.979,102,0.004,103,0.004,118,0.663,119,2.075,121,1.966,123,1.625,139,1.543,145,0.613,148,0.74,154,1.04,158,2.907,222,2.898,226,2.154,262,3.004,326,1.756,328,1.091,338,2.293,351,4.482,354,1.892,358,1.333,360,5.606,363,5.325,367,5.285,376,4.482,379,3.077,383,2.293,386,2.298,392,3.541,408,1.892,409,1.579,410,1.756,411,4.42,412,4.42,413,1.756,414,1.824,415,1.634,416,2.15,417,3.497,418,2.15,419,2.088,420,3.077,421,2.15,422,2.15,423,2.15,424,2.15,425,4.544,426,2.15,427,1.756,428,2.15,429,1.824,430,2.15,431,3.497,432,2.15,433,0.855,434,2.15,435,4.987,436,1.892,437,3.497,438,1.892,439,2.462,440,2.15,441,3.603,442,2.15,443,3.486,444,2.15,445,5.604,446,2.15,447,5.604,448,2.15,449,2.298,450,1.899,451,2.618,452,5.604,453,2.15,454,1.167,455,4.42,456,3.91,457,2.801,458,3.077,459,3.497,460,3.497,461,3.541,462,3.497,463,7.32,464,5.093,465,4.42,466,3.89,467,3.89,468,3.89,469,4.104,470,5.604,471,6.006,472,4.42,473,4.42,474,6.006,475,4.42,476,4.42,477,4.42,478,4.42,479,4.42,480,4.42,481,4.42,482,4.42,483,4.42,484,4.42,485,6.172,486,4.42,487,4.42,488,4.42,489,4.42,490,4.42,491,3.497,492,4.42,493,2.15,494,2.15,495,2.15,496,2.15,497,2.15,498,2.15,499,2.15,500,2.15,501,2.15,502,2.15,503,2.15,504,3.539,505,5.093,506,3.497,507,2.15,508,3.497,509,2.15,510,1.409,511,2.15]],["title/classes/Category.html",[47,0.115,435,2.993]],["body/classes/Category.html",[3,0.112,4,0.112,5,0.085,6,0.104,7,0.085,9,0.567,12,1.63,16,1.002,18,0.996,19,0.01,20,0.845,21,0.885,22,0.894,29,0.337,38,1.26,39,1.26,40,1.26,46,0.112,47,0.153,102,0.008,103,0.008,123,2.291,328,1.228,339,2.024,358,1.838,435,5.368,441,3.879,512,5.034,513,2.513,514,7.103,515,8.08,516,7.103,517,5.72,518,5.72,519,3.39,520,5.72,521,3.975,522,5.72,523,3.558,524,5.72]],["title/controllers/CategorysController.html",[104,0.949,525,3.196]],["body/controllers/CategorysController.html",[3,0.079,4,0.079,5,0.06,6,0.096,7,0.078,9,0.401,10,1.093,16,0.92,18,1.227,19,0.01,20,1.041,21,0.772,22,1.101,27,1.398,29,0.415,32,0.361,38,0.891,39,0.891,40,0.891,46,0.079,47,0.108,50,0.846,51,1.551,70,1.441,102,0.006,103,0.006,104,1.244,106,0.891,109,3.04,113,2.468,114,1.711,115,1.711,118,1.247,119,1.905,121,1.905,123,2.006,124,3.239,125,2.964,328,1.167,343,3.067,344,3.2,345,4.177,348,3.514,349,3.067,355,2.515,358,1.676,372,2.515,380,1.766,385,2.196,386,3.394,398,2.515,400,2.196,402,2.515,525,4.191,526,3.558,527,4.043,528,6.202,529,6.51,530,4.043,531,4.971,532,6.51,533,4.043,534,6.51,535,4.043,536,6.51,537,4.043,538,4.043,539,6.202,540,6.51,541,4.043,542,4.971,543,4.043,544,4.268,545,3.558,546,4.043,547,4.043,548,4.043,549,4.043,550,4.043]],["title/modules/CategorysModule.html",[126,0.812,281,2.993]],["body/modules/CategorysModule.html",[3,0.116,4,0.116,5,0.088,6,0.074,7,0.06,19,0.01,29,0.481,32,0.526,46,0.116,47,0.157,102,0.008,103,0.008,106,1.594,126,1.476,128,1.919,129,1.919,130,2.028,131,2.028,132,1.919,133,2.694,134,2.028,139,2.192,140,2.489,141,1.973,142,1.973,145,1.68,281,6.063,525,5.81,544,5.593,545,5.188,551,5.188,552,5.188,553,5.896,554,5.896]],["title/injectables/CategorysService.html",[31,0.73,544,2.824]],["body/injectables/CategorysService.html",[3,0.083,4,0.083,5,0.063,6,0.1,7,0.081,9,0.419,10,1.128,12,1.205,16,0.966,18,1.312,19,0.01,20,1.114,21,0.825,22,1.177,27,1.421,29,0.392,31,0.988,32,0.377,38,0.931,39,0.931,40,0.931,46,0.083,47,0.113,50,0.884,51,1.395,57,2.113,58,1.506,70,1.312,102,0.006,103,0.006,118,1.304,119,2.185,121,1.713,123,1.144,139,2.001,145,1.205,148,1.455,154,2.046,226,2.465,328,1.184,358,1.709,367,5.34,386,2.733,409,2.631,410,3.607,413,2.925,414,3.039,415,2.722,419,2.945,427,2.925,429,3.039,433,1.681,436,3.721,438,5.867,439,2.733,441,2.123,504,4.992,510,2.772,528,6.323,531,3.721,539,6.323,542,5.128,544,3.82,555,3.721,556,4.228,557,5.827,558,4.228,559,4.228,560,4.228,561,4.228,562,5.827,563,4.228,564,4.228,565,4.228,566,4.228,567,4.228,568,4.228,569,4.228,570,4.228,571,4.228]],["title/controllers/CommentsController.html",[104,0.949,572,3.196]],["body/controllers/CommentsController.html",[1,1.883,3,0.079,4,0.079,5,0.06,6,0.093,7,0.075,9,0.4,10,1.091,16,0.873,18,1.226,19,0.01,20,1.04,21,0.771,22,1.1,27,1.327,29,0.452,32,0.36,38,0.888,39,0.888,40,0.888,41,3.671,42,1.883,46,0.079,47,0.108,50,0.843,51,1.549,57,1.277,58,0.911,70,1.4,102,0.006,103,0.006,104,1.241,106,0.888,109,2.885,113,2.462,114,1.705,115,1.705,118,1.243,119,1.808,121,1.808,123,1.904,124,3.074,125,2.858,328,1.166,343,3.06,344,3.193,345,3.34,349,3.06,355,2.507,358,1.341,380,1.761,385,2.189,386,3.295,400,2.189,402,2.507,433,1.603,572,4.182,573,3.547,574,4.03,575,6.193,576,4.389,577,4.03,578,4.03,579,6.499,580,6.499,581,4.03,582,4.03,583,6.499,584,4.03,585,3.06,586,4.03,587,6.193,588,6.499,589,4.03,590,5.636,591,2.507,592,4.03,593,2.507,594,4.261,595,3.547,596,2.507,597,5.636,598,2.642,599,3.547,600,3.228,601,2.508,602,3.547,603,4.03,604,2.991,605,4.03,606,4.03,607,4.03,608,4.03]],["title/modules/CommentsModule.html",[126,0.812,282,2.993]],["body/modules/CommentsModule.html",[3,0.105,4,0.105,5,0.08,6,0.067,7,0.055,19,0.01,29,0.498,32,0.479,46,0.105,47,0.143,102,0.008,103,0.008,106,1.502,126,1.414,128,1.746,129,1.746,130,1.845,131,1.845,132,1.746,133,2.58,134,1.845,138,4.346,139,2.14,140,2.347,141,1.795,142,1.795,144,2.98,145,1.529,146,3.336,282,6.18,292,5.462,314,4.72,334,4.183,336,3.179,572,5.566,594,5.462,595,4.72,609,4.72,610,4.72,611,5.364,612,5.364,613,5.364]],["title/injectables/CommentsService.html",[31,0.73,594,2.824]],["body/injectables/CommentsService.html",[3,0.076,4,0.076,5,0.058,6,0.095,7,0.077,9,0.384,10,1.061,12,1.562,16,0.905,18,1.271,19,0.01,20,1.078,21,0.853,22,1.14,27,1.304,29,0.43,31,0.929,32,0.346,46,0.076,47,0.103,49,2.691,50,1.331,51,1.147,57,1.737,58,1.649,70,1.204,102,0.006,103,0.006,119,2.152,121,2.079,139,1.777,145,1.104,148,1.333,155,4.23,158,2.653,166,2.54,169,1.495,226,2.319,326,2.752,328,1.184,386,2.835,419,2.608,433,1.54,439,2.247,443,3.409,449,1.588,450,3.454,451,2.561,454,2.976,575,4.824,585,3.454,587,6.086,594,3.594,601,2.669,604,4.72,614,3.409,615,6.361,616,5.481,617,5.481,618,5.481,619,3.409,620,6.361,621,4.302,622,3.874,623,4.824,624,3.874,625,3.874,626,5.481,627,3.874,628,7.298,629,5.481,630,3.874,631,5.481,632,3.874,633,3.874,634,3.874,635,3.874,636,3.874,637,3.874,638,3.874,639,5.481,640,2.41,641,3.874,642,3.874,643,3.874,644,5.481,645,5.481,646,5.481,647,3.874,648,3.874]],["title/classes/CreateReactionDto.html",[47,0.115,649,2.824]],["body/classes/CreateReactionDto.html",[3,0.134,4,0.134,5,0.102,6,0.085,7,0.07,19,0.009,46,0.134,47,0.182,102,0.009,103,0.009,339,2.417,649,5.18,650,6.012,651,5.472]],["title/classes/CreateStandardDto.html",[47,0.115,652,2.824]],["body/classes/CreateStandardDto.html",[3,0.114,4,0.114,5,0.086,6,0.106,7,0.087,9,0.576,16,1.036,19,0.01,21,0.914,46,0.114,47,0.155,102,0.008,103,0.008,262,3.46,328,1.09,339,2.057,513,2.538,652,4.704,653,7.481,654,4.657,655,5.407,656,5.774,657,5.407,658,4.225,659,6.848,660,5.116,661,5.813,662,5.813,663,5.813,664,5.813]],["title/injectables/DatabaseService.html",[31,0.73,139,1.106]],["body/injectables/DatabaseService.html",[3,0.079,4,0.079,5,0.06,6,0.11,7,0.09,9,0.4,16,1.087,19,0.01,29,0.332,31,0.957,32,0.36,46,0.079,47,0.108,49,2.752,50,1.361,54,3.855,58,1.275,70,1.52,102,0.006,103,0.006,139,1.45,148,1.389,169,2.51,171,4.826,263,4.826,338,4.265,435,4.52,456,3.855,513,1.996,604,4.826,640,4.046,665,3.553,666,6.505,667,5.642,668,3.855,669,3.532,670,3.855,671,3.266,672,6.505,673,3.039,674,4.826,675,6.505,676,5.21,677,3.234,678,2.106,679,6.505,680,4.037,681,4.037,682,4.037,683,4.037,684,4.037,685,4.037,686,4.037,687,4.037,688,4.037,689,4.037,690,4.037,691,4.037,692,4.037,693,4.037,694,4.037,695,4.037,696,4.037,697,4.037,698,4.037,699,4.037,700,4.037,701,4.037,702,4.037,703,4.037,704,4.037,705,4.037,706,4.037,707,4.037,708,4.037,709,4.037,710,4.037,711,4.037,712,4.037,713,4.037,714,4.037,715,4.037,716,4.037,717,3.553,718,4.037,719,4.037,720,4.037,721,4.037,722,4.037,723,4.037,724,4.037,725,4.037,726,4.037,727,4.037,728,4.037,729,4.037,730,4.037,731,4.037,732,4.037,733,4.037,734,4.037,735,4.037]],["title/modules/FileModule.html",[126,0.812,283,2.993]],["body/modules/FileModule.html",[3,0.121,4,0.121,5,0.092,6,0.077,7,0.063,19,0.01,29,0.439,32,0.552,46,0.121,47,0.165,102,0.008,103,0.008,126,1.508,128,2.015,129,2.015,130,2.129,131,2.129,132,2.015,133,2.751,134,2.129,140,2.564,141,2.071,142,2.071,144,2.703,283,5.996,736,5.446,737,5.446,738,5.113,739,6.188,740,6.188]],["title/injectables/FileService.html",[31,0.73,738,2.552]],["body/injectables/FileService.html",[3,0.043,4,0.043,5,0.113,6,0.091,7,0.074,9,0.219,10,0.692,12,0.63,15,3.606,16,0.878,18,1.115,19,0.01,20,0.946,21,0.754,22,1.001,27,1.147,29,0.417,31,0.606,32,0.197,33,1.153,42,1.671,46,0.07,47,0.059,49,2.574,50,1.083,51,1.708,52,1.375,57,2.113,58,1.695,60,1.536,63,3.785,70,1.26,71,2.567,72,3.785,102,0.004,103,0.004,118,0.682,119,2.071,121,1.859,125,1.38,148,0.76,158,1.07,327,1.375,328,1.233,419,2.494,513,1.266,677,2.865,678,1.866,738,2.12,741,1.64,742,4.505,743,6.669,744,4.505,745,3.577,746,3.577,747,3.577,748,3.577,749,3.577,750,3.577,751,1.945,752,3.577,753,3.577,754,2.211,755,5.939,756,3.577,757,2.211,758,3.577,759,2.211,760,3.577,761,2.211,762,3.577,763,3.965,764,2.211,765,3.577,766,4.554,767,2.211,768,2.211,769,2.211,770,3.148,771,3.148,772,3.577,773,4.505,774,3.577,775,3.965,776,1.945,777,1.945,778,5.637,779,1.945,780,1.771,781,2.211,782,1.945,783,1.945,784,1.945,785,2.211,786,2.211,787,2.211,788,2.211,789,2.211,790,3.965,791,2.211,792,1.771,793,3.148,794,5.177,795,2.211,796,4.505,797,2.211,798,4.505,799,3.577,800,2.211,801,3.148,802,2.211,803,4.505,804,3.577,805,3.148,806,2.211,807,2.211,808,4.505,809,3.577,810,6.669,811,6.084,812,6.669,813,2.211,814,3.577,815,6.411,816,6.084,817,3.148,818,5.177,819,6.084,820,1.945,821,3.577,822,2.211,823,1.945,824,2.211,825,2.211,826,3.148,827,2.211,828,6.084,829,4.505,830,1.945,831,2.211,832,1.64,833,2.211,834,2.211,835,2.211,836,2.211,837,2.211,838,2.211,839,2.211,840,2.211,841,2.211,842,1.64,843,2.211,844,2.211,845,2.211,846,2.211,847,2.211,848,3.577,849,2.211,850,3.577,851,3.577,852,2.211,853,3.577,854,3.577,855,3.148,856,1.771,857,2.211,858,1.945,859,2.211,860,2.211,861,2.211,862,2.211,863,3.148,864,2.211,865,2.211,866,2.211,867,2.211,868,2.211,869,2.211,870,2.211,871,2.211,872,2.211,873,2.211,874,1.945,875,2.211,876,2.211,877,2.211,878,2.211,879,3.577,880,2.211,881,2.211,882,1.771,883,1.945,884,2.211,885,3.577,886,2.211,887,2.211,888,2.211,889,2.211,890,2.211,891,2.211,892,2.211,893,1.771,894,1.945,895,1.945,896,1.945,897,1.771]],["title/classes/Hospital.html",[47,0.115,671,2.162]],["body/classes/Hospital.html",[3,0.103,4,0.103,5,0.078,6,0.098,7,0.08,9,0.518,16,0.92,19,0.01,20,1.095,21,0.812,46,0.159,47,0.216,102,0.007,103,0.007,182,3.393,262,2.669,328,1.364,339,1.85,425,2.962,449,3.039,451,2.443,513,2.374,585,2.839,601,2.018,658,2.839,671,3.926,673,3.463,678,2.728,898,3.428,899,4.86,900,4.864,901,5.229,902,5.229,903,5.229,904,4.175,905,4.199,906,3.253,907,4.43,908,3.253,909,3.428,910,4.175,911,3.099,912,3.428,913,3.099,914,3.099,915,3.099,916,3.099,917,3.099]],["title/controllers/HospitalController.html",[104,0.949,918,3.196]],["body/controllers/HospitalController.html",[3,0.084,4,0.084,5,0.064,6,0.095,7,0.077,9,0.426,10,1.141,16,0.898,18,1.171,19,0.01,20,0.994,21,0.737,22,1.051,27,1.364,29,0.426,32,0.384,38,0.947,39,0.947,40,0.947,46,0.084,47,0.115,50,0.9,51,1.514,57,1.363,58,0.972,70,1.422,102,0.007,103,0.007,104,1.298,106,0.947,109,2.967,113,2.575,114,1.82,115,1.82,118,1.327,119,1.859,121,1.859,123,1.958,124,3.161,125,2.925,328,1.022,358,1.402,380,1.879,433,1.71,439,1.763,671,4.026,918,4.374,919,3.785,920,5.895,921,7.237,922,5.895,923,5.895,924,4.301,925,6.368,926,6.727,927,4.301,928,6.727,929,4.301,930,4.301,931,6.727,932,4.301,933,4.301,934,6.368,935,6.727,936,4.301,937,4.301,938,4.41,939,3.785,940,5.895,941,4.301,942,4.301,943,4.301,944,3.445,945,4.301,946,7.237,947,4.301,948,4.301,949,4.301]],["title/classes/HospitalEntity.html",[47,0.115,950,3.45]],["body/classes/HospitalEntity.html",[3,0.112,4,0.112,5,0.085,6,0.104,7,0.085,9,0.564,12,1.623,16,1.001,18,0.992,19,0.01,20,1.226,21,0.883,22,0.89,46,0.112,47,0.152,102,0.008,103,0.008,328,1.328,339,2.015,358,1.919,513,2.506,519,3.374,671,4.05,899,5.289,950,5.673,951,5.011,952,7.083,953,7.083,954,5.694,955,5.694,956,5.694,957,2.487,958,5.694,959,5.694,960,5.694,961,4.561,962,5.694]],["title/modules/HospitalModule.html",[126,0.812,284,2.993]],["body/modules/HospitalModule.html",[3,0.116,4,0.116,5,0.088,6,0.074,7,0.06,19,0.01,29,0.481,32,0.526,46,0.116,47,0.157,102,0.008,103,0.008,106,1.594,126,1.476,128,1.919,129,1.919,130,2.028,131,2.028,132,1.919,133,2.694,134,2.028,139,2.192,140,2.489,141,1.973,142,1.973,145,1.68,284,6.063,918,5.81,938,5.593,939,5.188,963,5.188,964,5.188,965,5.896,966,5.896]],["title/injectables/HospitalService.html",[31,0.73,938,2.824]],["body/injectables/HospitalService.html",[3,0.091,4,0.091,5,0.069,6,0.1,7,0.081,9,0.457,10,1.196,12,1.314,16,0.963,18,1.297,19,0.01,20,1.1,21,0.815,22,1.163,27,1.404,29,0.41,31,1.048,32,0.411,38,1.015,39,1.015,40,1.015,46,0.091,47,0.123,50,0.965,51,1.293,57,1.958,58,1.396,70,1.297,102,0.007,103,0.007,118,1.422,119,2.159,121,1.588,139,2.054,145,1.314,148,1.586,154,2.232,226,2.614,328,1.059,358,1.47,386,3.184,409,2.79,410,3.739,413,3.103,415,2.887,419,2.858,427,3.103,433,1.833,439,2.534,671,3.739,900,3.844,925,6.554,934,6.554,938,4.052,944,4.95,967,4.058,968,4.611,969,6.18,970,4.611,971,4.611,972,4.611,973,6.18,974,4.611,975,4.611,976,4.611,977,4.611,978,4.611,979,4.611,980,4.058]],["title/guards/IsLoggin.html",[0,2.993,101,2.679]],["body/guards/IsLoggin.html",[1,1.388,2,2.064,3,0.058,4,0.058,5,0.044,6,0.068,7,0.056,8,2.064,9,0.294,10,0.873,11,5.477,12,1.965,13,2.38,14,4.599,15,4.855,16,0.56,18,0.786,19,0.01,20,0.667,21,0.494,22,0.705,23,5.115,24,5.477,26,2.064,27,0.56,28,4.288,29,0.422,30,2.204,31,1.169,32,0.265,33,1.55,34,4.046,35,2.064,36,2.204,37,1.848,38,0.654,39,0.654,40,0.654,41,1.55,42,1.388,43,1.948,44,2.204,45,2.204,46,0.129,47,0.175,48,4.55,49,3.314,50,1.612,51,1.75,52,4.073,53,4.858,54,4.958,55,4.046,56,2.639,57,2.482,58,1.77,59,4.858,60,3.134,61,4.858,62,4.073,63,4.073,64,5.477,65,4.858,66,4.55,67,4.046,68,4.231,69,3.789,70,1.285,71,3.235,72,4.073,73,4.858,74,4.046,75,2.064,76,2.204,77,3.347,78,2.204,79,2.204,80,2.204,81,1.761,82,2.204,83,2.204,84,3.347,85,2.204,86,2.204,87,2.204,88,2.204,89,2.204,90,1.848,91,3.347,92,2.204,93,2.204,94,2.204,95,1.848,96,4.046,97,2.204,98,2.204,99,2.204,100,2.204,101,2.806,102,0.005,103,0.005,981,2.971,982,2.971]],["title/interfaces/JwtPayload.html",[957,1.881,983,2.824]],["body/interfaces/JwtPayload.html",[3,0.125,4,0.125,5,0.094,6,0.079,7,0.065,9,0.629,19,0.01,21,0.828,29,0.374,37,5.207,38,1.397,39,1.397,40,1.397,46,0.125,95,5.207,102,0.008,103,0.008,328,1.228,513,2.677,601,3.23,957,2.772,983,4.96,984,4.16,985,5.584]],["title/modules/JwtUtilsModule.html",[126,0.812,334,2.162]],["body/modules/JwtUtilsModule.html",[3,0.117,4,0.117,5,0.088,6,0.074,7,0.061,14,5.065,19,0.01,29,0.463,32,0.531,46,0.117,47,0.159,102,0.008,103,0.008,126,1.482,128,1.938,129,1.938,130,2.047,131,2.047,132,1.938,133,2.705,134,2.705,140,2.504,141,1.992,142,1.992,144,2.6,334,4.347,986,5.238,987,5.238,988,5.238,989,5.952,990,7.279,991,4.768,992,5.952]],["title/injectables/JwtUtilsService.html",[14,2.44,31,0.73]],["body/injectables/JwtUtilsService.html",[3,0.087,4,0.087,5,0.066,6,0.096,7,0.078,9,0.437,10,1.16,12,1.708,14,3.396,15,4.783,16,0.907,18,1.273,19,0.01,20,1.08,21,0.922,22,1.142,27,1.284,29,0.43,31,1.016,32,0.393,33,2.299,46,0.087,47,0.118,49,2.536,50,1.254,51,1.529,54,3.552,58,0.996,66,5.481,68,3.063,70,1.186,102,0.007,103,0.007,148,1.516,182,1.807,326,3.96,328,1.162,449,2.458,863,5.275,897,3.53,983,3.93,991,3.53,993,3.879,994,6.812,995,6.812,996,6.812,997,4.408,998,7.888,999,4.408,1000,4.408,1001,4.408,1002,4.408,1003,4.408,1004,4.408,1005,4.408,1006,5.995,1007,4.408,1008,5.995,1009,5.055,1010,4.408,1011,4.408,1012,4.408,1013,4.408,1014,4.408,1015,4.408,1016,5.995,1017,5.995,1018,4.408,1019,5.275,1020,4.408,1021,3.27,1022,4.802,1023,3.53,1024,4.408,1025,4.408,1026,4.408]],["title/controllers/MailController.html",[104,0.949,1027,3.196]],["body/controllers/MailController.html",[3,0.124,4,0.124,5,0.094,6,0.079,7,0.064,19,0.01,29,0.443,32,0.562,46,0.124,47,0.168,50,1.317,70,1.097,102,0.008,103,0.008,104,1.387,106,1.387,118,1.943,1027,5.588,1028,5.542,1029,5.542,1030,6.297,1031,5.012,1032,5.542,1033,6.297,1034,6.297,1035,6.297,1036,6.297,1037,6.297,1038,6.297,1039,6.297]],["title/modules/MailModule.html",[126,0.812,285,2.824]],["body/modules/MailModule.html",[3,0.099,4,0.099,5,0.075,6,0.063,7,0.074,15,4.566,19,0.01,29,0.491,32,0.449,33,2.623,46,0.099,47,0.134,58,1.136,71,3.285,102,0.007,103,0.007,106,1.441,126,1.372,128,1.637,129,1.637,130,1.73,131,1.73,132,1.637,133,2.503,134,2.503,140,2.251,141,1.683,142,1.683,144,2.859,169,1.94,285,5.468,299,5.242,770,4.426,792,4.028,793,4.426,1009,3.731,1027,5.398,1031,5.436,1032,4.426,1040,4.426,1041,4.426,1042,4.426,1043,5.029,1044,5.029,1045,4.028,1046,6.544,1047,5.029,1048,5.029,1049,5.029,1050,5.029,1051,5.029,1052,5.029,1053,5.029,1054,4.426,1055,5.029,1056,5.029,1057,5.029,1058,4.426,1059,5.029,1060,5.029,1061,5.029,1062,5.029,1063,5.029,1064,4.426,1065,5.029,1066,5.029,1067,4.426,1068,5.029,1069,5.029]],["title/injectables/MailService.html",[31,0.73,1031,2.679]],["body/injectables/MailService.html",[3,0.101,4,0.101,5,0.077,6,0.092,7,0.079,9,0.511,10,1.287,12,1.469,16,0.825,18,1.158,19,0.01,20,1.088,21,0.728,22,1.039,26,3.581,27,0.972,29,0.458,31,1.127,32,0.46,38,1.135,39,1.135,40,1.135,46,0.101,47,0.138,50,1.078,51,1.391,70,0.897,102,0.007,103,0.007,118,1.59,119,1.891,121,1.324,125,1.989,141,2.463,148,1.773,169,1.989,390,4.128,419,2.113,1031,4.136,1045,4.128,1064,4.535,1070,4.535,1071,6.649,1072,5.153,1073,8.244,1074,5.153,1075,6.649,1076,7.778,1077,5.153,1078,5.153,1079,5.153,1080,5.851,1081,5.153,1082,5.153,1083,6.478,1084,5.153,1085,4.535,1086,5.153,1087,5.153,1088,4.535,1089,5.153,1090,5.153,1091,5.153,1092,4.128,1093,6.649,1094,5.462,1095,5.153,1096,5.153,1097,5.153,1098,5.153,1099,5.153]],["title/classes/MatchConstraint.html",[47,0.115,1100,3.45]],["body/classes/MatchConstraint.html",[3,0.109,4,0.109,5,0.082,6,0.087,7,0.071,9,0.549,10,1.348,16,0.688,18,0.965,19,0.01,20,1.029,21,0.607,22,0.866,27,1.045,28,3.447,29,0.326,46,0.137,47,0.186,48,4.839,51,1.457,70,1.213,102,0.008,103,0.008,328,1.058,339,1.961,678,3.633,882,4.439,1009,4.112,1100,6.1,1101,4.439,1102,7.616,1103,6.129,1104,6.964,1105,7.616,1106,7.989,1107,5.542,1108,6.964,1109,7.031,1110,6.964,1111,6.129,1112,4.877,1113,5.542,1114,6.964,1115,5.542,1116,5.542,1117,5.542,1118,4.877,1119,4.112,1120,5.542,1121,5.542,1122,6.964,1123,5.542,1124,5.542]],["title/classes/Media.html",[47,0.115,673,2.012]],["body/classes/Media.html",[3,0.134,4,0.134,5,0.102,6,0.086,7,0.07,19,0.009,46,0.134,47,0.183,102,0.009,103,0.009,339,2.423,673,3.697,1125,6.028]],["title/classes/Media-1.html",[47,0.096,56,1.735,673,1.675]],["body/classes/Media-1.html",[3,0.098,4,0.098,5,0.074,6,0.102,7,0.083,9,0.496,16,0.989,19,0.01,20,0.739,21,0.873,46,0.157,47,0.213,102,0.007,103,0.007,182,3.414,262,2.592,328,1.361,339,1.768,425,2.832,449,3.269,451,2.335,513,2.306,585,3.939,601,1.929,658,2.714,671,3.642,673,3.592,678,2.607,898,3.277,899,3.277,900,4.055,904,4.055,905,4.517,906,3.109,907,4.632,908,3.109,909,3.277,910,4.055,911,2.962,912,3.277,913,4.299,914,4.299,915,2.962,916,2.962,917,2.962,1126,4.999,1127,4.999,1128,4.999,1129,4.999,1130,4.999]],["title/controllers/MediaController.html",[104,0.949,1131,3.196]],["body/controllers/MediaController.html",[3,0.036,4,0.036,5,0.109,6,0.065,7,0.053,9,0.183,10,0.597,12,0.526,16,0.575,18,0.808,19,0.01,20,0.685,21,0.679,22,0.725,27,0.874,29,0.304,32,0.165,38,0.406,39,0.406,40,0.406,46,0.036,47,0.049,49,1.304,50,0.645,51,1.702,57,2.486,58,1.798,63,3.469,70,1.366,72,3.469,102,0.003,103,0.003,104,0.679,106,0.406,109,1.902,113,1.347,114,0.78,115,0.78,119,1.521,121,2.044,123,1.679,124,2.711,125,2.488,182,1.264,222,2.021,247,2.713,326,2.329,327,1.147,328,1.201,380,0.806,381,3.716,386,2.544,415,1.855,433,0.734,439,1.902,449,1.264,461,2.469,585,4.321,673,3.389,738,2.353,755,4.783,763,1.623,766,3.716,771,2.713,778,5.856,784,1.623,815,4.467,817,5.209,826,2.713,842,2.287,855,1.623,874,4.082,905,1.746,907,2.628,913,1.827,914,3.677,1119,2.287,1131,2.287,1132,1.623,1133,3.082,1134,3.082,1135,3.082,1136,3.082,1137,1.845,1138,3.97,1139,1.845,1140,1.845,1141,5.16,1142,1.845,1143,1.845,1144,5.46,1145,4.639,1146,1.845,1147,1.845,1148,4.639,1149,1.845,1150,1.845,1151,1.478,1152,2.47,1153,1.623,1154,1.845,1155,6.955,1156,6.205,1157,4.908,1158,1.845,1159,1.623,1160,2.713,1161,1.845,1162,1.845,1163,1.845,1164,3.082,1165,1.845,1166,3.082,1167,4.639,1168,3.082,1169,3.082,1170,3.97,1171,4.082,1172,4.97,1173,5.577,1174,3.082,1175,5.577,1176,5.919,1177,3.082,1178,3.082,1179,3.082,1180,3.082,1181,4.639,1182,3.97,1183,4.639,1184,3.97,1185,1.282,1186,1.845,1187,3.082,1188,1.845,1189,1.845,1190,1.845,1191,3.082,1192,1.845,1193,3.082,1194,1.845,1195,1.845,1196,1.845,1197,1.845,1198,4.639,1199,1.623,1200,1.845,1201,1.845,1202,3.082,1203,3.082,1204,3.494,1205,1.623,1206,1.623,1207,1.845,1208,1.845,1209,1.845,1210,3.082,1211,1.845,1212,2.713,1213,1.845,1214,1.845,1215,1.845,1216,3.97,1217,1.845,1218,1.845,1219,1.845,1220,1.845,1221,1.845,1222,1.845,1223,1.282,1224,1.845,1225,1.845,1226,1.845,1227,1.845,1228,1.623]],["title/modules/MediaModule.html",[126,0.812,286,2.824]],["body/modules/MediaModule.html",[3,0.101,4,0.101,5,0.098,6,0.064,7,0.052,19,0.01,29,0.493,32,0.457,42,2.393,46,0.101,47,0.137,102,0.007,103,0.007,106,1.459,126,1.384,128,1.668,129,1.668,130,1.762,131,1.762,132,1.668,133,2.525,134,2.525,139,2.114,140,2.278,141,1.714,142,1.714,144,2.237,145,1.46,286,5.745,576,3.035,738,5.193,755,3.8,780,4.103,1131,5.446,1151,4.103,1152,5.45,1153,4.507,1171,5.828,1199,4.507,1229,4.507,1230,4.507,1231,4.507,1232,5.122,1233,5.122,1234,4.103,1235,6.623,1236,4.507,1237,5.122,1238,5.122,1239,5.122,1240,5.122,1241,5.122,1242,5.122]],["title/injectables/MediaService.html",[31,0.73,1152,2.679]],["body/injectables/MediaService.html",[3,0.063,4,0.063,5,0.048,6,0.095,7,0.077,9,0.319,10,0.927,12,1.366,16,0.913,18,1.237,19,0.01,20,1.05,21,0.885,22,1.11,27,1.34,29,0.373,31,0.812,32,0.287,38,0.709,39,0.709,40,0.709,46,0.063,47,0.086,49,2.027,50,1.002,51,1.617,57,2.148,58,1.663,70,1.237,71,2.164,102,0.005,103,0.005,119,2.135,121,2.021,139,1.826,145,0.918,148,1.108,154,1.558,226,2.027,326,3.568,328,1.213,358,1.612,386,2.779,410,3.183,413,2.406,414,2.5,419,2.779,427,2.406,429,2.5,433,1.28,439,2.779,449,1.965,450,2.602,454,2.602,469,2.003,585,3.859,640,3.944,673,2.674,674,4.705,738,4.362,905,3.592,913,3.392,914,4.482,1144,4.217,1151,2.579,1152,2.981,1155,6.655,1159,4.217,1160,4.217,1228,4.217,1243,2.833,1244,5.724,1245,5.724,1246,5.724,1247,3.22,1248,3.22,1249,3.22,1250,3.22,1251,3.22,1252,3.22,1253,3.22,1254,3.22,1255,3.22,1256,3.22,1257,4.792,1258,4.217,1259,3.22,1260,4.792,1261,3.22,1262,3.22,1263,4.792,1264,4.217,1265,3.22,1266,3.22,1267,2.833,1268,2.833,1269,4.792,1270,3.839,1271,4.792,1272,5.724,1273,3.22,1274,3.22,1275,3.22]],["title/controllers/MembershipsController.html",[104,0.949,1276,3.196]],["body/controllers/MembershipsController.html",[3,0.079,4,0.079,5,0.06,6,0.096,7,0.078,9,0.401,10,1.093,16,0.92,18,1.227,19,0.01,20,1.041,21,0.772,22,1.101,27,1.398,29,0.415,32,0.361,38,0.891,39,0.891,40,0.891,46,0.079,47,0.108,50,0.846,51,1.551,70,1.441,102,0.006,103,0.006,104,1.244,106,0.891,109,3.04,113,2.468,114,1.711,115,1.711,118,1.247,119,1.905,121,1.905,123,2.006,124,3.239,125,3.194,263,5.7,328,1.167,358,1.676,380,1.766,1223,3.925,1276,4.191,1277,3.558,1278,5.649,1279,5.649,1280,7.048,1281,5.649,1282,5.649,1283,4.043,1284,6.202,1285,6.51,1286,4.043,1287,4.043,1288,6.51,1289,4.043,1290,6.51,1291,4.043,1292,4.043,1293,6.51,1294,4.043,1295,4.043,1296,6.202,1297,6.51,1298,4.043,1299,4.043,1300,4.049,1301,3.558,1302,4.043,1303,4.043,1304,5.649,1305,4.043,1306,4.043,1307,4.043,1308,4.043,1309,4.043,1310,4.043,1311,4.043]],["title/modules/MembershipsModule.html",[126,0.812,287,2.824]],["body/modules/MembershipsModule.html",[3,0.113,4,0.113,5,0.085,6,0.072,7,0.059,19,0.01,29,0.476,32,0.513,46,0.113,47,0.153,102,0.008,103,0.008,106,1.569,126,1.459,128,1.871,129,1.871,130,1.977,131,1.977,132,1.871,133,2.663,134,2.663,139,2.178,140,2.45,141,1.923,142,1.923,145,1.638,287,5.74,1276,5.744,1300,5.536,1301,5.057,1312,5.057,1313,5.057,1314,5.057,1315,5.746,1316,5.746]],["title/injectables/MembershipsService.html",[31,0.73,1300,2.679]],["body/injectables/MembershipsService.html",[3,0.086,4,0.086,5,0.065,6,0.101,7,0.082,9,0.432,10,1.152,12,1.243,16,0.976,18,1.327,19,0.01,20,1.126,21,0.834,22,1.19,27,1.436,29,0.399,31,1.009,32,0.389,38,0.961,39,0.961,40,0.961,46,0.086,47,0.116,50,0.912,51,0.912,57,1.382,58,1.531,70,1.327,102,0.007,103,0.007,118,1.345,119,2.02,121,1.529,123,1.18,139,2.02,145,1.243,148,1.5,154,2.111,182,2.44,226,2.518,328,1.195,358,1.731,409,2.687,410,3.654,413,2.988,414,3.105,415,2.781,419,2.44,427,2.988,429,3.105,433,1.734,439,1.788,441,2.19,449,1.788,451,2.038,1212,5.962,1284,6.406,1296,6.406,1300,3.702,1317,3.838,1318,4.361,1319,5.952,1320,4.361,1321,4.361,1322,4.361,1323,4.361,1324,4.361,1325,5.952,1326,4.361,1327,5.952,1328,4.361,1329,4.361,1330,3.493,1331,4.361,1332,4.361,1333,4.361,1334,4.361,1335,4.361,1336,4.361,1337,4.361,1338,4.361,1339,5.962,1340,3.838,1341,4.361,1342,4.361,1343,4.361,1344,4.361]],["title/classes/Metric.html",[47,0.115,670,2.552]],["body/classes/Metric.html",[3,0.093,4,0.093,5,0.07,6,0.107,7,0.087,9,0.47,12,1.351,16,1.049,18,0.826,19,0.01,20,0.701,21,0.925,22,0.741,28,4.397,29,0.279,46,0.124,47,0.127,62,4.685,102,0.007,103,0.007,123,2.037,262,2.811,328,1.337,339,1.678,358,1.791,441,3.781,513,2.228,519,2.81,521,3.295,523,2.95,669,4.089,670,4.189,957,2.072,1345,3.799,1346,6.033,1347,6.628,1348,6.628,1349,6.628,1350,5.541,1351,5.588,1352,6.297,1353,4.742,1354,4.742,1355,4.742,1356,4.742,1357,4.742,1358,4.742,1359,4.742,1360,4.173,1361,4.173,1362,3.799,1363,4.173,1364,4.173,1365,4.173,1366,4.173,1367,4.173,1368,4.173,1369,4.173,1370,4.173,1371,4.173,1372,4.173,1373,4.173]],["title/controllers/MetricController.html",[104,0.949,1374,3.196]],["body/controllers/MetricController.html",[3,0.079,4,0.079,5,0.06,6,0.096,7,0.078,9,0.401,10,1.093,16,0.92,18,1.227,19,0.01,20,1.041,21,0.772,22,1.101,27,1.398,29,0.415,32,0.361,38,0.891,39,0.891,40,0.891,46,0.079,47,0.108,50,0.846,51,1.551,70,1.441,102,0.006,103,0.006,104,1.244,106,0.891,109,3.04,113,2.468,114,1.711,115,1.711,118,1.247,119,1.905,121,1.905,123,2.006,124,3.239,125,2.964,328,1.167,343,3.067,344,3.2,345,4.177,348,3.514,349,3.067,355,2.515,358,1.676,372,2.515,380,1.766,385,2.196,386,3.394,398,2.515,400,2.196,402,2.515,1374,4.191,1375,3.558,1376,4.043,1377,6.202,1378,6.51,1379,4.043,1380,4.971,1381,6.51,1382,4.043,1383,6.51,1384,4.043,1385,6.51,1386,4.043,1387,4.043,1388,6.202,1389,6.51,1390,4.043,1391,4.971,1392,4.043,1393,4.049,1394,3.558,1395,4.043,1396,4.043,1397,3.558,1398,4.043,1399,4.043]],["title/interfaces/MetricDTO.html",[957,1.881,1351,3.196]],["body/interfaces/MetricDTO.html",[3,0.098,4,0.098,5,0.074,6,0.063,7,0.051,9,0.497,19,0.01,21,0.925,22,1.02,28,4.786,29,0.295,46,0.128,47,0.134,62,4.963,102,0.007,103,0.007,123,2.158,262,3.059,328,1.364,358,1.898,441,4.006,513,2.309,519,2.968,521,3.48,523,3.116,669,4.332,670,2.968,957,2.188,984,3.284,1345,4.012,1346,6.391,1347,7.022,1348,7.022,1349,7.022,1350,4.408,1351,5.388,1360,4.408,1361,4.408,1362,4.012,1363,4.408,1364,4.408,1365,4.408,1366,4.408,1367,4.408,1368,4.408,1369,4.408,1370,4.408,1371,4.408,1372,4.408,1373,4.408]],["title/modules/MetricModule.html",[126,0.812,288,2.679]],["body/modules/MetricModule.html",[3,0.109,4,0.109,5,0.082,6,0.069,7,0.056,19,0.01,29,0.485,32,0.494,46,0.109,47,0.148,102,0.008,103,0.008,106,1.534,126,1.436,128,1.804,129,1.804,130,1.907,131,1.907,132,1.804,133,2.62,134,2.62,139,2.158,140,2.396,141,1.855,142,1.855,144,3.042,145,1.579,288,5.483,297,5.226,319,4.439,1374,5.651,1393,5.51,1394,4.877,1400,4.877,1401,4.877,1402,4.877,1403,5.542,1404,5.542,1405,5.542]],["title/injectables/MetricService.html",[31,0.73,1393,2.679]],["body/injectables/MetricService.html",[3,0.053,4,0.053,5,0.04,6,0.09,7,0.073,9,0.269,10,0.814,12,1.199,16,0.861,18,1.158,19,0.01,20,0.982,21,0.785,22,1.039,27,1.253,29,0.342,31,0.713,32,0.242,38,0.597,39,0.597,40,0.597,46,0.053,47,0.072,49,2.18,50,1.078,51,1.451,57,1.333,58,0.951,62,3.909,70,1.334,71,1.9,102,0.005,103,0.005,119,2.118,121,2.048,123,1.7,139,1.708,145,0.773,148,0.933,154,1.313,158,2.81,226,2.813,262,1.079,326,2.112,328,1.054,358,1.495,409,1.9,410,2.915,413,2.112,414,2.194,415,1.965,419,2.38,425,2.919,427,2.112,429,2.194,433,1.079,439,1.725,441,3.155,454,2.284,456,4.539,457,2.173,461,2.173,469,2.617,504,4.367,510,1.778,655,1.885,656,3.824,657,1.885,658,3.412,669,2.798,670,4.111,832,2.013,911,4.458,917,1.608,1172,2.173,1223,2.923,1377,5.11,1380,2.387,1388,5.11,1391,3.702,1393,2.617,1406,2.387,1407,5.153,1408,4.315,1409,2.713,1410,4.207,1411,2.713,1412,2.713,1413,2.713,1414,2.713,1415,2.713,1416,2.713,1417,4.207,1418,2.713,1419,2.713,1420,2.713,1421,2.493,1422,2.713,1423,4.207,1424,4.207,1425,6.284,1426,4.207,1427,4.207,1428,4.207,1429,6.284,1430,4.207,1431,6.284,1432,4.207,1433,2.713,1434,2.713,1435,2.713,1436,2.713,1437,2.713,1438,2.387,1439,2.713,1440,2.713,1441,2.713,1442,5.153,1443,2.713,1444,2.713,1445,2.713,1446,2.713,1447,2.387,1448,4.207,1449,4.535,1450,5.153,1451,5.153,1452,5.153,1453,5.153,1454,5.153,1455,5.153,1456,2.387,1457,3.37,1458,2.713,1459,4.207,1460,2.713,1461,2.173,1462,4.207,1463,2.713,1464,2.713,1465,2.713]],["title/controllers/NoteController.html",[104,0.949,1466,3.196]],["body/controllers/NoteController.html",[1,1.722,3,0.072,4,0.072,5,0.055,6,0.093,7,0.076,9,0.365,10,1.024,16,0.888,18,1.247,19,0.01,20,1.058,21,0.784,22,1.119,27,1.35,29,0.452,32,0.329,38,0.812,39,0.812,40,0.812,41,4.004,42,1.722,46,0.072,47,0.098,50,0.771,51,1.606,57,1.168,58,0.833,70,1.413,102,0.006,103,0.006,104,1.165,106,0.812,109,2.935,113,2.311,114,1.559,115,1.559,118,1.137,119,1.839,121,1.839,123,1.937,124,3.128,125,2.876,328,1.133,343,2.872,344,2.997,345,3.135,348,3.29,349,2.872,355,2.292,358,1.608,372,2.292,380,1.61,385,2.001,386,3.327,398,2.292,400,2.001,402,2.292,576,4.549,591,2.292,593,2.292,596,4.206,598,3.468,601,1.422,602,3.243,676,5.97,983,2.416,1466,3.925,1467,3.243,1468,3.685,1469,5.95,1470,3.685,1471,3.685,1472,6.188,1473,3.685,1474,3.685,1475,3.685,1476,3.685,1477,3.685,1478,3.685,1479,3.685,1480,5.95,1481,3.685,1482,3.685,1483,2.952,1484,3.685,1485,3.243,1486,4.057,1487,3.243,1488,5.29,1489,2.952,1490,3.667,1491,3.685,1492,5.29,1493,3.685,1494,3.243,1495,3.685,1496,5.29,1497,3.685,1498,5.29,1499,3.685,1500,3.685,1501,3.685]],["title/modules/NoteModule.html",[126,0.812,289,2.993]],["body/modules/NoteModule.html",[3,0.112,4,0.112,5,0.084,6,0.071,7,0.058,19,0.01,29,0.488,32,0.507,46,0.112,47,0.152,102,0.008,103,0.008,106,1.558,126,1.452,128,1.85,129,1.85,130,1.954,131,1.954,132,1.85,133,2.649,134,1.954,139,2.172,140,2.433,141,1.901,142,1.901,144,3.09,145,1.619,289,6.112,334,4.244,336,3.367,1466,5.715,1486,5.542,1487,5,1502,5,1503,5.681,1504,5,1505,5.681,1506,5.681]],["title/injectables/NoteService.html",[31,0.73,1486,2.824]],["body/injectables/NoteService.html",[3,0.069,4,0.069,5,0.052,6,0.095,7,0.077,9,0.35,10,0.992,12,1.006,16,0.911,18,1.279,19,0.01,20,1.085,21,0.85,22,1.147,27,1.327,29,0.355,31,0.869,32,0.315,38,0.777,39,0.777,40,0.777,46,0.069,47,0.094,50,0.738,51,1.472,57,2.23,58,1.712,70,1.279,102,0.006,103,0.006,118,1.089,119,2.168,121,1.994,123,1.633,139,1.886,145,1.006,148,1.214,154,1.708,158,2.481,169,2.557,182,2.102,226,2.554,326,2.574,328,1.221,358,1.219,419,2.717,433,1.403,439,2.886,441,3.031,443,3.756,454,1.916,601,2.716,676,5.882,856,2.827,1469,4.512,1480,5.832,1486,3.361,1490,3.927,1507,3.106,1508,6.038,1509,5.127,1510,5.127,1511,5.127,1512,5.127,1513,3.529,1514,3.529,1515,3.529,1516,5.127,1517,3.529,1518,5.127,1519,3.529,1520,5.127,1521,3.529,1522,5.127,1523,5.127,1524,3.529,1525,3.529,1526,3.529,1527,3.529,1528,3.529,1529,3.529,1530,3.529,1531,3.529,1532,3.106,1533,2.314,1534,3.529,1535,6.038,1536,6.038,1537,5.127,1538,6.038,1539,3.529,1540,5.127,1541,7.039,1542,6.627,1543,5.127,1544,6.038,1545,3.529,1546,6.038,1547,5.127,1548,3.529,1549,6.038,1550,3.529]],["title/controllers/PaymentController.html",[104,0.949,1551,3.196]],["body/controllers/PaymentController.html",[1,2.085,3,0.088,4,0.088,5,0.066,6,0.092,7,0.075,9,0.442,10,1.17,16,0.851,18,1.053,19,0.01,20,0.893,21,0.662,22,0.944,27,1.292,29,0.466,32,0.398,38,0.983,39,0.983,40,0.983,41,3.833,42,2.085,46,0.088,47,0.119,50,0.933,51,1.537,57,1.414,58,1.008,70,1.379,102,0.007,103,0.007,104,1.331,106,0.983,109,2.811,113,2.641,114,1.888,115,1.888,118,1.377,119,1.761,121,1.761,123,1.855,124,2.995,125,2.836,169,2.333,171,5.452,176,5.32,433,1.774,439,1.83,576,4.551,591,2.776,593,2.776,596,2.776,598,2.926,1533,2.926,1551,4.486,1552,3.927,1553,6.045,1554,7.348,1555,6.045,1556,4.463,1557,6.467,1558,4.463,1559,4.463,1560,6.467,1561,6.856,1562,4.463,1563,4.463,1564,6.467,1565,6.856,1566,4.463,1567,4.463,1568,4.495,1569,3.927,1570,6.045,1571,4.463,1572,4.463,1573,3.927,1574,4.463,1575,4.463,1576,4.463]],["title/modules/PaymentModule.html",[126,0.812,290,2.993]],["body/modules/PaymentModule.html",[3,0.102,4,0.102,5,0.078,6,0.065,7,0.053,19,0.01,29,0.502,32,0.466,46,0.102,47,0.139,102,0.007,103,0.007,106,1.476,126,1.396,128,1.699,129,1.699,130,1.795,131,1.795,132,1.699,133,2.547,134,1.795,138,4.315,139,2.125,140,2.306,141,1.746,142,1.746,144,2.928,145,1.487,146,3.246,287,5.423,290,6.201,291,5.423,309,4.592,313,4.592,334,4.153,336,3.092,1551,5.494,1568,5.423,1569,4.592,1577,4.592,1578,4.592,1579,5.218,1580,5.218,1581,5.218]],["title/injectables/PaymentService.html",[31,0.73,1568,2.824]],["body/injectables/PaymentService.html",[3,0.068,4,0.068,5,0.051,6,0.087,7,0.071,9,0.343,10,0.977,12,1.439,16,0.814,18,1.039,19,0.01,20,0.97,21,0.653,22,0.932,27,1.125,29,0.443,31,0.856,32,0.308,38,0.761,39,1.314,40,0.761,46,0.068,47,0.092,49,2.776,50,1.373,51,1.614,57,2.079,58,1.647,70,1.039,71,3.399,102,0.006,103,0.006,119,2.022,121,1.983,123,1.366,139,1.873,145,0.985,148,1.189,154,1.673,155,3.563,158,3.176,166,2.266,169,2.532,171,5.179,178,3.041,226,2.136,263,5.726,328,0.907,419,1.417,433,1.374,439,2.446,449,1.417,450,3.239,454,2.742,469,4.081,601,1.334,678,1.803,1021,2.564,1022,4.044,1023,2.768,1300,4.081,1330,2.768,1339,3.041,1340,3.041,1490,3.535,1533,3.31,1557,5.774,1560,4.443,1564,5.774,1568,3.31,1573,3.041,1582,3.041,1583,5.049,1584,6.561,1585,5.049,1586,4.682,1587,4.427,1588,5.966,1589,3.456,1590,5.049,1591,3.456,1592,3.456,1593,5.049,1594,3.456,1595,4.044,1596,3.041,1597,3.456,1598,3.456,1599,3.456,1600,3.456,1601,3.456,1602,3.456,1603,3.041,1604,3.456,1605,5.049,1606,3.456,1607,3.041,1608,5.049,1609,3.456,1610,3.456,1611,3.456,1612,5.049,1613,3.456,1614,3.456,1615,3.456,1616,5.049,1617,3.456,1618,3.456,1619,3.041,1620,3.456,1621,3.041,1622,5.049,1623,5.049,1624,3.041,1625,3.456,1626,3.456,1627,3.456,1628,3.456,1629,3.456,1630,3.456,1631,3.456,1632,3.456,1633,3.456,1634,3.456,1635,3.456,1636,3.456,1637,3.456,1638,3.456,1639,3.041,1640,2.564,1641,2.768]],["title/controllers/PayosController.html",[104,0.949,1642,3.196]],["body/controllers/PayosController.html",[3,0.113,4,0.113,5,0.085,6,0.072,7,0.058,19,0.01,29,0.419,32,0.511,46,0.113,47,0.153,50,1.199,51,1.488,70,1.239,102,0.008,103,0.008,104,1.567,106,1.263,118,1.769,119,1.827,121,1.473,123,1.551,125,3.12,1586,4.81,1595,4.592,1619,5.045,1621,5.045,1624,5.045,1642,5.278,1643,5.045,1644,5.045,1645,7.113,1646,5.045,1647,6.26,1648,5.733,1649,5.733,1650,5.733,1651,7.113,1652,5.733,1653,4.254]],["title/modules/PayosModule.html",[126,0.812,291,2.824]],["body/modules/PayosModule.html",[3,0.116,4,0.116,5,0.088,6,0.074,7,0.06,19,0.01,29,0.462,32,0.528,46,0.116,47,0.158,102,0.008,103,0.008,106,1.598,126,1.479,128,1.929,129,1.929,130,2.038,131,2.038,132,1.929,133,2.699,134,2.699,140,2.497,141,1.982,142,1.982,291,5.671,1586,5.558,1642,5.822,1644,5.213,1654,5.213,1655,5.213,1656,5.213,1657,5.924,1658,5.924]],["title/injectables/PayosService.html",[31,0.73,1586,2.679]],["body/injectables/PayosService.html",[3,0.104,4,0.104,5,0.101,6,0.093,7,0.076,9,0.527,10,1.313,12,1.516,15,4.926,16,0.842,18,1.181,19,0.01,20,1.003,21,0.743,22,1.06,27,1.003,29,0.463,31,1.15,32,0.474,33,2.774,46,0.104,47,0.142,51,1.646,57,1.685,58,1.533,70,0.926,102,0.008,103,0.008,118,1.641,119,1.919,121,1.366,148,1.829,323,4.68,419,2.18,433,2.115,751,4.68,1586,4.22,1595,6.304,1596,4.68,1647,4.68,1659,4.68,1660,6.785,1661,5.318,1662,6.785,1663,5.318,1664,6.785,1665,4.68,1666,7.471,1667,5.318,1668,7.869,1669,5.318,1670,7.869,1671,5.318,1672,5.318,1673,5.318,1674,5.318,1675,5.318]],["title/controllers/PostsController.html",[104,0.949,1676,3.196]],["body/controllers/PostsController.html",[1,1.689,3,0.071,4,0.071,5,0.054,6,0.093,7,0.075,9,0.358,10,1.01,16,0.882,18,1.238,19,0.01,20,1.05,21,0.778,22,1.11,27,1.34,29,0.436,32,0.323,38,0.796,39,0.796,40,0.796,41,3.496,42,1.689,46,0.071,47,0.096,50,0.756,51,1.487,54,2.143,56,1.75,57,1.146,58,0.817,70,1.407,102,0.006,103,0.006,104,1.149,106,0.796,109,2.914,113,2.279,114,1.53,115,1.53,118,1.116,119,1.826,121,1.826,123,1.923,124,3.105,125,2.857,169,2.362,226,1.53,228,2.896,262,2.944,327,2.249,328,1.125,343,2.833,344,2.956,345,3.092,348,3.246,349,2.833,355,2.249,358,1.594,359,3.182,360,5.664,363,5.273,372,2.249,380,1.58,381,2.896,385,1.963,388,3.182,389,3.182,390,2.896,398,2.249,400,1.963,402,2.249,576,4.212,591,2.249,593,2.249,596,2.249,600,2.896,621,3.808,640,4.606,842,2.683,1185,2.513,1483,2.896,1676,3.872,1677,3.182,1678,3.616,1679,5.898,1680,3.616,1681,3.616,1682,4.592,1683,6.122,1684,3.616,1685,6.122,1686,3.616,1687,6.122,1688,3.616,1689,3.616,1690,5.898,1691,6.122,1692,3.616,1693,4.592,1694,3.616,1695,3.182,1696,5.218,1697,3.182,1698,3.616,1699,3.616,1700,5.218,1701,3.616,1702,3.616,1703,3.616,1704,3.616,1705,3.616]],["title/modules/PostsModule.html",[126,0.812,292,2.824]],["body/modules/PostsModule.html",[3,0.106,4,0.106,5,0.08,6,0.067,7,0.055,19,0.01,29,0.491,32,0.481,46,0.106,47,0.144,102,0.008,103,0.008,106,1.506,126,1.417,128,1.754,129,1.754,130,1.853,131,1.853,132,1.754,133,2.586,134,2.586,138,4.351,139,2.143,140,2.353,141,1.803,142,1.803,144,2.988,145,1.535,146,3.351,292,5.811,334,4.187,336,3.192,621,5.489,1676,5.577,1695,4.741,1706,4.741,1707,5.387,1708,4.741,1709,4.741,1710,5.387,1711,5.387]],["title/injectables/PostsService.html",[31,0.73,621,2.679]],["body/injectables/PostsService.html",[3,0.074,4,0.074,5,0.056,6,0.097,7,0.079,9,0.372,10,1.037,12,1.527,16,0.93,18,1.306,19,0.01,20,1.108,21,0.821,22,1.171,27,1.359,29,0.401,31,0.908,32,0.335,38,0.826,39,0.826,40,0.826,46,0.074,47,0.1,49,2.267,50,1.121,51,0.785,56,1.816,57,1.189,58,1.54,70,1.187,102,0.006,103,0.006,119,2.188,121,2.027,139,1.926,145,1.069,148,1.291,154,1.816,155,3.701,158,3.628,166,2.46,169,1.448,222,2.46,226,2.267,262,2.981,328,1.221,358,1.621,360,5.058,363,4.637,392,3.005,409,2.419,410,2.69,413,2.69,414,2.795,415,2.503,419,1.538,420,4.715,427,2.69,429,2.795,433,1.492,439,1.538,443,3.333,449,2.197,450,3.393,451,2.503,454,2.037,466,3.302,467,3.302,468,3.302,510,2.46,585,3.393,601,2.782,604,2.784,621,3.333,640,3.887,673,1.753,1204,3.302,1205,3.302,1206,3.302,1267,3.302,1268,3.302,1587,4.637,1679,5.999,1682,3.302,1690,5.999,1693,3.302,1712,3.302,1713,3.752,1714,5.358,1715,3.752,1716,3.752,1717,3.752,1718,3.752,1719,5.358,1720,3.752,1721,3.752,1722,3.752,1723,3.752,1724,3.752,1725,3.752,1726,3.005,1727,3.752,1728,3.752,1729,3.752,1730,3.752,1731,3.752,1732,3.752,1733,3.752,1734,3.752,1735,3.752,1736,3.302,1737,3.752]],["title/classes/Reaction.html",[47,0.115,1738,2.993]],["body/classes/Reaction.html",[3,0.134,4,0.134,5,0.102,6,0.086,7,0.07,19,0.009,46,0.134,47,0.183,102,0.009,103,0.009,339,2.423,1738,5.499,1739,6.028]],["title/controllers/ReactionController.html",[104,0.949,1740,3.196]],["body/controllers/ReactionController.html",[3,0.091,4,0.091,5,0.069,6,0.1,7,0.082,9,0.459,10,1.199,16,0.965,18,1.299,19,0.01,20,1.102,21,0.817,22,1.165,27,1.466,29,0.439,32,0.413,46,0.091,47,0.124,50,0.968,70,1.354,102,0.007,103,0.007,104,1.019,106,1.019,109,3.188,118,1.428,125,2.391,328,1.278,358,1.903,380,2.022,409,2.797,410,3.744,413,3.11,414,3.232,415,2.894,427,2.324,429,2.414,640,4.344,649,5.246,1029,4.073,1185,3.216,1646,4.073,1738,3.216,1740,4.597,1741,4.073,1742,4.073,1743,4.628,1744,4.628,1745,6.195,1746,4.628,1747,6.195,1748,4.628,1749,4.073,1750,5.77,1751,6.195,1752,4.628,1753,4.628,1754,4.073,1755,4.963,1756,4.073,1757,4.579,1758,4.073,1759,4.628,1760,4.628,1761,4.628,1762,4.628,1763,4.628,1764,4.628,1765,4.628,1766,4.628,1767,4.628]],["title/modules/ReactionModule.html",[126,0.812,293,2.993]],["body/modules/ReactionModule.html",[3,0.119,4,0.119,5,0.09,6,0.076,7,0.062,19,0.01,29,0.467,32,0.543,46,0.119,47,0.162,102,0.008,103,0.008,106,1.624,126,1.497,128,1.98,129,1.98,130,2.092,131,2.092,132,1.98,133,2.731,134,2.092,140,2.537,141,2.035,142,2.035,293,5.972,1740,5.89,1757,5.634,1758,5.353,1768,5.353,1769,5.353,1770,6.082,1771,6.082]],["title/injectables/ReactionService.html",[31,0.73,1757,2.824]],["body/injectables/ReactionService.html",[3,0.095,4,0.095,5,0.072,6,0.101,7,0.082,9,0.478,10,1.233,16,0.978,18,1.32,19,0.01,20,1.12,21,0.83,22,1.185,27,1.557,29,0.42,31,1.08,32,0.43,46,0.095,47,0.129,58,1.09,70,1.373,102,0.007,103,0.007,148,1.66,262,3.372,328,1.198,358,1.926,409,2.876,410,3.807,413,3.198,414,3.322,415,2.976,427,3.198,429,3.322,649,5.168,1738,5.478,1742,5.605,1749,5.605,1750,5.737,1754,4.246,1755,5.102,1756,4.246,1757,4.176,1772,4.246,1773,4.825,1774,4.825,1775,4.825,1776,4.825,1777,4.825,1778,7.883,1779,4.825,1780,4.246,1781,4.825]],["title/controllers/RecordsController.html",[104,0.949,1782,3.196]],["body/controllers/RecordsController.html",[1,1.735,3,0.073,4,0.073,5,0.055,6,0.093,7,0.076,9,0.368,10,1.029,16,0.891,18,1.25,19,0.01,20,1.061,21,0.786,22,1.122,27,1.354,29,0.453,32,0.331,38,0.818,39,0.818,40,0.818,41,4.013,42,1.735,46,0.073,47,0.099,50,0.777,51,1.609,52,3.308,57,1.177,58,0.839,69,2.58,70,1.416,102,0.006,103,0.006,104,1.171,106,0.818,109,2.944,113,2.323,114,1.571,115,1.571,118,1.145,119,1.845,121,1.845,123,1.942,124,1.622,125,2.883,328,1.135,358,1.708,380,1.622,386,2.781,576,4.255,591,2.309,593,2.309,596,3.308,598,2.434,674,5.839,983,2.434,1483,2.974,1485,3.267,1489,2.974,1490,3.151,1494,3.267,1653,5.034,1782,3.946,1783,3.267,1784,5.318,1785,5.318,1786,5.318,1787,5.318,1788,5.318,1789,3.713,1790,5.97,1791,3.713,1792,3.713,1793,3.713,1794,5.318,1795,3.713,1796,3.713,1797,6.213,1798,3.713,1799,3.713,1800,3.713,1801,3.713,1802,3.713,1803,5.97,1804,6.213,1805,3.713,1806,3.713,1807,3.487,1808,3.267,1809,3.713,1810,6.784,1811,3.713,1812,3.713,1813,3.713,1814,3.713,1815,3.713,1816,3.713,1817,3.713,1818,3.713,1819,3.713,1820,5.318,1821,3.713,1822,3.713,1823,3.713,1824,3.713]],["title/modules/RecordsModule.html",[126,0.812,294,2.993]],["body/modules/RecordsModule.html",[3,0.092,4,0.092,5,0.07,6,0.059,7,0.048,19,0.01,29,0.509,32,0.42,46,0.092,47,0.126,102,0.007,103,0.007,106,1.38,126,1.328,128,1.532,129,1.532,130,1.619,131,1.619,132,1.532,133,2.423,134,1.619,138,4.194,139,2.066,140,2.155,141,1.575,142,1.575,144,2.737,145,1.341,146,2.928,286,5.272,288,5.001,294,6.251,295,5.272,297,5.001,308,4.142,310,3.77,317,4.142,319,3.77,334,4.037,336,2.789,1421,4.765,1782,5.226,1807,5.272,1808,4.142,1825,4.142,1826,4.707,1827,4.142,1828,5.272,1829,4.707,1830,4.707,1831,4.142,1832,4.707]],["title/injectables/RecordsService.html",[31,0.73,1807,2.824]],["body/injectables/RecordsService.html",[3,0.024,4,0.024,5,0.018,6,0.073,7,0.059,9,0.121,10,0.417,12,0.614,16,0.696,18,0.977,19,0.01,20,0.829,21,0.723,22,0.876,27,1.306,29,0.316,31,0.365,32,0.109,38,0.474,39,0.268,40,0.268,46,0.024,47,0.032,49,3.004,50,0.837,51,1.69,57,1.845,58,1.669,63,0.757,70,1.333,71,2.425,72,0.757,102,0.002,103,0.002,119,2.01,121,2.061,139,0.9,142,0.721,145,0.347,148,0.418,155,1.901,158,3.683,166,0.798,169,2.708,179,1.071,182,2.387,193,1.071,195,5.123,201,1.071,222,3.342,226,2.842,228,1.725,242,1.071,248,1.071,256,1.895,262,0.856,326,2.222,327,1.802,328,0.984,358,1.54,371,2.55,380,2.884,386,0.883,409,1.808,415,2.509,419,0.883,425,2.711,433,1.903,439,2.655,449,1.188,450,2.403,451,1.353,454,1.573,456,1.717,469,1.802,601,1.967,619,1.071,623,1.895,655,1.496,657,2.433,658,3.585,668,1.276,669,2.403,670,3.755,671,2.923,673,1.87,674,5.994,678,3.505,815,0.974,820,4.936,830,1.071,832,0.903,900,2.178,905,3.74,906,2.49,907,3.178,908,3.489,909,1.899,911,4.104,912,0.798,913,0.721,914,0.721,915,2.372,917,1.276,944,2.321,980,1.071,1103,1.071,1152,2.977,1157,2.55,1172,1.725,1185,2.013,1223,0.845,1258,2.55,1264,1.071,1330,0.974,1346,1.725,1362,0.974,1447,1.071,1449,2.55,1457,0.974,1461,0.974,1490,3.324,1533,1.899,1587,2.15,1639,1.071,1726,1.725,1736,1.071,1780,2.55,1790,1.895,1803,3.082,1807,1.412,1828,3.138,1831,1.071,1833,1.071,1834,2.897,1835,2.153,1836,3.502,1837,3.502,1838,2.897,1839,2.153,1840,2.897,1841,2.897,1842,2.153,1843,3.502,1844,2.977,1845,1.217,1846,1.217,1847,1.217,1848,5.37,1849,2.153,1850,1.217,1851,2.153,1852,6.011,1853,2.153,1854,2.782,1855,1.217,1856,2.153,1857,4.786,1858,2.153,1859,1.217,1860,2.153,1861,1.217,1862,1.217,1863,1.217,1864,1.217,1865,1.217,1866,2.153,1867,2.153,1868,2.153,1869,1.217,1870,1.217,1871,4.003,1872,4.003,1873,5.822,1874,4.003,1875,1.217,1876,2.153,1877,2.153,1878,4.003,1879,3.502,1880,2.153,1881,2.153,1882,2.153,1883,1.217,1884,1.217,1885,1.217,1886,1.217,1887,1.217,1888,1.217,1889,2.805,1890,1.217,1891,1.217,1892,4.426,1893,2.897,1894,3.502,1895,2.153,1896,3.502,1897,2.153,1898,2.897,1899,2.153,1900,1.217,1901,3.502,1902,4.426,1903,2.897,1904,2.153,1905,1.217,1906,1.217,1907,1.217,1908,1.217,1909,2.153,1910,2.153,1911,2.897,1912,1.217,1913,2.153,1914,2.153,1915,1.217,1916,1.217,1917,2.153,1918,1.217,1919,1.895,1920,1.217,1921,1.217,1922,1.217,1923,1.217,1924,1.217,1925,1.071,1926,2.153,1927,2.897,1928,2.153,1929,2.897,1930,3.502,1931,1.217,1932,1.217,1933,1.217,1934,2.153,1935,1.217,1936,1.217,1937,1.217,1938,1.217,1939,1.217,1940,1.217,1941,1.217,1942,1.217,1943,1.217,1944,1.217,1945,2.153,1946,1.217,1947,1.217,1948,2.153,1949,1.217,1950,1.217,1951,1.217,1952,1.217,1953,1.217,1954,1.217,1955,1.217,1956,1.217,1957,2.153,1958,1.217,1959,1.217,1960,1.217,1961,1.217,1962,1.217,1963,1.217,1964,2.153,1965,1.598,1966,1.895,1967,1.217,1968,1.217,1969,1.217,1970,1.217,1971,1.217,1972,1.895,1973,1.217,1974,2.153,1975,1.217,1976,1.217,1977,1.071,1978,1.217,1979,1.217,1980,1.217,1981,1.217,1982,1.217,1983,1.217,1984,1.217,1985,3.502,1986,2.153,1987,1.217,1988,2.153,1989,1.217,1990,1.217,1991,1.217,1992,1.217,1993,3.502,1994,2.153,1995,2.153,1996,1.071,1997,2.897,1998,2.153,1999,2.153,2000,1.217,2001,1.217,2002,1.217,2003,1.217,2004,2.897,2005,1.217,2006,1.217,2007,1.217,2008,1.217,2009,1.217,2010,1.217,2011,1.217,2012,1.217,2013,1.217,2014,1.217,2015,2.153,2016,1.217,2017,1.217,2018,1.217,2019,1.217,2020,2.897,2021,2.153,2022,2.153,2023,1.217,2024,1.217,2025,1.217,2026,2.153,2027,1.217,2028,1.217,2029,1.217,2030,1.217,2031,1.217]],["title/guards/RefreshTokenAuthGuard.html",[0,2.993,81,2.552]],["body/guards/RefreshTokenAuthGuard.html",[1,1.388,2,2.064,3,0.058,4,0.058,5,0.044,6,0.068,7,0.056,8,2.064,9,0.294,10,0.873,11,5.477,12,1.965,13,2.38,14,4.599,15,4.855,16,0.56,18,0.786,19,0.01,20,0.667,21,0.494,22,0.705,23,5.115,24,5.477,26,2.064,27,0.56,28,4.288,29,0.422,30,2.204,31,1.169,32,0.265,33,1.55,34,4.046,35,2.064,36,2.204,37,1.848,38,0.654,39,0.654,40,0.654,41,1.55,42,1.388,43,1.948,44,2.204,45,2.204,46,0.129,47,0.175,48,4.55,49,3.314,50,1.612,51,1.75,52,4.073,53,4.858,54,4.958,55,4.046,56,2.639,57,2.482,58,1.77,59,4.858,60,3.134,61,4.858,62,4.073,63,4.073,64,5.477,65,4.858,66,4.55,67,4.046,68,4.231,69,3.789,70,1.285,71,3.235,72,4.073,73,4.858,74,4.046,75,2.064,76,2.204,77,3.347,78,2.204,79,2.204,80,2.204,81,2.673,82,2.204,83,2.204,84,3.347,85,2.204,86,2.204,87,2.204,88,2.204,89,2.204,90,1.848,91,3.347,92,2.204,93,2.204,94,2.204,95,1.848,96,4.046,97,2.204,98,2.204,99,2.204,100,2.204,101,1.848,102,0.005,103,0.005,2032,2.971,2033,2.971]],["title/interfaces/Reminder.html",[668,2.552,957,1.881]],["body/interfaces/Reminder.html",[3,0.102,4,0.102,5,0.077,6,0.065,7,0.053,9,0.514,19,0.01,21,0.961,29,0.305,38,1.142,39,1.142,40,1.142,46,0.102,47,0.138,102,0.007,103,0.007,123,2.182,182,3.196,328,1.368,358,1.919,441,4.05,443,5.017,513,2.362,519,3.073,521,3.603,523,3.226,601,3.113,668,4.375,957,2.265,984,3.4,2034,4.154,2035,6.461,2036,5.985,2037,3.848,2038,4.563,2039,4.563,2040,4.563,2041,4.563,2042,4.563,2043,4.563,2044,4.563,2045,4.563,2046,4.563,2047,4.563,2048,4.563,2049,4.563]],["title/controllers/ReminderController.html",[104,0.949,2050,3.196]],["body/controllers/ReminderController.html",[1,1.563,3,0.066,4,0.066,5,0.05,6,0.09,7,0.073,9,0.332,10,0.954,16,0.854,18,1.125,19,0.01,20,0.955,21,0.789,22,1.009,27,1.298,29,0.424,32,0.298,38,0.737,39,0.737,40,0.737,41,3.37,42,1.563,46,0.066,47,0.089,50,0.7,51,1.599,70,1.466,102,0.005,103,0.005,104,1.086,106,0.737,109,2.824,113,2.153,114,1.415,115,1.415,118,1.032,119,1.769,121,1.914,123,2.178,124,3.009,125,3.249,326,2.475,327,4.482,328,0.982,343,2.677,344,2.793,349,2.677,358,1.536,380,1.461,385,1.816,400,1.816,415,1.563,439,2.4,576,4.082,591,2.081,593,2.081,596,2.081,598,2.193,668,4.704,1058,4.338,1185,2.324,1223,3.425,1844,3.641,2036,2.482,2050,3.658,2051,2.943,2052,6.46,2053,4.929,2054,2.943,2055,5.685,2056,3.345,2057,3.345,2058,3.345,2059,5.854,2060,3.345,2061,5.854,2062,3.345,2063,3.345,2064,5.854,2065,3.345,2066,2.943,2067,5.685,2068,5.854,2069,3.345,2070,3.345,2071,2.943,2072,4.929,2073,2.943,2074,3.345,2075,3.345,2076,3.345,2077,4.929,2078,3.345,2079,3.345,2080,4.929,2081,5.854,2082,6.46,2083,3.345,2084,4.929,2085,4.338,2086,4.929,2087,4.929,2088,3.345,2089,3.345,2090,3.345]],["title/classes/ReminderEntity.html",[47,0.115,2037,3.196]],["body/classes/ReminderEntity.html",[3,0.096,4,0.096,5,0.073,6,0.106,7,0.087,9,0.486,12,1.397,16,1.043,18,0.853,19,0.01,20,0.724,21,0.953,22,0.766,29,0.288,38,1.079,39,1.079,40,1.079,46,0.096,47,0.131,102,0.007,103,0.007,123,2.064,182,2.946,328,1.342,339,1.734,358,1.815,441,3.83,443,4.745,513,2.277,519,2.904,521,3.405,523,3.048,601,2.944,668,4.521,957,2.141,2034,3.925,2035,6.111,2036,5.661,2037,4.775,2038,5.663,2039,4.313,2040,4.313,2041,4.313,2042,4.313,2043,4.313,2044,4.313,2045,4.313,2046,4.313,2047,4.313,2048,4.313,2049,4.313,2091,6.435,2092,4.901,2093,4.901,2094,4.901,2095,4.901,2096,4.901,2097,4.901,2098,4.901]],["title/modules/ReminderModule.html",[126,0.812,295,2.824]],["body/modules/ReminderModule.html",[3,0.106,4,0.106,5,0.08,6,0.067,7,0.055,19,0.01,29,0.491,32,0.481,46,0.106,47,0.144,102,0.008,103,0.008,106,1.506,126,1.417,128,1.754,129,1.754,130,1.853,131,1.853,132,1.754,133,2.586,134,2.586,138,4.351,139,2.143,140,2.353,141,1.803,142,1.803,144,2.988,145,1.535,146,3.351,295,5.811,334,4.187,336,3.192,1844,5.489,2050,5.577,2071,4.741,2099,4.741,2100,5.387,2101,4.741,2102,4.741,2103,5.387,2104,5.387]],["title/injectables/ReminderService.html",[31,0.73,1844,2.679]],["body/injectables/ReminderService.html",[3,0.06,4,0.06,5,0.045,6,0.095,7,0.078,9,0.303,10,0.891,12,1.313,16,0.924,18,1.259,19,0.01,20,1.069,21,0.885,22,1.13,27,1.363,29,0.364,31,0.781,32,0.272,38,0.673,39,0.673,40,0.673,46,0.06,47,0.082,49,1.949,50,0.964,51,1.557,56,2.229,58,1.574,70,1.327,102,0.005,103,0.005,119,2.159,121,1.957,123,1.5,139,1.79,145,0.87,148,1.051,154,1.478,155,3.354,158,2.989,166,2.002,169,1.778,226,2.613,326,3.101,328,1.261,358,1.469,386,2.274,409,2.08,410,3.101,413,2.313,414,2.403,415,2.152,419,2.532,427,2.313,429,2.403,441,3.101,443,3.842,454,3.012,601,2.791,668,2.73,856,3.69,905,4.097,906,4.123,907,1.73,1270,2.447,1490,3.66,1587,4.115,1603,2.688,1844,2.865,1925,4.881,2035,5.581,2036,2.266,2055,5.435,2067,5.435,2085,2.688,2105,2.688,2106,5.546,2107,3.054,2108,4.607,2109,3.054,2110,3.054,2111,3.054,2112,3.054,2113,3.054,2114,3.054,2115,3.054,2116,4.607,2117,3.054,2118,3.054,2119,3.054,2120,3.054,2121,3.054,2122,4.607,2123,4.607,2124,4.607,2125,4.607,2126,6.176,2127,4.607,2128,4.607,2129,4.607,2130,6.176,2131,6.176,2132,4.607,2133,6.176,2134,4.607,2135,4.607,2136,4.607,2137,4.607,2138,3.054,2139,3.054,2140,3.054,2141,3.054,2142,3.054,2143,3.054,2144,3.054,2145,3.054,2146,3.054,2147,6.176,2148,3.054,2149,3.054,2150,4.607,2151,3.054,2152,3.054,2153,3.054,2154,3.054,2155,3.054,2156,3.054]],["title/guards/RoleAuthGuard.html",[0,2.993,90,2.679]],["body/guards/RoleAuthGuard.html",[1,1.381,2,2.054,3,0.058,4,0.058,5,0.044,6,0.068,7,0.055,8,2.054,9,0.293,10,0.87,11,5.468,12,1.961,14,4.636,15,4.85,16,0.558,18,0.783,19,0.01,20,0.664,21,0.492,22,0.702,23,5.106,24,5.468,26,2.054,27,0.557,28,4.28,29,0.421,30,2.194,31,1.167,32,0.264,33,1.542,34,5.106,35,2.054,36,2.194,37,1.839,38,0.651,39,0.651,40,0.651,41,1.542,42,1.381,43,1.938,44,2.194,45,2.194,46,0.128,47,0.174,48,4.54,49,3.31,50,1.61,51,1.749,52,4.064,53,4.848,54,4.955,55,4.035,56,2.632,57,2.48,58,1.768,59,4.848,60,3.123,61,4.848,62,4.064,63,4.064,64,5.468,65,4.848,66,4.54,67,4.035,68,4.221,69,3.778,70,1.283,71,3.229,72,4.064,73,4.848,74,4.035,75,2.054,76,2.194,77,3.335,78,2.194,79,2.194,80,2.194,81,1.752,82,2.194,83,2.194,84,3.335,85,2.194,86,2.194,87,2.194,88,2.194,89,2.194,90,2.796,91,3.335,92,2.194,93,2.194,94,2.194,95,1.839,96,4.035,97,2.194,98,2.194,99,2.194,100,2.194,101,1.839,102,0.005,103,0.005,2157,2.957,2158,2.957,2159,2.957]],["title/classes/SocketIoAdapter.html",[47,0.115,2160,3.45]],["body/classes/SocketIoAdapter.html",[3,0.106,4,0.106,5,0.08,6,0.094,7,0.077,9,0.536,10,1.457,12,1.542,16,0.851,18,1.194,19,0.01,20,1.014,21,0.751,22,1.072,27,1.02,29,0.443,32,0.483,46,0.106,47,0.144,51,1.132,70,0.942,71,2.443,102,0.008,103,0.008,262,2.995,339,1.914,640,3.365,801,4.761,916,4.065,1009,5.876,1054,4.761,1234,4.334,2160,5.494,2161,6.628,2162,4.761,2163,7.531,2164,6.859,2165,6.859,2166,7.919,2167,5.41,2168,4.761,2169,6.859,2170,7.919,2171,5.41,2172,4.761,2173,6.036,2174,5.41,2175,6.036,2176,5.41,2177,4.761,2178,6.859,2179,5.41,2180,5.41,2181,5.41]],["title/classes/Standard.html",[47,0.115,669,2.339]],["body/classes/Standard.html",[3,0.113,4,0.113,5,0.085,6,0.108,7,0.088,9,0.57,16,1.052,19,0.01,21,0.928,46,0.113,47,0.153,102,0.008,103,0.008,262,3.453,328,1.23,339,2.033,358,1.841,513,2.52,655,5.379,656,5.744,657,5.379,658,4.204,659,6.813,669,3.868,2182,5.057,2183,5.746,2184,5.746,2185,5.746,2186,5.746,2187,5.746,2188,5.746]],["title/controllers/StandardController.html",[104,0.949,2189,3.196]],["body/controllers/StandardController.html",[3,0.084,4,0.084,5,0.064,6,0.095,7,0.077,9,0.425,10,1.138,16,0.897,18,1.258,19,0.01,20,1.068,21,0.791,22,1.129,27,1.362,29,0.425,32,0.382,38,0.944,39,0.944,40,0.944,46,0.084,47,0.114,50,0.897,51,1.512,70,1.421,102,0.007,103,0.007,104,1.295,106,0.944,109,2.963,113,2.569,114,1.813,115,1.813,118,1.322,119,1.856,121,1.856,123,1.955,124,1.873,125,2.922,328,1.189,343,3.194,344,3.332,349,3.194,380,1.873,385,2.328,400,2.328,652,3.856,656,4.364,669,4.43,1421,3.979,1653,4.982,1972,5.176,2189,4.364,2190,3.772,2191,5.882,2192,4.286,2193,6.359,2194,7.822,2195,4.286,2196,4.286,2197,5.882,2198,4.286,2199,4.286,2200,5.882,2201,4.286,2202,4.286,2203,6.359,2204,5.882,2205,4.286,2206,5.882,2207,4.286,2208,3.772,2209,4.286,2210,4.286,2211,4.286,2212,4.286,2213,4.286,2214,4.286]],["title/modules/StandardModule.html",[126,0.812,296,2.993]],["body/modules/StandardModule.html",[3,0.112,4,0.112,5,0.084,6,0.071,7,0.058,19,0.01,29,0.488,32,0.507,46,0.112,47,0.152,102,0.008,103,0.008,106,1.558,126,1.452,128,1.85,129,1.85,130,1.954,131,1.954,132,1.85,133,2.649,134,1.954,139,2.172,140,2.433,141,1.901,142,1.901,144,3.09,145,1.619,288,5.258,296,6.112,310,4.551,1421,5.01,2189,5.715,2208,5,2215,5.681,2216,5.681,2217,5.681,2218,5.681,2219,5.681]],["title/injectables/StandardService.html",[31,0.73,1421,2.552]],["body/injectables/StandardService.html",[3,0.075,4,0.075,5,0.057,6,0.099,7,0.081,9,0.378,10,1.049,12,1.545,16,0.962,18,1.313,19,0.01,20,1.114,21,0.825,22,1.178,27,1.421,29,0.404,31,0.919,32,0.34,38,0.84,39,0.84,40,0.84,46,0.075,47,0.102,49,2.294,50,1.134,51,1.437,57,1.999,58,1.425,70,1.35,71,1.723,102,0.006,103,0.006,119,1.937,121,1.62,139,1.937,145,1.087,148,1.312,154,1.846,158,2.624,226,2.294,328,1.225,358,1.793,386,2.223,409,2.448,410,3.448,413,2.722,414,2.828,415,2.533,419,1.564,427,2.722,429,2.828,433,1.517,439,2.586,454,2.071,469,2.373,504,4.773,510,2.501,652,2.501,655,2.651,657,2.651,658,2.071,669,2.944,670,3.738,911,3.213,1393,4.824,1397,3.357,1421,3.213,1438,3.357,1456,3.357,1457,3.056,1977,5.551,2193,6.044,2203,6.044,2220,3.357,2221,5.422,2222,3.815,2223,5.422,2224,3.815,2225,3.815,2226,3.815,2227,5.422,2228,3.815,2229,3.815,2230,5.422,2231,3.815,2232,4.023,2233,3.815,2234,3.815,2235,3.815,2236,3.815,2237,3.815,2238,3.815,2239,3.815,2240,3.815,2241,3.815,2242,3.815,2243,3.815,2244,3.815,2245,5.422,2246,3.815,2247,3.815,2248,3.815]],["title/classes/Tag.html",[47,0.115,456,2.552]],["body/classes/Tag.html",[3,0.134,4,0.134,5,0.102,6,0.086,7,0.07,19,0.009,46,0.134,47,0.183,102,0.009,103,0.009,339,2.423,456,4.69,2249,6.028]],["title/controllers/TagController.html",[104,0.949,2250,3.196]],["body/controllers/TagController.html",[3,0.074,4,0.074,5,0.056,6,0.097,7,0.079,9,0.374,10,1.04,16,0.932,18,1.258,19,0.01,20,1.067,21,0.791,22,1.128,27,1.416,29,0.402,32,0.336,38,0.83,39,0.83,40,0.83,46,0.074,47,0.101,50,0.788,51,1.571,70,1.452,102,0.006,103,0.006,104,1.184,106,0.83,109,3.078,113,2.348,114,1.594,115,1.594,118,1.163,119,1.929,121,1.929,123,2.031,124,3.28,125,2.982,328,1.222,343,2.919,344,3.045,345,4.048,348,3.343,349,2.919,355,2.344,358,1.625,372,2.344,380,1.646,385,2.046,386,3.417,398,2.344,400,2.046,402,2.344,1408,3.897,1490,3.185,2250,3.988,2251,3.317,2252,5.375,2253,3.769,2254,6.011,2255,6.265,2256,3.769,2257,4.73,2258,6.265,2259,3.769,2260,6.265,2261,3.769,2262,6.265,2263,3.769,2264,3.769,2265,6.265,2266,3.769,2267,3.769,2268,6.011,2269,6.265,2270,3.769,2271,4.73,2272,3.769,2273,3.317,2274,3.769,2275,3.769,2276,3.769,2277,3.769,2278,3.769,2279,3.769,2280,3.769]],["title/modules/TagModule.html",[126,0.812,297,2.679]],["body/modules/TagModule.html",[3,0.113,4,0.113,5,0.085,6,0.072,7,0.059,19,0.01,29,0.476,32,0.513,46,0.113,47,0.153,102,0.008,103,0.008,106,1.569,126,1.459,128,1.871,129,1.871,130,1.977,131,1.977,132,1.871,133,2.663,134,2.663,139,2.178,140,2.45,141,1.923,142,1.923,145,1.638,297,5.446,1408,5.536,2250,5.744,2273,5.057,2281,5.057,2282,5.057,2283,5.057,2284,5.746,2285,5.746]],["title/injectables/TagService.html",[31,0.73,1408,2.679]],["body/injectables/TagService.html",[3,0.072,4,0.072,5,0.055,6,0.098,7,0.08,9,0.365,10,1.024,12,1.05,16,0.952,18,1.298,19,0.01,20,1.101,21,0.816,22,1.164,27,1.405,29,0.364,31,0.897,32,0.329,38,0.812,39,0.812,40,0.812,46,0.072,47,0.098,50,0.771,51,1.606,56,1.784,57,2.143,58,1.528,70,1.337,71,1.664,102,0.006,103,0.006,118,1.137,119,1.915,121,1.59,123,0.997,139,1.915,145,1.05,148,1.268,154,1.784,158,3.272,169,2.041,226,2.238,328,1.215,358,1.608,386,2.537,409,2.388,410,3.395,413,2.656,414,2.759,415,2.471,419,1.511,425,4.056,427,2.656,429,2.759,433,1.465,439,2.772,441,1.85,456,3.135,457,4.237,458,5.445,469,3.29,485,3.243,504,4.698,510,2.416,601,1.422,907,2.997,908,2.292,917,2.184,1270,2.952,1408,3.29,1490,3.135,1532,3.243,1533,2.416,1726,2.952,1919,3.243,2254,5.95,2257,3.243,2268,5.95,2271,4.655,2286,3.243,2287,5.29,2288,3.685,2289,5.29,2290,3.685,2291,3.685,2292,5.29,2293,3.685,2294,3.685,2295,3.685,2296,5.29,2297,3.685,2298,5.29,2299,3.685,2300,3.685,2301,3.685,2302,3.685,2303,5.29,2304,3.685,2305,3.685,2306,3.685,2307,3.685,2308,3.685,2309,3.685,2310,3.685,2311,3.685,2312,3.685,2313,3.685]],["title/injectables/TimeUtilsService.html",[31,0.73,1828,2.824]],["body/injectables/TimeUtilsService.html",[3,0.113,4,0.113,5,0.085,6,0.089,7,0.073,9,0.57,10,1.378,16,0.713,18,1.001,19,0.01,20,0.849,21,0.848,22,0.898,27,1.083,29,0.338,31,1.208,32,0.513,46,0.113,47,0.153,51,1.619,70,1.001,102,0.008,103,0.008,148,1.977,182,2.92,326,3.576,1021,4.264,1022,5.706,1023,4.603,1828,4.67,1965,5.285,1966,6.269,2314,5.057,2315,7.741,2316,5.746,2317,5.746,2318,5.746,2319,5.746,2320,5.746,2321,7.123,2322,5.746,2323,5.746,2324,5.746,2325,5.746,2326,5.746,2327,5.746,2328,5.746,2329,5.746]],["title/interfaces/TokenDataType.html",[957,1.881,2330,3.196]],["body/interfaces/TokenDataType.html",[3,0.108,4,0.108,5,0.081,6,0.069,7,0.056,9,0.543,19,0.01,21,0.898,22,1.309,46,0.108,47,0.146,58,1.563,102,0.008,103,0.008,169,2.115,182,3.528,328,1.344,358,1.951,449,3.364,450,3.755,451,3.833,513,2.447,601,3.07,957,2.395,984,3.594,2330,5.622,2331,4.391,2332,6.572,2333,4.067,2334,4.824,2335,4.824,2336,4.824,2337,4.824,2338,4.824,2339,4.067,2340,4.824,2341,4.067,2342,4.824]],["title/classes/TokenDto.html",[47,0.115,2333,3.196]],["body/classes/TokenDto.html",[3,0.103,4,0.103,5,0.078,6,0.105,7,0.086,9,0.521,12,1.496,16,1.028,18,0.914,19,0.01,20,0.776,21,0.907,22,1.16,46,0.103,47,0.14,58,1.521,102,0.007,103,0.007,169,2.866,182,3.397,328,1.309,339,1.858,358,1.863,449,3.211,450,3.654,451,3.659,513,2.381,601,2.026,957,2.294,2330,5.812,2331,4.206,2332,6.274,2333,4.993,2334,5.922,2335,4.621,2336,4.621,2337,4.621,2338,4.621,2339,3.896,2340,4.621,2341,3.896,2342,4.621,2343,6.73,2344,5.251,2345,5.251,2346,5.251,2347,5.251,2348,5.251]],["title/classes/UpdateReactionDto.html",[47,0.115,1750,2.993]],["body/classes/UpdateReactionDto.html",[3,0.129,4,0.129,5,0.098,6,0.082,7,0.067,19,0.01,29,0.454,46,0.129,47,0.175,102,0.009,103,0.009,339,2.322,409,2.963,649,4.302,651,5.256,916,4.574,1750,5.363,1755,5.256,2349,5.775,2350,7.718,2351,5.775,2352,5.775]],["title/classes/UpdateStandardDto.html",[47,0.115,2232,3.196]],["body/classes/UpdateStandardDto.html",[3,0.123,4,0.123,5,0.093,6,0.094,7,0.077,9,0.623,16,0.779,19,0.01,21,0.688,29,0.443,46,0.123,47,0.168,102,0.008,103,0.008,328,1.143,339,2.222,358,1.915,409,2.836,513,2.661,652,4.118,654,5.031,660,5.528,916,4.457,2232,5.58,2351,5.528,2353,6.618,2354,7.52,2355,5.528,2356,5.528,2357,6.281]],["title/interfaces/User.html",[169,1.662,957,1.881]],["body/interfaces/User.html",[3,0.08,4,0.08,5,0.06,6,0.051,7,0.041,9,0.402,19,0.01,20,1.096,21,0.943,22,1.319,29,0.238,37,4.615,38,0.892,39,0.892,40,0.892,46,0.08,47,0.108,58,1.278,95,4.615,102,0.006,103,0.006,123,2.007,169,2.514,182,3.549,328,1.373,358,1.765,449,3.042,450,3.071,451,3.466,513,2.001,519,2.4,523,2.519,957,1.769,961,3.244,984,2.655,1092,5.943,1094,5.505,1640,5.505,1641,5.943,1854,2.814,1965,5.233,2339,3.005,2341,3.005,2358,3.244,2359,6.529,2360,6.207,2361,6.529,2362,6.529,2363,6.529,2364,3.564,2365,3.564,2366,3.564,2367,3.564,2368,3.564,2369,3.564,2370,3.564,2371,3.564,2372,3.564,2373,3.564,2374,3.564,2375,3.564,2376,3.564,2377,3.564,2378,3.564,2379,3.564,2380,3.564,2381,3.564,2382,3.564,2383,3.564,2384,3.564,2385,3.564,2386,3.564,2387,3.564,2388,3.564,2389,3.564,2390,3.564,2391,3.564,2392,3.564,2393,3.564]],["title/classes/UserEntity.html",[47,0.115,1854,2.993]],["body/classes/UserEntity.html",[3,0.075,4,0.075,5,0.057,6,0.108,7,0.088,9,0.379,12,1.091,16,1.066,18,0.666,19,0.01,20,1.073,21,0.941,22,1.135,29,0.225,37,4.278,38,0.843,39,0.843,40,0.843,46,0.075,47,0.102,58,1.228,95,4.278,102,0.006,103,0.006,123,1.861,169,2.654,182,3.427,328,1.351,339,1.354,358,1.636,449,2.82,450,2.95,451,3.213,513,1.922,519,2.268,523,2.38,957,1.672,961,3.065,1092,5.509,1094,5.103,1640,5.103,1641,5.509,1854,3.776,1965,2.839,2339,2.839,2341,2.839,2358,3.065,2359,6.053,2360,3.368,2361,6.053,2362,6.053,2363,6.053,2364,5.56,2365,5.56,2366,4.782,2367,3.368,2368,3.368,2369,3.368,2370,3.368,2371,3.368,2372,3.368,2373,3.368,2374,3.368,2375,3.368,2376,3.368,2377,3.368,2378,3.368,2379,3.368,2380,3.368,2381,3.368,2382,3.368,2383,3.368,2384,3.368,2385,3.368,2386,3.368,2387,3.368,2388,3.368,2389,3.368,2390,3.368,2391,3.368,2392,3.368,2393,3.368,2394,5.434,2395,3.827,2396,3.827,2397,3.827,2398,3.827,2399,3.827,2400,3.827,2401,3.827,2402,3.827,2403,3.827,2404,3.827,2405,3.827,2406,3.827,2407,3.827,2408,3.827,2409,3.827]],["title/controllers/UsersController.html",[104,0.949,2410,3.196]],["body/controllers/UsersController.html",[1,1.466,3,0.037,4,0.037,5,0.028,6,0.088,7,0.072,9,0.187,10,0.607,16,0.854,18,1.168,19,0.01,20,0.991,21,0.734,22,1.048,27,1.298,29,0.332,32,0.168,38,0.415,39,0.415,40,0.415,41,3.864,42,0.881,46,0.037,47,0.05,50,0.394,51,1.691,54,1.86,57,2.313,58,1.649,70,1.435,81,1.117,102,0.003,103,0.003,104,0.691,106,0.415,109,2.822,113,1.371,114,0.797,115,0.797,118,0.582,119,2.219,121,1.972,123,2.004,124,2.84,125,3.246,155,2.19,169,2.816,174,1.659,229,6.605,262,0.75,327,2.508,328,0.857,343,1.704,345,2.786,348,1.952,349,1.704,358,1.242,372,1.173,380,0.824,385,1.024,386,1.653,398,1.173,400,1.024,419,2.749,433,0.75,439,1.928,576,4.501,591,1.173,593,1.173,596,3.248,598,1.236,599,4.138,600,4.183,601,2.896,832,2.329,842,1.399,858,1.659,1094,1.399,1461,1.51,1489,3.23,1533,3.083,1607,3.549,1640,3.489,1653,3.875,1697,4.138,2054,1.659,2066,1.659,2073,1.659,2332,3.766,2410,2.329,2411,1.659,2412,3.139,2413,3.139,2414,3.139,2415,3.139,2416,3.139,2417,3.139,2418,3.139,2419,1.885,2420,4.702,2421,1.885,2422,1.885,2423,4.702,2424,4.032,2425,1.885,2426,1.885,2427,4.702,2428,4.032,2429,1.885,2430,4.032,2431,1.885,2432,4.032,2433,1.885,2434,1.885,2435,1.885,2436,1.885,2437,1.885,2438,4.702,2439,4.032,2440,1.885,2441,1.885,2442,4.702,2443,4.032,2444,1.885,2445,1.885,2446,1.885,2447,1.885,2448,5.978,2449,4.032,2450,1.885,2451,1.885,2452,1.885,2453,1.885,2454,1.885,2455,1.885,2456,1.885,2457,1.659,2458,1.885,2459,1.885,2460,1.885,2461,1.885,2462,1.885,2463,1.885,2464,1.885,2465,1.885,2466,3.139,2467,1.885,2468,1.885,2469,3.139,2470,1.885,2471,1.885,2472,4.702,2473,3.139,2474,3.139,2475,3.139,2476,1.885,2477,3.139,2478,5.222,2479,3.139,2480,3.139,2481,1.885,2482,1.885,2483,1.885,2484,3.139,2485,1.885,2486,1.885,2487,1.885,2488,1.885,2489,1.885,2490,1.885,2491,1.885,2492,3.139,2493,1.885,2494,1.885,2495,1.885,2496,1.885,2497,1.885,2498,1.885,2499,3.139,2500,1.885,2501,1.885,2502,1.885,2503,1.885,2504,1.885]],["title/modules/UsersModule.html",[126,0.812,138,2.247]],["body/modules/UsersModule.html",[3,0.103,4,0.103,5,0.078,6,0.066,7,0.053,19,0.01,29,0.496,32,0.467,46,0.103,47,0.14,102,0.007,103,0.007,106,1.48,126,1.399,128,1.706,129,1.706,130,1.803,131,1.803,132,1.706,133,2.552,134,2.552,138,4.643,139,2.127,140,2.312,141,1.753,142,1.753,144,2.936,145,1.493,155,4.773,285,5.429,307,4.611,334,4.157,336,3.105,1031,5.151,2410,5.505,2457,4.611,2505,4.611,2506,4.611,2507,4.611,2508,5.24,2509,5.24,2510,5.24,2511,5.24]],["title/classes/VisitRecord.html",[47,0.115,904,2.679]],["body/classes/VisitRecord.html",[3,0.095,4,0.095,5,0.072,6,0.105,7,0.085,9,0.48,16,1.025,19,0.01,20,0.716,21,0.905,46,0.155,47,0.211,102,0.007,103,0.007,182,3.479,262,2.539,328,1.357,339,1.714,425,2.744,449,3.236,451,2.263,513,2.259,585,2.63,601,2.756,658,2.63,671,3.586,673,3.337,678,2.527,898,3.176,899,3.176,900,4.724,904,4.443,905,4.471,906,4.443,907,4.471,908,4.443,909,4.683,910,3.972,911,2.87,912,3.176,913,2.87,914,2.87,915,2.87,916,2.87,917,2.87,2512,4.844,2513,4.844,2514,4.844,2515,4.844,2516,4.844,2517,4.844,2518,4.844]],["title/classes/VisitRecordIncludeOtherTables.html",[47,0.115,915,2.552]],["body/classes/VisitRecordIncludeOtherTables.html",[3,0.088,4,0.088,5,0.067,6,0.096,7,0.078,9,0.446,16,1.058,19,0.01,20,0.664,21,0.934,22,0.949,46,0.151,47,0.205,102,0.007,103,0.007,182,3.428,262,2.736,328,1.347,339,1.59,425,2.546,449,3.156,451,2.1,513,2.149,585,2.441,601,2.655,658,3.736,671,3.983,673,3.707,678,2.345,898,2.947,899,2.947,900,4.584,904,5.257,905,4.361,906,4.28,907,4.361,908,4.28,909,4.511,910,4.28,911,2.664,912,2.947,913,2.664,914,2.664,915,3.6,916,3.6,917,4.078,2519,4.495,2520,4.495,2521,4.495,2522,4.495,2523,8.111,2524,4.495,2525,4.495,2526,4.495,2527,4.495,2528,4.495,2529,4.495,2530,4.495]],["title/classes/VisitRecordMetric.html",[47,0.115,910,2.679]],["body/classes/VisitRecordMetric.html",[3,0.095,4,0.095,5,0.072,6,0.105,7,0.085,9,0.48,16,1.025,19,0.01,20,0.716,21,0.905,46,0.155,47,0.211,102,0.007,103,0.007,182,3.439,262,2.84,328,1.357,339,1.714,425,4.047,449,3.236,451,3.337,513,2.259,585,2.63,601,1.869,658,2.63,671,3.586,673,3.337,678,3.726,898,3.176,899,3.176,900,3.972,904,3.972,905,4.471,906,3.013,907,4.471,908,3.013,909,3.176,910,4.443,911,4.233,912,4.683,913,2.87,914,2.87,915,2.87,916,2.87,917,2.87,2531,4.844,2532,4.844,2533,4.844,2534,4.844,2535,4.844,2536,4.844,2537,4.844]],["title/coverage.html",[2538,5.193]],["body/coverage.html",[0,3.776,1,1.123,5,0.036,6,0.113,7,0.092,8,3.776,14,1.362,19,0.01,21,0.263,31,1.417,43,1.576,47,0.221,58,0.543,81,1.425,90,1.496,101,1.496,102,0.004,103,0.004,104,1.802,105,1.784,107,2.116,116,1.576,132,0.783,139,0.618,149,2.116,155,1.306,169,0.928,222,5.935,269,1.784,270,2.116,273,1.576,324,2.116,338,1.576,340,2.116,341,1.784,342,2.116,383,1.576,408,2.116,435,1.671,456,1.425,512,2.116,525,1.784,526,2.116,544,1.576,555,2.116,572,1.784,573,2.116,594,1.576,614,2.116,621,1.496,649,1.576,650,2.116,651,3.065,652,1.576,653,2.116,654,3.065,665,2.116,668,1.425,669,1.306,670,1.425,671,1.921,673,1.788,738,1.425,741,3.537,882,4.352,893,1.926,898,3.889,904,1.496,910,1.496,915,1.425,918,1.784,919,2.116,938,1.576,950,1.926,951,3.367,957,2.76,967,2.116,983,1.576,985,2.116,993,2.116,1027,1.784,1028,2.116,1031,1.496,1070,2.116,1100,1.926,1101,3.065,1119,1.784,1125,2.116,1131,1.784,1132,2.116,1152,1.496,1243,2.116,1276,1.784,1277,2.116,1300,1.496,1317,2.116,1345,3.065,1351,1.784,1374,1.784,1375,2.116,1393,1.496,1406,2.116,1408,1.496,1421,1.425,1466,1.784,1467,2.116,1486,1.576,1507,2.116,1551,1.784,1552,2.116,1568,1.576,1582,2.116,1586,1.496,1642,1.784,1643,2.116,1659,2.116,1676,1.784,1677,2.116,1712,2.116,1738,1.671,1739,2.116,1740,1.784,1741,2.116,1750,1.671,1757,1.576,1772,2.116,1782,1.784,1783,2.116,1807,1.576,1828,1.576,1833,2.116,1844,1.496,1854,1.671,2034,3.065,2037,1.784,2050,1.784,2051,2.116,2105,2.116,2160,1.926,2161,2.116,2162,2.116,2182,2.116,2189,1.784,2190,2.116,2220,2.116,2232,1.784,2249,2.116,2250,1.784,2251,2.116,2286,2.116,2314,2.116,2330,1.784,2331,3.065,2333,1.784,2349,2.116,2353,2.116,2358,3.065,2410,1.784,2411,2.116,2538,2.116,2539,2.404,2540,2.404,2541,2.404,2542,6.626,2543,7.852,2544,6.878,2545,6.878,2546,5.434,2547,7.932,2548,6.626,2549,6.878,2550,2.404,2551,2.116,2552,5.434,2553,4.766,2554,2.404,2555,3.827,2556,2.404,2557,2.404,2558,2.404,2559,2.404,2560,2.404,2561,2.404,2562,2.116,2563,2.116,2564,2.116,2565,2.116,2566,3.367,2567,2.116,2568,2.116,2569,2.404,2570,2.404]],["title/dependencies.html",[129,1.688,212,2.872]],["body/dependencies.html",[7,0.041,19,0.01,32,0.357,33,2.089,35,2.783,42,2.621,47,0.15,52,2.491,102,0.006,103,0.006,114,2.74,115,1.694,129,1.304,330,4.938,717,3.524,775,5.699,776,3.524,777,3.524,779,3.524,780,3.208,782,3.524,783,3.524,805,3.524,991,3.208,1045,3.208,1067,3.524,1080,3.524,1111,3.524,1234,4.494,1236,3.524,1665,3.524,1996,3.524,2173,4.938,2177,3.524,2352,3.524,2355,3.524,2356,3.524,2571,4.005,2572,8.024,2573,4.005,2574,6.476,2575,4.005,2576,4.005,2577,4.005,2578,4.005,2579,5.611,2580,5.611,2581,5.611,2582,4.938,2583,4.005,2584,4.005,2585,6.476,2586,4.005,2587,5.611,2588,4.005,2589,4.005,2590,4.005,2591,4.005,2592,6.476,2593,4.005,2594,4.005,2595,4.005,2596,4.005,2597,4.005,2598,6.476,2599,4.005,2600,4.005,2601,4.005,2602,5.611,2603,4.005,2604,4.005,2605,4.005,2606,4.005,2607,5.611,2608,4.005,2609,4.005,2610,4.005,2611,4.005,2612,6.476,2613,4.005,2614,4.005,2615,5.611,2616,3.524,2617,4.005,2618,4.005,2619,5.611,2620,5.611,2621,4.005,2622,4.005,2623,4.005,2624,4.005,2625,4.005,2626,4.005,2627,4.005,2628,4.005,2629,4.005,2630,4.005,2631,4.005,2632,4.005,2633,4.005,2634,5.611,2635,4.005,2636,4.005,2637,4.005,2638,4.005,2639,4.005,2640,4.005,2641,4.005,2642,4.005,2643,4.005,2644,4.005,2645,4.005,2646,4.005,2647,4.005,2648,4.005,2649,5.611,2650,4.005,2651,4.005,2652,7.018,2653,5.611,2654,5.611,2655,4.005,2656,4.005,2657,4.005,2658,6.476,2659,4.005,2660,4.005,2661,4.005,2662,4.005,2663,4.005,2664,4.005,2665,4.005,2666,4.005,2667,4.005,2668,4.005,2669,4.005,2670,5.611,2671,4.005,2672,4.005,2673,4.005,2674,4.005,2675,4.005,2676,4.005,2677,4.005,2678,4.005,2679,4.005,2680,4.005,2681,4.005,2682,4.005,2683,4.005,2684,4.005,2685,4.005,2686,4.005]],["title/miscellaneous/functions.html",[1889,4.154,2687,2.661]],["body/miscellaneous/functions.html",[6,0.103,7,0.084,9,0.599,18,1.378,19,0.01,20,1.169,21,0.804,22,1.236,27,1.138,102,0.008,103,0.008,132,2.576,158,2.922,226,2.554,328,1.116,741,4.48,790,6.462,883,5.314,1101,4.837,1109,7.245,1112,5.314,1118,5.314,1119,5.449,1889,4.837,2172,6.462,2551,6.462,2564,5.314,2565,6.462,2568,5.314,2687,4.48,2688,6.038,2689,6.038,2690,6.038,2691,5.314,2692,6.038,2693,6.038]],["title/index.html",[9,0.355,823,3.155,2694,3.586]],["body/index.html",[16,0.545,19,0.009,58,1.781,102,0.007,103,0.007,232,3.865,252,6.721,338,2.88,409,2.7,792,3.518,1019,3.865,1083,5.984,1088,5.984,2168,3.865,2175,3.865,2616,5.984,2695,4.392,2696,4.392,2697,8.865,2698,7.637,2699,4.392,2700,8.063,2701,8.063,2702,6.8,2703,5.98,2704,8.063,2705,8.206,2706,4.392,2707,4.392,2708,4.392,2709,4.392,2710,4.392,2711,5.98,2712,4.392,2713,5.98,2714,6.8,2715,4.392,2716,4.392,2717,4.392,2718,6.8,2719,4.392,2720,7.637,2721,4.392,2722,6.8,2723,5.98,2724,4.392,2725,4.392,2726,4.392,2727,4.392,2728,5.98,2729,5.98,2730,5.98,2731,4.392,2732,4.392,2733,4.392,2734,4.392,2735,4.392,2736,4.392,2737,4.392,2738,4.392,2739,4.392,2740,5.98,2741,6.8,2742,4.392,2743,4.392,2744,4.392,2745,7.637,2746,4.392,2747,4.392,2748,4.392,2749,4.392,2750,6.8,2751,4.392,2752,5.98,2753,4.392,2754,4.392,2755,4.392,2756,4.392,2757,4.392,2758,4.392,2759,4.392,2760,4.392,2761,5.98,2762,4.392,2763,6.8,2764,7.3,2765,5.263,2766,4.392,2767,5.98,2768,4.392,2769,4.392,2770,4.392,2771,4.392,2772,4.392,2773,4.392,2774,4.392,2775,4.392,2776,4.392,2777,4.392,2778,4.392,2779,4.392,2780,4.392,2781,4.392,2782,4.392,2783,4.392,2784,4.392,2785,4.392,2786,4.392,2787,4.392,2788,4.392,2789,4.392]],["title/modules.html",[128,1.921]],["body/modules.html",[19,0.008,102,0.008,103,0.008,127,3.703,128,1.735,138,2.78,276,3.954,280,3.703,281,3.703,282,3.703,283,3.703,284,3.703,285,3.494,286,3.494,287,3.494,288,3.315,289,3.703,290,3.703,291,3.494,292,3.494,293,3.703,294,3.703,295,3.494,296,3.703,297,3.315,331,3.954,334,2.676,2582,7.981,2765,7.981,2790,9.069,2791,9.069]],["title/overview.html",[167,4.727]],["body/overview.html",[2,1.853,14,3.905,19,0.01,102,0.005,103,0.005,106,0.587,116,3.342,126,0.503,127,5.088,128,0.868,129,0.868,130,0.917,131,0.917,132,0.868,133,0.917,134,0.917,135,2.346,136,2.346,137,2.346,138,4.341,139,2.112,140,1.428,141,0.892,142,0.892,148,0.917,155,3.743,167,2.136,273,3.342,276,6.575,277,2.346,278,2.346,279,2.346,280,4.789,281,4.789,282,5.455,283,4.332,284,4.789,285,4.519,286,5.078,287,4.801,288,4.818,289,5.088,290,5.575,291,4.519,292,5.147,293,4.332,294,5.868,295,5.147,296,5.088,297,4.656,331,4.268,332,2.346,333,2.346,334,3.941,339,0.943,383,3.342,404,2.346,405,2.346,544,3.342,551,2.346,552,2.346,594,3.342,609,2.346,610,2.346,621,4.287,736,2.346,737,2.346,738,4.224,938,3.342,963,2.346,964,2.346,984,1.748,986,2.346,987,2.346,988,2.346,1021,1.978,1031,4.434,1040,2.346,1041,2.346,1042,2.346,1085,2.346,1152,4.287,1229,2.346,1230,2.346,1231,2.346,1300,4.287,1312,2.346,1313,2.346,1314,2.346,1393,4.287,1400,2.346,1401,2.346,1402,2.346,1408,4.287,1421,3.409,1486,3.342,1502,2.346,1504,2.346,1568,3.342,1577,2.346,1578,2.346,1586,4.287,1654,2.346,1655,2.346,1656,2.346,1706,2.346,1708,2.346,1709,2.346,1757,3.342,1768,2.346,1769,2.346,1807,3.342,1825,2.346,1827,2.346,1828,3.342,1844,4.287,2099,2.346,2101,2.346,2102,2.346,2281,2.346,2282,2.346,2283,2.346,2505,2.346,2506,2.346,2507,2.346,2792,2.666,2793,2.666,2794,2.666,2795,2.666]],["title/properties.html",[212,2.872,513,1.835]],["body/properties.html",[19,0.01,102,0.009,103,0.009,513,2.457,2796,6.945,2797,6.945,2798,6.945,2799,6.945]],["title/miscellaneous/variables.html",[2687,2.661,2800,4.564]],["body/miscellaneous/variables.html",[5,0.107,6,0.098,7,0.08,9,0.583,19,0.01,21,0.791,43,4.738,56,2.847,58,1.633,70,1.024,102,0.008,103,0.008,328,1.098,677,6.535,678,4.256,741,4.364,755,5.362,766,5.788,893,5.788,894,5.176,895,5.176,896,5.176,897,4.711,2562,5.176,2563,6.359,2566,5.176,2567,7.37,2687,4.364,2691,5.176,2800,5.176,2801,7.226,2802,5.882,2803,5.882,2804,5.882,2805,5.882,2806,5.882,2807,7.226,2808,5.882,2809,5.882]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":222,"title":{},"body":{"injectables/AdminService.html":{},"injectables/BlogsService.html":{},"controllers/MediaController.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":2797,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":2673,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":2630,"title":{},"body":{"dependencies.html":{}}}],["0.15.0",{"_index":2686,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":2651,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":2679,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2629,"title":{},"body":{"dependencies.html":{}}}],["0.8.2",{"_index":2588,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2547,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2554,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2550,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2555,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2559,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2558,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2542,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":2561,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2544,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2553,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2549,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2543,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2548,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2545,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2546,"title":{},"body":{"coverage.html":{}}}],["0242ac110002",{"_index":1039,"title":{},"body":{"controllers/MailController.html":{}}}],["1",{"_index":56,"title":{"classes/Media-1.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"guards/IsLoggin.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"injectables/TagService.html":{},"miscellaneous/variables.html":{}}}],["1.0.0",{"_index":2623,"title":{},"body":{"dependencies.html":{}}}],["1.0.10",{"_index":2605,"title":{},"body":{"dependencies.html":{}}}],["1.15.0",{"_index":2650,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":2647,"title":{},"body":{"dependencies.html":{}}}],["1.5.6",{"_index":2666,"title":{},"body":{"dependencies.html":{}}}],["1.6.0",{"_index":2625,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":390,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{}}}],["10.0.2",{"_index":2598,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":2600,"title":{},"body":{"dependencies.html":{}}}],["10.4.15",{"_index":2602,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":1023,"title":{},"body":{"injectables/JwtUtilsService.html":{},"injectables/PaymentService.html":{},"injectables/TimeUtilsService.html":{}}}],["1000).tofixed(0",{"_index":1025,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["11.1.0",{"_index":2682,"title":{},"body":{"dependencies.html":{}}}],["11.11.1",{"_index":2639,"title":{},"body":{"dependencies.html":{}}}],["11ef",{"_index":1037,"title":{},"body":{"controllers/MailController.html":{}}}],["12",{"_index":237,"title":{},"body":{"injectables/AdminService.html":{}}}],["18.1.5",{"_index":2655,"title":{},"body":{"dependencies.html":{}}}],["19.0.0",{"_index":2619,"title":{},"body":{"dependencies.html":{}}}],["19.0.4",{"_index":2574,"title":{},"body":{"dependencies.html":{}}}],["19.0.9",{"_index":2607,"title":{},"body":{"dependencies.html":{}}}],["19.2.0",{"_index":2572,"title":{},"body":{"dependencies.html":{}}}],["1].standard_id",{"_index":2028,"title":{},"body":{"injectables/RecordsService.html":{}}}],["1].week",{"_index":2027,"title":{},"body":{"injectables/RecordsService.html":{}}}],["1}/${remind_date.getfullyear",{"_index":2135,"title":{},"body":{"injectables/ReminderService.html":{}}}],["2.0.2",{"_index":2597,"title":{},"body":{"dependencies.html":{}}}],["2.0.3",{"_index":2670,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":2601,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":2643,"title":{},"body":{"dependencies.html":{}}}],["2.8.1",{"_index":2681,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":2631,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":2793,"title":{},"body":{"overview.html":{}}}],["200",{"_index":124,"title":{},"body":{"controllers/AdminController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":1653,"title":{},"body":{"controllers/PayosController.html":{},"controllers/RecordsController.html":{},"controllers/StandardController.html":{},"controllers/UsersController.html":{}}}],["22",{"_index":2794,"title":{},"body":{"overview.html":{}}}],["23",{"_index":2792,"title":{},"body":{"overview.html":{}}}],["24",{"_index":1021,"title":{},"body":{"injectables/JwtUtilsService.html":{},"injectables/PaymentService.html":{},"injectables/TimeUtilsService.html":{},"overview.html":{}}}],["27.0.0",{"_index":2659,"title":{},"body":{"dependencies.html":{}}}],["3.24.1",{"_index":2684,"title":{},"body":{"dependencies.html":{}}}],["3.5.0",{"_index":2646,"title":{},"body":{"dependencies.html":{}}}],["3.51.0",{"_index":2612,"title":{},"body":{"dependencies.html":{}}}],["3.741.0",{"_index":2585,"title":{},"body":{"dependencies.html":{}}}],["3600",{"_index":864,"title":{},"body":{"injectables/FileService.html":{}}}],["4",{"_index":2795,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":2599,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":2610,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":2615,"title":{},"body":{"dependencies.html":{}}}],["4.2.0",{"_index":2634,"title":{},"body":{"dependencies.html":{}}}],["4.21.2",{"_index":2635,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":2621,"title":{},"body":{"dependencies.html":{}}}],["4.4.8",{"_index":2627,"title":{},"body":{"dependencies.html":{}}}],["4.7.8",{"_index":2637,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2676,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":2327,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["400",{"_index":2086,"title":{},"body":{"controllers/ReminderController.html":{}}}],["401",{"_index":2073,"title":{},"body":{"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":2081,"title":{},"body":{"controllers/ReminderController.html":{}}}],["465",{"_index":1055,"title":{},"body":{"modules/MailModule.html":{}}}],["5][a",{"_index":2806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1085,"title":{},"body":{"injectables/MailService.html":{},"overview.html":{}}}],["6.1.0",{"_index":2608,"title":{},"body":{"dependencies.html":{}}}],["6.1.15",{"_index":2592,"title":{},"body":{"dependencies.html":{}}}],["6.1.16",{"_index":2590,"title":{},"body":{"dependencies.html":{}}}],["6.10.0",{"_index":2663,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1022,"title":{},"body":{"injectables/JwtUtilsService.html":{},"injectables/PaymentService.html":{},"injectables/TimeUtilsService.html":{}}}],["604800",{"_index":881,"title":{},"body":{"injectables/FileService.html":{}}}],["7",{"_index":2328,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["7.0.0",{"_index":2668,"title":{},"body":{"dependencies.html":{}}}],["7.0.1",{"_index":2661,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":2596,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":2675,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":2556,"title":{},"body":{"coverage.html":{}}}],["8.1.0",{"_index":2603,"title":{},"body":{"dependencies.html":{}}}],["8/11",{"_index":2557,"title":{},"body":{"coverage.html":{}}}],["89ab][a",{"_index":2808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9]/g",{"_index":1082,"title":{},"body":{"injectables/MailService.html":{}}}],["9d96",{"_index":1038,"title":{},"body":{"controllers/MailController.html":{}}}],["a.week)[0",{"_index":2000,"title":{},"body":{"injectables/RecordsService.html":{}}}],["a.week)[0].standard_id",{"_index":2031,"title":{},"body":{"injectables/RecordsService.html":{}}}],["access",{"_index":60,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["access(filepath",{"_index":868,"title":{},"body":{"injectables/FileService.html":{}}}],["accesskey",{"_index":796,"title":{},"body":{"injectables/FileService.html":{}}}],["accesskeyid",{"_index":806,"title":{},"body":{"injectables/FileService.html":{}}}],["accessors",{"_index":667,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["accesstokenauthguard",{"_index":1,"title":{"guards/AccessTokenAuthGuard.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"modules/AuthModule.html":{},"controllers/CommentsController.html":{},"guards/IsLoggin.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"guards/RoleAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["action",{"_index":1778,"title":{},"body":{"injectables/ReactionService.html":{}}}],["adapter",{"_index":1067,"title":{},"body":{"modules/MailModule.html":{},"dependencies.html":{}}}],["add",{"_index":2740,"title":{},"body":{"index.html":{}}}],["address",{"_index":1092,"title":{},"body":{"injectables/MailService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["adds",{"_index":1779,"title":{},"body":{"injectables/ReactionService.html":{}}}],["admin.controller",{"_index":147,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":117,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["admincontroller",{"_index":105,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":127,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminservice",{"_index":116,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["against",{"_index":1867,"title":{},"body":{"injectables/RecordsService.html":{}}}],["algorithm",{"_index":1010,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["already",{"_index":1607,"title":{},"body":{"injectables/PaymentService.html":{},"controllers/UsersController.html":{}}}],["alternatively",{"_index":2762,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1620,"title":{},"body":{"injectables/PaymentService.html":{}}}],["angular",{"_index":2616,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["angular/animations",{"_index":2571,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":2573,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2575,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":2576,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2577,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":2578,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":2579,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":2581,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":2584,"title":{},"body":{"dependencies.html":{}}}],["animate",{"_index":2587,"title":{},"body":{"dependencies.html":{}}}],["any)[relatedpropertyname",{"_index":1124,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["apexcharts",{"_index":2620,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":330,"title":{},"body":{"injectables/AppService.html":{},"dependencies.html":{}}}],["app",{"_index":2168,"title":{},"body":{"classes/SocketIoAdapter.html":{},"index.html":{}}}],["app.controller",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":274,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app/mail/templates",{"_index":1066,"title":{},"body":{"modules/MailModule.html":{}}}],["app/src/app/admin/admin.controller.ts",{"_index":107,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["app/src/app/admin/admin.controller.ts:11",{"_index":111,"title":{},"body":{"controllers/AdminController.html":{}}}],["app/src/app/admin/admin.module.ts",{"_index":143,"title":{},"body":{"modules/AdminModule.html":{}}}],["app/src/app/admin/admin.service.ts",{"_index":149,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["app/src/app/admin/admin.service.ts:103",{"_index":161,"title":{},"body":{"injectables/AdminService.html":{}}}],["app/src/app/admin/admin.service.ts:13",{"_index":157,"title":{},"body":{"injectables/AdminService.html":{}}}],["app/src/app/admin/admin.service.ts:137",{"_index":160,"title":{},"body":{"injectables/AdminService.html":{}}}],["app/src/app/admin/admin.service.ts:24",{"_index":159,"title":{},"body":{"injectables/AdminService.html":{}}}],["app/src/app/admin/admin.service.ts:7",{"_index":156,"title":{},"body":{"injectables/AdminService.html":{}}}],["app/src/app/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["app/src/app/app.controller.ts:9",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["app/src/app/app.module.ts",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["app/src/app/app.service.ts",{"_index":324,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["app/src/app/app.service.ts:5",{"_index":325,"title":{},"body":{"injectables/AppService.html":{}}}],["app/src/app/auth/auth.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"coverage.html":{}}}],["app/src/app/auth/auth.guard.ts:10",{"_index":17,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{}}}],["app/src/app/auth/auth.guard.ts:104",{"_index":2159,"title":{},"body":{"guards/RoleAuthGuard.html":{}}}],["app/src/app/auth/auth.guard.ts:134",{"_index":981,"title":{},"body":{"guards/IsLoggin.html":{}}}],["app/src/app/auth/auth.guard.ts:140",{"_index":982,"title":{},"body":{"guards/IsLoggin.html":{}}}],["app/src/app/auth/auth.guard.ts:16",{"_index":25,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{}}}],["app/src/app/auth/auth.guard.ts:64",{"_index":2032,"title":{},"body":{"guards/RefreshTokenAuthGuard.html":{}}}],["app/src/app/auth/auth.guard.ts:70",{"_index":2033,"title":{},"body":{"guards/RefreshTokenAuthGuard.html":{}}}],["app/src/app/auth/auth.guard.ts:97",{"_index":2158,"title":{},"body":{"guards/RoleAuthGuard.html":{}}}],["app/src/app/auth/auth.module.ts",{"_index":335,"title":{},"body":{"modules/AuthModule.html":{}}}],["app/src/app/blogs/blogs.controller.ts",{"_index":342,"title":{},"body":{"controllers/BlogsController.html":{},"coverage.html":{}}}],["app/src/app/blogs/blogs.controller.ts:11",{"_index":353,"title":{},"body":{"controllers/BlogsController.html":{}}}],["app/src/app/blogs/blogs.controller.ts:19",{"_index":362,"title":{},"body":{"controllers/BlogsController.html":{}}}],["app/src/app/blogs/blogs.controller.ts:30",{"_index":366,"title":{},"body":{"controllers/BlogsController.html":{}}}],["app/src/app/blogs/blogs.controller.ts:40",{"_index":370,"title":{},"body":{"controllers/BlogsController.html":{}}}],["app/src/app/blogs/blogs.controller.ts:50",{"_index":374,"title":{},"body":{"controllers/BlogsController.html":{}}}],["app/src/app/blogs/blogs.controller.ts:58",{"_index":378,"title":{},"body":{"controllers/BlogsController.html":{}}}],["app/src/app/blogs/blogs.controller.ts:66",{"_index":357,"title":{},"body":{"controllers/BlogsController.html":{}}}],["app/src/app/blogs/blogs.module.ts",{"_index":406,"title":{},"body":{"modules/BlogsModule.html":{}}}],["app/src/app/blogs/blogs.service.ts",{"_index":408,"title":{},"body":{"injectables/BlogsService.html":{},"coverage.html":{}}}],["app/src/app/blogs/blogs.service.ts:103",{"_index":423,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/blogs.service.ts:146",{"_index":426,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/blogs.service.ts:202",{"_index":428,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/blogs.service.ts:237",{"_index":432,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/blogs.service.ts:289",{"_index":430,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/blogs.service.ts:6",{"_index":416,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/blogs.service.ts:63",{"_index":421,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/blogs.service.ts:9",{"_index":418,"title":{},"body":{"injectables/BlogsService.html":{}}}],["app/src/app/blogs/entities/blog.entity.ts",{"_index":340,"title":{},"body":{"classes/Blog.html":{},"coverage.html":{}}}],["app/src/app/categorys/categorys.controller.ts",{"_index":526,"title":{},"body":{"controllers/CategorysController.html":{},"coverage.html":{}}}],["app/src/app/categorys/categorys.controller.ts:11",{"_index":530,"title":{},"body":{"controllers/CategorysController.html":{}}}],["app/src/app/categorys/categorys.controller.ts:19",{"_index":535,"title":{},"body":{"controllers/CategorysController.html":{}}}],["app/src/app/categorys/categorys.controller.ts:27",{"_index":537,"title":{},"body":{"controllers/CategorysController.html":{}}}],["app/src/app/categorys/categorys.controller.ts:35",{"_index":541,"title":{},"body":{"controllers/CategorysController.html":{}}}],["app/src/app/categorys/categorys.controller.ts:43",{"_index":533,"title":{},"body":{"controllers/CategorysController.html":{}}}],["app/src/app/categorys/categorys.module.ts",{"_index":553,"title":{},"body":{"modules/CategorysModule.html":{}}}],["app/src/app/categorys/categorys.service.ts",{"_index":555,"title":{},"body":{"injectables/CategorysService.html":{},"coverage.html":{}}}],["app/src/app/categorys/categorys.service.ts:18",{"_index":559,"title":{},"body":{"injectables/CategorysService.html":{}}}],["app/src/app/categorys/categorys.service.ts:22",{"_index":560,"title":{},"body":{"injectables/CategorysService.html":{}}}],["app/src/app/categorys/categorys.service.ts:34",{"_index":563,"title":{},"body":{"injectables/CategorysService.html":{}}}],["app/src/app/categorys/categorys.service.ts:47",{"_index":561,"title":{},"body":{"injectables/CategorysService.html":{}}}],["app/src/app/categorys/categorys.service.ts:6",{"_index":556,"title":{},"body":{"injectables/CategorysService.html":{}}}],["app/src/app/categorys/categorys.service.ts:9",{"_index":558,"title":{},"body":{"injectables/CategorysService.html":{}}}],["app/src/app/categorys/entities/category.entity.ts",{"_index":512,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["app/src/app/categorys/entities/category.entity.ts:4",{"_index":517,"title":{},"body":{"classes/Category.html":{}}}],["app/src/app/categorys/entities/category.entity.ts:5",{"_index":518,"title":{},"body":{"classes/Category.html":{}}}],["app/src/app/categorys/entities/category.entity.ts:6",{"_index":516,"title":{},"body":{"classes/Category.html":{}}}],["app/src/app/comments/comments.controller.ts",{"_index":573,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["app/src/app/comments/comments.controller.ts:14",{"_index":578,"title":{},"body":{"controllers/CommentsController.html":{}}}],["app/src/app/comments/comments.controller.ts:27",{"_index":584,"title":{},"body":{"controllers/CommentsController.html":{}}}],["app/src/app/comments/comments.controller.ts:35",{"_index":589,"title":{},"body":{"controllers/CommentsController.html":{}}}],["app/src/app/comments/comments.controller.ts:43",{"_index":581,"title":{},"body":{"controllers/CommentsController.html":{}}}],["app/src/app/comments/comments.module.ts",{"_index":612,"title":{},"body":{"modules/CommentsModule.html":{}}}],["app/src/app/comments/comments.service.ts",{"_index":614,"title":{},"body":{"injectables/CommentsService.html":{},"coverage.html":{}}}],["app/src/app/comments/comments.service.ts:15",{"_index":625,"title":{},"body":{"injectables/CommentsService.html":{}}}],["app/src/app/comments/comments.service.ts:37",{"_index":630,"title":{},"body":{"injectables/CommentsService.html":{}}}],["app/src/app/comments/comments.service.ts:46",{"_index":632,"title":{},"body":{"injectables/CommentsService.html":{}}}],["app/src/app/comments/comments.service.ts:67",{"_index":627,"title":{},"body":{"injectables/CommentsService.html":{}}}],["app/src/app/comments/comments.service.ts:8",{"_index":622,"title":{},"body":{"injectables/CommentsService.html":{}}}],["app/src/app/database/database.service.ts",{"_index":665,"title":{},"body":{"injectables/DatabaseService.html":{},"coverage.html":{}}}],["app/src/app/database/database.service.ts:12",{"_index":684,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:16",{"_index":686,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:20",{"_index":688,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:24",{"_index":690,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:28",{"_index":692,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:32",{"_index":694,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:36",{"_index":696,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:40",{"_index":698,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:44",{"_index":700,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:48",{"_index":702,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:52",{"_index":704,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:56",{"_index":706,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:6",{"_index":680,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:60",{"_index":708,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:64",{"_index":710,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:68",{"_index":712,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:72",{"_index":714,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:76",{"_index":716,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/database/database.service.ts:8",{"_index":682,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["app/src/app/file/file.module.ts",{"_index":739,"title":{},"body":{"modules/FileModule.html":{}}}],["app/src/app/file/file.service.ts",{"_index":741,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app/src/app/file/file.service.ts:113",{"_index":754,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:129",{"_index":768,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:14",{"_index":769,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:144",{"_index":757,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:15",{"_index":752,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:157",{"_index":761,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:36",{"_index":764,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:54",{"_index":767,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/file/file.service.ts:72",{"_index":759,"title":{},"body":{"injectables/FileService.html":{}}}],["app/src/app/hosiptal/entities/hosiptal.entity.ts",{"_index":951,"title":{},"body":{"classes/HospitalEntity.html":{},"coverage.html":{}}}],["app/src/app/hosiptal/entities/hosiptal.entity.ts:10",{"_index":953,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["app/src/app/hosiptal/entities/hosiptal.entity.ts:8",{"_index":956,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["app/src/app/hosiptal/entities/hosiptal.entity.ts:9",{"_index":955,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["app/src/app/hosiptal/hospital.controller.ts",{"_index":919,"title":{},"body":{"controllers/HospitalController.html":{},"coverage.html":{}}}],["app/src/app/hosiptal/hospital.controller.ts:11",{"_index":929,"title":{},"body":{"controllers/HospitalController.html":{}}}],["app/src/app/hosiptal/hospital.controller.ts:19",{"_index":932,"title":{},"body":{"controllers/HospitalController.html":{}}}],["app/src/app/hosiptal/hospital.controller.ts:30",{"_index":927,"title":{},"body":{"controllers/HospitalController.html":{}}}],["app/src/app/hosiptal/hospital.controller.ts:38",{"_index":936,"title":{},"body":{"controllers/HospitalController.html":{}}}],["app/src/app/hosiptal/hospital.module.ts",{"_index":965,"title":{},"body":{"modules/HospitalModule.html":{}}}],["app/src/app/hosiptal/hospital.service.ts",{"_index":967,"title":{},"body":{"injectables/HospitalService.html":{},"coverage.html":{}}}],["app/src/app/hosiptal/hospital.service.ts:13",{"_index":972,"title":{},"body":{"injectables/HospitalService.html":{}}}],["app/src/app/hosiptal/hospital.service.ts:25",{"_index":970,"title":{},"body":{"injectables/HospitalService.html":{}}}],["app/src/app/hosiptal/hospital.service.ts:31",{"_index":974,"title":{},"body":{"injectables/HospitalService.html":{}}}],["app/src/app/hosiptal/hospital.service.ts:6",{"_index":968,"title":{},"body":{"injectables/HospitalService.html":{}}}],["app/src/app/hosiptal/hospital.service.ts:9",{"_index":971,"title":{},"body":{"injectables/HospitalService.html":{}}}],["app/src/app/mail/mail.controller.ts",{"_index":1028,"title":{},"body":{"controllers/MailController.html":{},"coverage.html":{}}}],["app/src/app/mail/mail.module.ts",{"_index":1043,"title":{},"body":{"modules/MailModule.html":{}}}],["app/src/app/mail/mail.service.ts",{"_index":1070,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["app/src/app/mail/mail.service.ts:10",{"_index":1077,"title":{},"body":{"injectables/MailService.html":{}}}],["app/src/app/mail/mail.service.ts:7",{"_index":1074,"title":{},"body":{"injectables/MailService.html":{}}}],["app/src/app/media/entities/media.entity.ts",{"_index":1125,"title":{},"body":{"classes/Media.html":{},"coverage.html":{}}}],["app/src/app/media/media.controller.ts",{"_index":1132,"title":{},"body":{"controllers/MediaController.html":{},"coverage.html":{}}}],["app/src/app/media/media.controller.ts:117",{"_index":1146,"title":{},"body":{"controllers/MediaController.html":{}}}],["app/src/app/media/media.controller.ts:15",{"_index":1149,"title":{},"body":{"controllers/MediaController.html":{}}}],["app/src/app/media/media.controller.ts:265",{"_index":1139,"title":{},"body":{"controllers/MediaController.html":{}}}],["app/src/app/media/media.controller.ts:303",{"_index":1142,"title":{},"body":{"controllers/MediaController.html":{}}}],["app/src/app/media/media.module.ts",{"_index":1232,"title":{},"body":{"modules/MediaModule.html":{}}}],["app/src/app/media/media.service.ts",{"_index":1243,"title":{},"body":{"injectables/MediaService.html":{},"coverage.html":{}}}],["app/src/app/media/media.service.ts:101",{"_index":1254,"title":{},"body":{"injectables/MediaService.html":{}}}],["app/src/app/media/media.service.ts:13",{"_index":1256,"title":{},"body":{"injectables/MediaService.html":{}}}],["app/src/app/media/media.service.ts:35",{"_index":1249,"title":{},"body":{"injectables/MediaService.html":{}}}],["app/src/app/media/media.service.ts:57",{"_index":1251,"title":{},"body":{"injectables/MediaService.html":{}}}],["app/src/app/media/media.service.ts:7",{"_index":1247,"title":{},"body":{"injectables/MediaService.html":{}}}],["app/src/app/media/media.service.ts:79",{"_index":1252,"title":{},"body":{"injectables/MediaService.html":{}}}],["app/src/app/media/media.service.ts:83",{"_index":1253,"title":{},"body":{"injectables/MediaService.html":{}}}],["app/src/app/memberships/memberships.controller.ts",{"_index":1277,"title":{},"body":{"controllers/MembershipsController.html":{},"coverage.html":{}}}],["app/src/app/memberships/memberships.controller.ts:11",{"_index":1286,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["app/src/app/memberships/memberships.controller.ts:19",{"_index":1291,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["app/src/app/memberships/memberships.controller.ts:27",{"_index":1294,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["app/src/app/memberships/memberships.controller.ts:35",{"_index":1298,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["app/src/app/memberships/memberships.controller.ts:43",{"_index":1289,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["app/src/app/memberships/memberships.module.ts",{"_index":1315,"title":{},"body":{"modules/MembershipsModule.html":{}}}],["app/src/app/memberships/memberships.service.ts",{"_index":1317,"title":{},"body":{"injectables/MembershipsService.html":{},"coverage.html":{}}}],["app/src/app/memberships/memberships.service.ts:23",{"_index":1322,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["app/src/app/memberships/memberships.service.ts:27",{"_index":1323,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["app/src/app/memberships/memberships.service.ts:39",{"_index":1326,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["app/src/app/memberships/memberships.service.ts:50",{"_index":1324,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["app/src/app/memberships/memberships.service.ts:6",{"_index":1318,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["app/src/app/memberships/memberships.service.ts:9",{"_index":1320,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["app/src/app/metric/entities/metric.entity.ts",{"_index":1345,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"coverage.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:15",{"_index":1353,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:16",{"_index":1358,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:17",{"_index":1355,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:18",{"_index":1357,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:19",{"_index":1356,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:20",{"_index":1359,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:21",{"_index":1354,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/entities/metric.entity.ts:22",{"_index":1352,"title":{},"body":{"classes/Metric.html":{}}}],["app/src/app/metric/metric.controller.ts",{"_index":1375,"title":{},"body":{"controllers/MetricController.html":{},"coverage.html":{}}}],["app/src/app/metric/metric.controller.ts:11",{"_index":1379,"title":{},"body":{"controllers/MetricController.html":{}}}],["app/src/app/metric/metric.controller.ts:19",{"_index":1384,"title":{},"body":{"controllers/MetricController.html":{}}}],["app/src/app/metric/metric.controller.ts:27",{"_index":1386,"title":{},"body":{"controllers/MetricController.html":{}}}],["app/src/app/metric/metric.controller.ts:35",{"_index":1390,"title":{},"body":{"controllers/MetricController.html":{}}}],["app/src/app/metric/metric.controller.ts:43",{"_index":1382,"title":{},"body":{"controllers/MetricController.html":{}}}],["app/src/app/metric/metric.module.ts",{"_index":1404,"title":{},"body":{"modules/MetricModule.html":{}}}],["app/src/app/metric/metric.service.ts",{"_index":1406,"title":{},"body":{"injectables/MetricService.html":{},"coverage.html":{}}}],["app/src/app/metric/metric.service.ts:115",{"_index":1415,"title":{},"body":{"injectables/MetricService.html":{}}}],["app/src/app/metric/metric.service.ts:131",{"_index":1418,"title":{},"body":{"injectables/MetricService.html":{}}}],["app/src/app/metric/metric.service.ts:14",{"_index":1411,"title":{},"body":{"injectables/MetricService.html":{}}}],["app/src/app/metric/metric.service.ts:166",{"_index":1416,"title":{},"body":{"injectables/MetricService.html":{}}}],["app/src/app/metric/metric.service.ts:181",{"_index":1414,"title":{},"body":{"injectables/MetricService.html":{}}}],["app/src/app/metric/metric.service.ts:7",{"_index":1409,"title":{},"body":{"injectables/MetricService.html":{}}}],["app/src/app/metric/metric.service.ts:70",{"_index":1412,"title":{},"body":{"injectables/MetricService.html":{}}}],["app/src/app/note/note.controller.ts",{"_index":1467,"title":{},"body":{"controllers/NoteController.html":{},"coverage.html":{}}}],["app/src/app/note/note.controller.ts:15",{"_index":1471,"title":{},"body":{"controllers/NoteController.html":{}}}],["app/src/app/note/note.controller.ts:35",{"_index":1476,"title":{},"body":{"controllers/NoteController.html":{}}}],["app/src/app/note/note.controller.ts:48",{"_index":1478,"title":{},"body":{"controllers/NoteController.html":{}}}],["app/src/app/note/note.controller.ts:60",{"_index":1482,"title":{},"body":{"controllers/NoteController.html":{}}}],["app/src/app/note/note.controller.ts:71",{"_index":1473,"title":{},"body":{"controllers/NoteController.html":{}}}],["app/src/app/note/note.module.ts",{"_index":1505,"title":{},"body":{"modules/NoteModule.html":{}}}],["app/src/app/note/note.service.ts",{"_index":1507,"title":{},"body":{"injectables/NoteService.html":{},"coverage.html":{}}}],["app/src/app/note/note.service.ts:101",{"_index":1517,"title":{},"body":{"injectables/NoteService.html":{}}}],["app/src/app/note/note.service.ts:36",{"_index":1519,"title":{},"body":{"injectables/NoteService.html":{}}}],["app/src/app/note/note.service.ts:44",{"_index":1521,"title":{},"body":{"injectables/NoteService.html":{}}}],["app/src/app/note/note.service.ts:58",{"_index":1524,"title":{},"body":{"injectables/NoteService.html":{}}}],["app/src/app/note/note.service.ts:6",{"_index":1513,"title":{},"body":{"injectables/NoteService.html":{}}}],["app/src/app/note/note.service.ts:9",{"_index":1515,"title":{},"body":{"injectables/NoteService.html":{}}}],["app/src/app/payment/payment.controller.ts",{"_index":1552,"title":{},"body":{"controllers/PaymentController.html":{},"coverage.html":{}}}],["app/src/app/payment/payment.controller.ts:14",{"_index":1559,"title":{},"body":{"controllers/PaymentController.html":{}}}],["app/src/app/payment/payment.controller.ts:27",{"_index":1566,"title":{},"body":{"controllers/PaymentController.html":{}}}],["app/src/app/payment/payment.controller.ts:35",{"_index":1562,"title":{},"body":{"controllers/PaymentController.html":{}}}],["app/src/app/payment/payment.module.ts",{"_index":1580,"title":{},"body":{"modules/PaymentModule.html":{}}}],["app/src/app/payment/payment.service.ts",{"_index":1582,"title":{},"body":{"injectables/PaymentService.html":{},"coverage.html":{}}}],["app/src/app/payment/payment.service.ts:17",{"_index":1589,"title":{},"body":{"injectables/PaymentService.html":{}}}],["app/src/app/payment/payment.service.ts:25",{"_index":1591,"title":{},"body":{"injectables/PaymentService.html":{}}}],["app/src/app/payment/payment.service.ts:72",{"_index":1594,"title":{},"body":{"injectables/PaymentService.html":{}}}],["app/src/app/payment/payment.service.ts:94",{"_index":1592,"title":{},"body":{"injectables/PaymentService.html":{}}}],["app/src/app/payos/payos.controller.ts",{"_index":1643,"title":{},"body":{"controllers/PayosController.html":{},"coverage.html":{}}}],["app/src/app/payos/payos.module.ts",{"_index":1657,"title":{},"body":{"modules/PayosModule.html":{}}}],["app/src/app/payos/payos.service.ts",{"_index":1659,"title":{},"body":{"injectables/PayosService.html":{},"coverage.html":{}}}],["app/src/app/payos/payos.service.ts:7",{"_index":1661,"title":{},"body":{"injectables/PayosService.html":{}}}],["app/src/app/payos/payos.service.ts:9",{"_index":1663,"title":{},"body":{"injectables/PayosService.html":{}}}],["app/src/app/posts/posts.controller.ts",{"_index":1677,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["app/src/app/posts/posts.controller.ts:14",{"_index":1681,"title":{},"body":{"controllers/PostsController.html":{}}}],["app/src/app/posts/posts.controller.ts:30",{"_index":1686,"title":{},"body":{"controllers/PostsController.html":{}}}],["app/src/app/posts/posts.controller.ts:47",{"_index":1688,"title":{},"body":{"controllers/PostsController.html":{}}}],["app/src/app/posts/posts.controller.ts:58",{"_index":1692,"title":{},"body":{"controllers/PostsController.html":{}}}],["app/src/app/posts/posts.controller.ts:69",{"_index":1684,"title":{},"body":{"controllers/PostsController.html":{}}}],["app/src/app/posts/posts.module.ts",{"_index":1710,"title":{},"body":{"modules/PostsModule.html":{}}}],["app/src/app/posts/posts.service.ts",{"_index":1712,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["app/src/app/posts/posts.service.ts:13",{"_index":1715,"title":{},"body":{"injectables/PostsService.html":{}}}],["app/src/app/posts/posts.service.ts:28",{"_index":1716,"title":{},"body":{"injectables/PostsService.html":{}}}],["app/src/app/posts/posts.service.ts:38",{"_index":1717,"title":{},"body":{"injectables/PostsService.html":{}}}],["app/src/app/posts/posts.service.ts:51",{"_index":1720,"title":{},"body":{"injectables/PostsService.html":{}}}],["app/src/app/posts/posts.service.ts:66",{"_index":1718,"title":{},"body":{"injectables/PostsService.html":{}}}],["app/src/app/posts/posts.service.ts:7",{"_index":1713,"title":{},"body":{"injectables/PostsService.html":{}}}],["app/src/app/reaction/dto/create",{"_index":650,"title":{},"body":{"classes/CreateReactionDto.html":{},"coverage.html":{}}}],["app/src/app/reaction/dto/update",{"_index":2349,"title":{},"body":{"classes/UpdateReactionDto.html":{},"coverage.html":{}}}],["app/src/app/reaction/entities/reaction.entity.ts",{"_index":1739,"title":{},"body":{"classes/Reaction.html":{},"coverage.html":{}}}],["app/src/app/reaction/reaction.controller.ts",{"_index":1741,"title":{},"body":{"controllers/ReactionController.html":{},"coverage.html":{}}}],["app/src/app/reaction/reaction.controller.ts:11",{"_index":1743,"title":{},"body":{"controllers/ReactionController.html":{}}}],["app/src/app/reaction/reaction.controller.ts:16",{"_index":1744,"title":{},"body":{"controllers/ReactionController.html":{}}}],["app/src/app/reaction/reaction.controller.ts:21",{"_index":1746,"title":{},"body":{"controllers/ReactionController.html":{}}}],["app/src/app/reaction/reaction.controller.ts:26",{"_index":1752,"title":{},"body":{"controllers/ReactionController.html":{}}}],["app/src/app/reaction/reaction.controller.ts:31",{"_index":1748,"title":{},"body":{"controllers/ReactionController.html":{}}}],["app/src/app/reaction/reaction.module.ts",{"_index":1770,"title":{},"body":{"modules/ReactionModule.html":{}}}],["app/src/app/reaction/reaction.service.ts",{"_index":1772,"title":{},"body":{"injectables/ReactionService.html":{},"coverage.html":{}}}],["app/src/app/reaction/reaction.service.ts:11",{"_index":1774,"title":{},"body":{"injectables/ReactionService.html":{}}}],["app/src/app/reaction/reaction.service.ts:15",{"_index":1775,"title":{},"body":{"injectables/ReactionService.html":{}}}],["app/src/app/reaction/reaction.service.ts:19",{"_index":1777,"title":{},"body":{"injectables/ReactionService.html":{}}}],["app/src/app/reaction/reaction.service.ts:23",{"_index":1776,"title":{},"body":{"injectables/ReactionService.html":{}}}],["app/src/app/reaction/reaction.service.ts:7",{"_index":1773,"title":{},"body":{"injectables/ReactionService.html":{}}}],["app/src/app/records/entities/record.entity.ts",{"_index":898,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{}}}],["app/src/app/records/entities/record.entity.ts:12",{"_index":2536,"title":{},"body":{"classes/VisitRecordMetric.html":{}}}],["app/src/app/records/entities/record.entity.ts:13",{"_index":2531,"title":{},"body":{"classes/VisitRecordMetric.html":{}}}],["app/src/app/records/entities/record.entity.ts:14",{"_index":2535,"title":{},"body":{"classes/VisitRecordMetric.html":{}}}],["app/src/app/records/entities/record.entity.ts:15",{"_index":2532,"title":{},"body":{"classes/VisitRecordMetric.html":{}}}],["app/src/app/records/entities/record.entity.ts:16",{"_index":2534,"title":{},"body":{"classes/VisitRecordMetric.html":{}}}],["app/src/app/records/entities/record.entity.ts:17",{"_index":2537,"title":{},"body":{"classes/VisitRecordMetric.html":{}}}],["app/src/app/records/entities/record.entity.ts:18",{"_index":2533,"title":{},"body":{"classes/VisitRecordMetric.html":{}}}],["app/src/app/records/entities/record.entity.ts:2",{"_index":2518,"title":{},"body":{"classes/VisitRecord.html":{}}}],["app/src/app/records/entities/record.entity.ts:22",{"_index":1130,"title":{},"body":{"classes/Media-1.html":{}}}],["app/src/app/records/entities/record.entity.ts:23",{"_index":1126,"title":{},"body":{"classes/Media-1.html":{}}}],["app/src/app/records/entities/record.entity.ts:24",{"_index":1127,"title":{},"body":{"classes/Media-1.html":{}}}],["app/src/app/records/entities/record.entity.ts:25",{"_index":1128,"title":{},"body":{"classes/Media-1.html":{}}}],["app/src/app/records/entities/record.entity.ts:26",{"_index":1129,"title":{},"body":{"classes/Media-1.html":{}}}],["app/src/app/records/entities/record.entity.ts:3",{"_index":2515,"title":{},"body":{"classes/VisitRecord.html":{}}}],["app/src/app/records/entities/record.entity.ts:30",{"_index":902,"title":{},"body":{"classes/Hospital.html":{}}}],["app/src/app/records/entities/record.entity.ts:31",{"_index":903,"title":{},"body":{"classes/Hospital.html":{}}}],["app/src/app/records/entities/record.entity.ts:32",{"_index":901,"title":{},"body":{"classes/Hospital.html":{}}}],["app/src/app/records/entities/record.entity.ts:36",{"_index":2520,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["app/src/app/records/entities/record.entity.ts:37",{"_index":2519,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["app/src/app/records/entities/record.entity.ts:38",{"_index":2521,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["app/src/app/records/entities/record.entity.ts:39",{"_index":2522,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["app/src/app/records/entities/record.entity.ts:4",{"_index":2517,"title":{},"body":{"classes/VisitRecord.html":{}}}],["app/src/app/records/entities/record.entity.ts:5",{"_index":2513,"title":{},"body":{"classes/VisitRecord.html":{}}}],["app/src/app/records/entities/record.entity.ts:6",{"_index":2514,"title":{},"body":{"classes/VisitRecord.html":{}}}],["app/src/app/records/entities/record.entity.ts:7",{"_index":2512,"title":{},"body":{"classes/VisitRecord.html":{}}}],["app/src/app/records/entities/record.entity.ts:8",{"_index":2516,"title":{},"body":{"classes/VisitRecord.html":{}}}],["app/src/app/records/records.controller.ts",{"_index":1783,"title":{},"body":{"controllers/RecordsController.html":{},"coverage.html":{}}}],["app/src/app/records/records.controller.ts:15",{"_index":1792,"title":{},"body":{"controllers/RecordsController.html":{}}}],["app/src/app/records/records.controller.ts:28",{"_index":1801,"title":{},"body":{"controllers/RecordsController.html":{}}}],["app/src/app/records/records.controller.ts:43",{"_index":1805,"title":{},"body":{"controllers/RecordsController.html":{}}}],["app/src/app/records/records.controller.ts:54",{"_index":1795,"title":{},"body":{"controllers/RecordsController.html":{}}}],["app/src/app/records/records.controller.ts:65",{"_index":1798,"title":{},"body":{"controllers/RecordsController.html":{}}}],["app/src/app/records/records.module.ts",{"_index":1829,"title":{},"body":{"modules/RecordsModule.html":{}}}],["app/src/app/records/records.service.ts",{"_index":1833,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{}}}],["app/src/app/records/records.service.ts:12",{"_index":1845,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:122",{"_index":1861,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:164",{"_index":1869,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:228",{"_index":1850,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:285",{"_index":1859,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:32",{"_index":1847,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:322",{"_index":1855,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:372",{"_index":1865,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:441",{"_index":1875,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/records/records.service.ts:508",{"_index":1863,"title":{},"body":{"injectables/RecordsService.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts",{"_index":2034,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"coverage.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts:14",{"_index":2094,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts:15",{"_index":2096,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts:16",{"_index":2097,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts:17",{"_index":2093,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts:18",{"_index":2095,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts:19",{"_index":2098,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["app/src/app/reminder/entities/reminder.entity.ts:20",{"_index":2091,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["app/src/app/reminder/reminder.controller.ts",{"_index":2051,"title":{},"body":{"controllers/ReminderController.html":{},"coverage.html":{}}}],["app/src/app/reminder/reminder.controller.ts:14",{"_index":2057,"title":{},"body":{"controllers/ReminderController.html":{}}}],["app/src/app/reminder/reminder.controller.ts:28",{"_index":2062,"title":{},"body":{"controllers/ReminderController.html":{}}}],["app/src/app/reminder/reminder.controller.ts:36",{"_index":2065,"title":{},"body":{"controllers/ReminderController.html":{}}}],["app/src/app/reminder/reminder.controller.ts:47",{"_index":2069,"title":{},"body":{"controllers/ReminderController.html":{}}}],["app/src/app/reminder/reminder.controller.ts:62",{"_index":2060,"title":{},"body":{"controllers/ReminderController.html":{}}}],["app/src/app/reminder/reminder.module.ts",{"_index":2103,"title":{},"body":{"modules/ReminderModule.html":{}}}],["app/src/app/reminder/reminder.service.ts",{"_index":2105,"title":{},"body":{"injectables/ReminderService.html":{},"coverage.html":{}}}],["app/src/app/reminder/reminder.service.ts:119",{"_index":2117,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/reminder/reminder.service.ts:13",{"_index":2112,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/reminder/reminder.service.ts:132",{"_index":2115,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/reminder/reminder.service.ts:48",{"_index":2109,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/reminder/reminder.service.ts:68",{"_index":2113,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/reminder/reminder.service.ts:7",{"_index":2107,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/reminder/reminder.service.ts:72",{"_index":2114,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/reminder/reminder.service.ts:84",{"_index":2120,"title":{},"body":{"injectables/ReminderService.html":{}}}],["app/src/app/standard/dto/create",{"_index":653,"title":{},"body":{"classes/CreateStandardDto.html":{},"coverage.html":{}}}],["app/src/app/standard/dto/update",{"_index":2353,"title":{},"body":{"classes/UpdateStandardDto.html":{},"coverage.html":{}}}],["app/src/app/standard/entities/standard.entity.ts",{"_index":2182,"title":{},"body":{"classes/Standard.html":{},"coverage.html":{}}}],["app/src/app/standard/entities/standard.entity.ts:2",{"_index":2183,"title":{},"body":{"classes/Standard.html":{}}}],["app/src/app/standard/entities/standard.entity.ts:3",{"_index":2185,"title":{},"body":{"classes/Standard.html":{}}}],["app/src/app/standard/entities/standard.entity.ts:4",{"_index":2187,"title":{},"body":{"classes/Standard.html":{}}}],["app/src/app/standard/entities/standard.entity.ts:5",{"_index":2186,"title":{},"body":{"classes/Standard.html":{}}}],["app/src/app/standard/entities/standard.entity.ts:6",{"_index":2184,"title":{},"body":{"classes/Standard.html":{}}}],["app/src/app/standard/entities/standard.entity.ts:7",{"_index":2188,"title":{},"body":{"classes/Standard.html":{}}}],["app/src/app/standard/standard.controller.ts",{"_index":2190,"title":{},"body":{"controllers/StandardController.html":{},"coverage.html":{}}}],["app/src/app/standard/standard.controller.ts:11",{"_index":2195,"title":{},"body":{"controllers/StandardController.html":{}}}],["app/src/app/standard/standard.controller.ts:22",{"_index":2201,"title":{},"body":{"controllers/StandardController.html":{}}}],["app/src/app/standard/standard.controller.ts:33",{"_index":2205,"title":{},"body":{"controllers/StandardController.html":{}}}],["app/src/app/standard/standard.controller.ts:44",{"_index":2198,"title":{},"body":{"controllers/StandardController.html":{}}}],["app/src/app/standard/standard.module.ts",{"_index":2218,"title":{},"body":{"modules/StandardModule.html":{}}}],["app/src/app/standard/standard.service.ts",{"_index":2220,"title":{},"body":{"injectables/StandardService.html":{},"coverage.html":{}}}],["app/src/app/standard/standard.service.ts:13",{"_index":2224,"title":{},"body":{"injectables/StandardService.html":{}}}],["app/src/app/standard/standard.service.ts:35",{"_index":2225,"title":{},"body":{"injectables/StandardService.html":{}}}],["app/src/app/standard/standard.service.ts:39",{"_index":2226,"title":{},"body":{"injectables/StandardService.html":{}}}],["app/src/app/standard/standard.service.ts:47",{"_index":2228,"title":{},"body":{"injectables/StandardService.html":{}}}],["app/src/app/standard/standard.service.ts:66",{"_index":2231,"title":{},"body":{"injectables/StandardService.html":{}}}],["app/src/app/standard/standard.service.ts:7",{"_index":2222,"title":{},"body":{"injectables/StandardService.html":{}}}],["app/src/app/standard/standard.service.ts:80",{"_index":2229,"title":{},"body":{"injectables/StandardService.html":{}}}],["app/src/app/tags/entities/tag.entity.ts",{"_index":2249,"title":{},"body":{"classes/Tag.html":{},"coverage.html":{}}}],["app/src/app/tags/tag.controller.ts",{"_index":2251,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["app/src/app/tags/tag.controller.ts:11",{"_index":2256,"title":{},"body":{"controllers/TagController.html":{}}}],["app/src/app/tags/tag.controller.ts:19",{"_index":2261,"title":{},"body":{"controllers/TagController.html":{}}}],["app/src/app/tags/tag.controller.ts:27",{"_index":2263,"title":{},"body":{"controllers/TagController.html":{}}}],["app/src/app/tags/tag.controller.ts:35",{"_index":2266,"title":{},"body":{"controllers/TagController.html":{}}}],["app/src/app/tags/tag.controller.ts:43",{"_index":2270,"title":{},"body":{"controllers/TagController.html":{}}}],["app/src/app/tags/tag.controller.ts:51",{"_index":2259,"title":{},"body":{"controllers/TagController.html":{}}}],["app/src/app/tags/tag.module.ts",{"_index":2284,"title":{},"body":{"modules/TagModule.html":{}}}],["app/src/app/tags/tag.service.ts",{"_index":2286,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["app/src/app/tags/tag.service.ts:18",{"_index":2291,"title":{},"body":{"injectables/TagService.html":{}}}],["app/src/app/tags/tag.service.ts:22",{"_index":2293,"title":{},"body":{"injectables/TagService.html":{}}}],["app/src/app/tags/tag.service.ts:53",{"_index":2294,"title":{},"body":{"injectables/TagService.html":{}}}],["app/src/app/tags/tag.service.ts:6",{"_index":2288,"title":{},"body":{"injectables/TagService.html":{}}}],["app/src/app/tags/tag.service.ts:65",{"_index":2297,"title":{},"body":{"injectables/TagService.html":{}}}],["app/src/app/tags/tag.service.ts:78",{"_index":2295,"title":{},"body":{"injectables/TagService.html":{}}}],["app/src/app/tags/tag.service.ts:9",{"_index":2290,"title":{},"body":{"injectables/TagService.html":{}}}],["app/src/app/users/models/user.entity.ts",{"_index":2358,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["app/src/app/users/models/user.entity.ts:22",{"_index":2401,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:23",{"_index":2403,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:24",{"_index":2399,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:25",{"_index":2404,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:26",{"_index":2402,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:27",{"_index":2400,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:28",{"_index":2405,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:29",{"_index":2406,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:30",{"_index":2398,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:31",{"_index":2409,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:32",{"_index":2396,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:33",{"_index":2407,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:34",{"_index":2408,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:35",{"_index":2397,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/models/user.entity.ts:36",{"_index":2394,"title":{},"body":{"classes/UserEntity.html":{}}}],["app/src/app/users/users.controller.ts",{"_index":2411,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["app/src/app/users/users.controller.ts:126",{"_index":2425,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:141",{"_index":2431,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:150",{"_index":2436,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:162",{"_index":2433,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:170",{"_index":2450,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:182",{"_index":2453,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:195",{"_index":2422,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:211",{"_index":2429,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:23",{"_index":2440,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:34",{"_index":2444,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.controller.ts:51",{"_index":2447,"title":{},"body":{"controllers/UsersController.html":{}}}],["app/src/app/users/users.module.ts",{"_index":2509,"title":{},"body":{"modules/UsersModule.html":{}}}],["app/src/app/users/users.service.ts",{"_index":2560,"title":{},"body":{"coverage.html":{}}}],["app/src/app/utils/const/reg.ts",{"_index":2562,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app/src/app/utils/decorators/match.decorator.ts",{"_index":1101,"title":{},"body":{"classes/MatchConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["app/src/app/utils/decorators/match.decorator.ts:17",{"_index":1107,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["app/src/app/utils/decorators/optional.decorator.ts",{"_index":2564,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["app/src/app/utils/decorators/role.decorator.ts",{"_index":2566,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app/src/app/utils/jwt/jwt.dto.ts",{"_index":2331,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["app/src/app/utils/jwt/jwt.dto.ts:10",{"_index":2346,"title":{},"body":{"classes/TokenDto.html":{}}}],["app/src/app/utils/jwt/jwt.dto.ts:11",{"_index":2348,"title":{},"body":{"classes/TokenDto.html":{}}}],["app/src/app/utils/jwt/jwt.dto.ts:12",{"_index":2347,"title":{},"body":{"classes/TokenDto.html":{}}}],["app/src/app/utils/jwt/jwt.dto.ts:13",{"_index":2345,"title":{},"body":{"classes/TokenDto.html":{}}}],["app/src/app/utils/jwt/jwt.dto.ts:14",{"_index":2343,"title":{},"body":{"classes/TokenDto.html":{}}}],["app/src/app/utils/jwt/jwt.interface.ts",{"_index":985,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["app/src/app/utils/jwt/jwtutils.module.ts",{"_index":989,"title":{},"body":{"modules/JwtUtilsModule.html":{}}}],["app/src/app/utils/jwt/jwtutils.service.ts",{"_index":993,"title":{},"body":{"injectables/JwtUtilsService.html":{},"coverage.html":{}}}],["app/src/app/utils/jwt/jwtutils.service.ts:13",{"_index":1003,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["app/src/app/utils/jwt/jwtutils.service.ts:28",{"_index":1005,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["app/src/app/utils/jwt/jwtutils.service.ts:32",{"_index":1001,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["app/src/app/utils/jwt/jwtutils.service.ts:7",{"_index":999,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["app/src/app/utils/time/timeutils.service.ts",{"_index":2314,"title":{},"body":{"injectables/TimeUtilsService.html":{},"coverage.html":{}}}],["app/src/app/utils/time/timeutils.service.ts:5",{"_index":2317,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["app/src/main.ts",{"_index":2568,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["app/src/socket",{"_index":2161,"title":{},"body":{"classes/SocketIoAdapter.html":{},"coverage.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":2002,"title":{},"body":{"injectables/RecordsService.html":{}}}],["applicablestandard",{"_index":1997,"title":{},"body":{"injectables/RecordsService.html":{}}}],["application",{"_index":2751,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":276,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../file.service.ts",{"_index":2691,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":2688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../match.decorator.ts",{"_index":2690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../optional.decorator.ts",{"_index":2689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../reg.ts",{"_index":2802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../role.decorator.ts",{"_index":2801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/be",{"_index":6,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["appservice",{"_index":273,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appthese",{"_index":2732,"title":{},"body":{"index.html":{}}}],["appto",{"_index":2723,"title":{},"body":{"index.html":{}}}],["args",{"_index":1105,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["args.constraints",{"_index":1121,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["args.object",{"_index":1123,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["array",{"_index":1872,"title":{},"body":{"injectables/RecordsService.html":{}}}],["array(12).fill(0",{"_index":240,"title":{},"body":{"injectables/AdminService.html":{}}}],["arrays",{"_index":235,"title":{},"body":{"injectables/AdminService.html":{}}}],["asc",{"_index":1919,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/TagService.html":{}}}],["async",{"_index":119,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["auth",{"_index":1058,"title":{},"body":{"modules/MailModule.html":{},"controllers/ReminderController.html":{}}}],["auth.guard",{"_index":337,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.user_id",{"_index":2076,"title":{},"body":{"controllers/ReminderController.html":{}}}],["auth/auth.guard",{"_index":593,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["authcontract",{"_index":2455,"title":{},"body":{"controllers/UsersController.html":{}}}],["authentication",{"_index":61,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["authmodule",{"_index":331,"title":{"modules/AuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":445,"title":{},"body":{"injectables/BlogsService.html":{}}}],["auto",{"_index":805,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["autocompletion",{"_index":2776,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":2734,"title":{},"body":{"index.html":{}}}],["available",{"_index":2728,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":1906,"title":{},"body":{"injectables/RecordsService.html":{}}}],["await",{"_index":121,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["aws",{"_index":775,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["axios",{"_index":2624,"title":{},"body":{"dependencies.html":{}}}],["b",{"_index":857,"title":{},"body":{"injectables/FileService.html":{}}}],["b.week",{"_index":1999,"title":{},"body":{"injectables/RecordsService.html":{}}}],["badrequestexception",{"_index":784,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["badrequestexception('cloudflare",{"_index":800,"title":{},"body":{"injectables/FileService.html":{}}}],["badrequestexception('could",{"_index":844,"title":{},"body":{"injectables/FileService.html":{}}}],["badrequestexception('error",{"_index":1176,"title":{},"body":{"controllers/MediaController.html":{}}}],["badrequestexception('no",{"_index":1156,"title":{},"body":{"controllers/MediaController.html":{}}}],["badrequestexception(error.message",{"_index":1191,"title":{},"body":{"controllers/MediaController.html":{}}}],["base",{"_index":1936,"title":{},"body":{"injectables/RecordsService.html":{}}}],["based",{"_index":1876,"title":{},"body":{"injectables/RecordsService.html":{}}}],["before",{"_index":1934,"title":{},"body":{"injectables/RecordsService.html":{}}}],["birthdate",{"_index":1881,"title":{},"body":{"injectables/RecordsService.html":{}}}],["blob",{"_index":766,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{},"miscellaneous/variables.html":{}}}],["blob.filename",{"_index":1175,"title":{},"body":{"controllers/MediaController.html":{}}}],["blobs",{"_index":1167,"title":{},"body":{"controllers/MediaController.html":{}}}],["blobs.length",{"_index":1178,"title":{},"body":{"controllers/MediaController.html":{}}}],["blobs.map((blob",{"_index":1173,"title":{},"body":{"controllers/MediaController.html":{}}}],["blobtofile",{"_index":893,"title":{},"body":{"injectables/FileService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blog",{"_index":338,"title":{"classes/Blog.html":{}},"body":{"classes/Blog.html":{},"injectables/BlogsService.html":{},"injectables/DatabaseService.html":{},"coverage.html":{},"index.html":{}}}],["blog.author",{"_index":477,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.blog_cover",{"_index":481,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.blog_id",{"_index":464,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.blog_tag.map((item",{"_index":486,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.category.category_id",{"_index":484,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.category.status",{"_index":482,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.category.title",{"_index":483,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.content",{"_index":478,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.created_at",{"_index":479,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.summary",{"_index":490,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.title",{"_index":476,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog.updated_at",{"_index":480,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog_cover",{"_index":452,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog_id",{"_index":463,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blog_tag",{"_index":470,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blogcontract",{"_index":382,"title":{},"body":{"controllers/BlogsController.html":{}}}],["blogcreaterequesttype",{"_index":351,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{}}}],["blogontag",{"_index":672,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["blogresponsetype",{"_index":434,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blogs",{"_index":474,"title":{},"body":{"injectables/BlogsService.html":{}}}],["blogs.controller",{"_index":407,"title":{},"body":{"modules/BlogsModule.html":{}}}],["blogs.service",{"_index":384,"title":{},"body":{"controllers/BlogsController.html":{},"modules/BlogsModule.html":{}}}],["blogs/blogs.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["blogscontroller",{"_index":341,"title":{"controllers/BlogsController.html":{}},"body":{"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"coverage.html":{}}}],["blogsmodule",{"_index":280,"title":{"modules/BlogsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogsModule.html":{},"modules.html":{},"overview.html":{}}}],["blogsservice",{"_index":383,"title":{"injectables/BlogsService.html":{}},"body":{"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"coverage.html":{},"overview.html":{}}}],["blogupdaterequesttype",{"_index":376,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{}}}],["body",{"_index":125,"title":{},"body":{"controllers/AdminController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PayosController.html":{},"controllers/PostsController.html":{},"controllers/ReactionController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["body.user_id",{"_index":2497,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"classes/MatchConstraint.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["bootstrap",{"_index":132,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bound.lowerbound",{"_index":1437,"title":{},"body":{"injectables/MetricService.html":{}}}],["bound.upperbound",{"_index":1436,"title":{},"body":{"injectables/MetricService.html":{}}}],["bound.week",{"_index":1435,"title":{},"body":{"injectables/MetricService.html":{}}}],["bound.who_standard_value",{"_index":1439,"title":{},"body":{"injectables/MetricService.html":{}}}],["bounds",{"_index":1346,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"injectables/RecordsService.html":{}}}],["browse",{"_index":2765,"title":{},"body":{"index.html":{},"modules.html":{}}}],["browser",{"_index":2582,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["bucket",{"_index":810,"title":{},"body":{"injectables/FileService.html":{}}}],["buffer",{"_index":826,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["build",{"_index":2726,"title":{},"body":{"index.html":{}}}],["bundle",{"_index":2725,"title":{},"body":{"index.html":{}}}],["bại",{"_index":1209,"title":{},"body":{"controllers/MediaController.html":{}}}],["bạn",{"_index":2127,"title":{},"body":{"injectables/ReminderService.html":{}}}],["c",{"_index":856,"title":{},"body":{"injectables/FileService.html":{},"injectables/NoteService.html":{},"injectables/ReminderService.html":{}}}],["calculate",{"_index":193,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RecordsService.html":{}}}],["calculatepregnancyweeks",{"_index":2315,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["calculatepregnancyweeks(undefined",{"_index":2316,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["canactivate",{"_index":11,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["canactivate(context",{"_index":23,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["cancelurl",{"_index":1624,"title":{},"body":{"injectables/PaymentService.html":{},"controllers/PayosController.html":{}}}],["capabilities",{"_index":2703,"title":{},"body":{"index.html":{}}}],["case",{"_index":1992,"title":{},"body":{"injectables/RecordsService.html":{}}}],["cast",{"_index":894,"title":{},"body":{"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"controllers/MediaController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["category",{"_index":435,"title":{"classes/Category.html":{}},"body":{"injectables/BlogsService.html":{},"classes/Category.html":{},"injectables/DatabaseService.html":{},"coverage.html":{}}}],["category.category_id",{"_index":520,"title":{},"body":{"classes/Category.html":{}}}],["category.status",{"_index":524,"title":{},"body":{"classes/Category.html":{}}}],["category.title",{"_index":522,"title":{},"body":{"classes/Category.html":{}}}],["category_id",{"_index":367,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{}}}],["categorycontract",{"_index":543,"title":{},"body":{"controllers/CategorysController.html":{}}}],["categorycreaterequest",{"_index":528,"title":{},"body":{"controllers/CategorysController.html":{},"injectables/CategorysService.html":{}}}],["categoryresponse",{"_index":515,"title":{},"body":{"classes/Category.html":{}}}],["categorys.controller",{"_index":554,"title":{},"body":{"modules/CategorysModule.html":{}}}],["categorys.service",{"_index":545,"title":{},"body":{"controllers/CategorysController.html":{},"modules/CategorysModule.html":{}}}],["categorys/categorys.module",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["categoryscontroller",{"_index":525,"title":{"controllers/CategorysController.html":{}},"body":{"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"coverage.html":{}}}],["categorysmodule",{"_index":281,"title":{"modules/CategorysModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategorysModule.html":{},"modules.html":{},"overview.html":{}}}],["categorysservice",{"_index":544,"title":{"injectables/CategorysService.html":{}},"body":{"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"coverage.html":{},"overview.html":{}}}],["categoryupdaterequest",{"_index":539,"title":{},"body":{"controllers/CategorysController.html":{},"injectables/CategorysService.html":{}}}],["cb",{"_index":1241,"title":{},"body":{"modules/MediaModule.html":{}}}],["cb(null",{"_index":1242,"title":{},"body":{"modules/MediaModule.html":{}}}],["changepasswordrequest",{"_index":2420,"title":{},"body":{"controllers/UsersController.html":{}}}],["channel",{"_index":2789,"title":{},"body":{"index.html":{}}}],["chart.js",{"_index":2626,"title":{},"body":{"dependencies.html":{}}}],["check",{"_index":1461,"title":{},"body":{"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"controllers/UsersController.html":{}}}],["checking",{"_index":1984,"title":{},"body":{"injectables/RecordsService.html":{}}}],["checkoutrequesttype",{"_index":1595,"title":{},"body":{"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"injectables/PayosService.html":{}}}],["checks",{"_index":1866,"title":{},"body":{"injectables/RecordsService.html":{}}}],["chunk",{"_index":888,"title":{},"body":{"injectables/FileService.html":{}}}],["chunks",{"_index":886,"title":{},"body":{"injectables/FileService.html":{}}}],["chunks.push(chunk",{"_index":889,"title":{},"body":{"injectables/FileService.html":{}}}],["ci",{"_index":2714,"title":{},"body":{"index.html":{}}}],["city",{"_index":899,"title":{},"body":{"classes/Hospital.html":{},"classes/HospitalEntity.html":{},"classes/Media-1.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["class",{"_index":47,"title":{"classes/Blog.html":{},"classes/Category.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"classes/Hospital.html":{},"classes/HospitalEntity.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"classes/Metric.html":{},"classes/Reaction.html":{},"classes/ReminderEntity.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"classes/Tag.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"classes/UserEntity.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":339,"title":{},"body":{"classes/Blog.html":{},"classes/Category.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"classes/Hospital.html":{},"classes/HospitalEntity.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"classes/Metric.html":{},"classes/Reaction.html":{},"classes/ReminderEntity.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"classes/Tag.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"classes/UserEntity.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"overview.html":{}}}],["click",{"_index":2715,"title":{},"body":{"index.html":{}}}],["client",{"_index":808,"title":{},"body":{"injectables/FileService.html":{}}}],["cluster_adminmodule",{"_index":135,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":136,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":137,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":332,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":333,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blogsmodule",{"_index":404,"title":{},"body":{"modules/BlogsModule.html":{},"overview.html":{}}}],["cluster_blogsmodule_providers",{"_index":405,"title":{},"body":{"modules/BlogsModule.html":{},"overview.html":{}}}],["cluster_categorysmodule",{"_index":551,"title":{},"body":{"modules/CategorysModule.html":{},"overview.html":{}}}],["cluster_categorysmodule_providers",{"_index":552,"title":{},"body":{"modules/CategorysModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":609,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_imports",{"_index":611,"title":{},"body":{"modules/CommentsModule.html":{}}}],["cluster_commentsmodule_providers",{"_index":610,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_filemodule",{"_index":736,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_filemodule_providers",{"_index":737,"title":{},"body":{"modules/FileModule.html":{},"overview.html":{}}}],["cluster_hospitalmodule",{"_index":963,"title":{},"body":{"modules/HospitalModule.html":{},"overview.html":{}}}],["cluster_hospitalmodule_providers",{"_index":964,"title":{},"body":{"modules/HospitalModule.html":{},"overview.html":{}}}],["cluster_jwtutilsmodule",{"_index":986,"title":{},"body":{"modules/JwtUtilsModule.html":{},"overview.html":{}}}],["cluster_jwtutilsmodule_exports",{"_index":988,"title":{},"body":{"modules/JwtUtilsModule.html":{},"overview.html":{}}}],["cluster_jwtutilsmodule_providers",{"_index":987,"title":{},"body":{"modules/JwtUtilsModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":1040,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":1042,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":1041,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mediamodule",{"_index":1229,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_mediamodule_exports",{"_index":1230,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_mediamodule_providers",{"_index":1231,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_membershipsmodule",{"_index":1312,"title":{},"body":{"modules/MembershipsModule.html":{},"overview.html":{}}}],["cluster_membershipsmodule_exports",{"_index":1314,"title":{},"body":{"modules/MembershipsModule.html":{},"overview.html":{}}}],["cluster_membershipsmodule_providers",{"_index":1313,"title":{},"body":{"modules/MembershipsModule.html":{},"overview.html":{}}}],["cluster_metricmodule",{"_index":1400,"title":{},"body":{"modules/MetricModule.html":{},"overview.html":{}}}],["cluster_metricmodule_exports",{"_index":1402,"title":{},"body":{"modules/MetricModule.html":{},"overview.html":{}}}],["cluster_metricmodule_imports",{"_index":1403,"title":{},"body":{"modules/MetricModule.html":{}}}],["cluster_metricmodule_providers",{"_index":1401,"title":{},"body":{"modules/MetricModule.html":{},"overview.html":{}}}],["cluster_notemodule",{"_index":1502,"title":{},"body":{"modules/NoteModule.html":{},"overview.html":{}}}],["cluster_notemodule_imports",{"_index":1503,"title":{},"body":{"modules/NoteModule.html":{}}}],["cluster_notemodule_providers",{"_index":1504,"title":{},"body":{"modules/NoteModule.html":{},"overview.html":{}}}],["cluster_paymentmodule",{"_index":1577,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_paymentmodule_imports",{"_index":1579,"title":{},"body":{"modules/PaymentModule.html":{}}}],["cluster_paymentmodule_providers",{"_index":1578,"title":{},"body":{"modules/PaymentModule.html":{},"overview.html":{}}}],["cluster_payosmodule",{"_index":1654,"title":{},"body":{"modules/PayosModule.html":{},"overview.html":{}}}],["cluster_payosmodule_exports",{"_index":1655,"title":{},"body":{"modules/PayosModule.html":{},"overview.html":{}}}],["cluster_payosmodule_providers",{"_index":1656,"title":{},"body":{"modules/PayosModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1706,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_exports",{"_index":1709,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1707,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1708,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_reactionmodule",{"_index":1768,"title":{},"body":{"modules/ReactionModule.html":{},"overview.html":{}}}],["cluster_reactionmodule_providers",{"_index":1769,"title":{},"body":{"modules/ReactionModule.html":{},"overview.html":{}}}],["cluster_recordsmodule",{"_index":1825,"title":{},"body":{"modules/RecordsModule.html":{},"overview.html":{}}}],["cluster_recordsmodule_imports",{"_index":1826,"title":{},"body":{"modules/RecordsModule.html":{}}}],["cluster_recordsmodule_providers",{"_index":1827,"title":{},"body":{"modules/RecordsModule.html":{},"overview.html":{}}}],["cluster_remindermodule",{"_index":2099,"title":{},"body":{"modules/ReminderModule.html":{},"overview.html":{}}}],["cluster_remindermodule_exports",{"_index":2101,"title":{},"body":{"modules/ReminderModule.html":{},"overview.html":{}}}],["cluster_remindermodule_imports",{"_index":2100,"title":{},"body":{"modules/ReminderModule.html":{}}}],["cluster_remindermodule_providers",{"_index":2102,"title":{},"body":{"modules/ReminderModule.html":{},"overview.html":{}}}],["cluster_standardmodule",{"_index":2215,"title":{},"body":{"modules/StandardModule.html":{}}}],["cluster_standardmodule_imports",{"_index":2216,"title":{},"body":{"modules/StandardModule.html":{}}}],["cluster_standardmodule_providers",{"_index":2217,"title":{},"body":{"modules/StandardModule.html":{}}}],["cluster_tagmodule",{"_index":2281,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_exports",{"_index":2282,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_providers",{"_index":2283,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2505,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2506,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2508,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2507,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1083,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["coi",{"_index":1528,"title":{},"body":{"injectables/NoteService.html":{}}}],["color",{"_index":2138,"title":{},"body":{"injectables/ReminderService.html":{}}}],["command",{"_index":819,"title":{},"body":{"injectables/FileService.html":{}}}],["comment",{"_index":604,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/PostsService.html":{}}}],["comment.comment_id",{"_index":645,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comment.content",{"_index":639,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comment.post_id",{"_index":641,"title":{},"body":{"injectables/CommentsService.html":{}}}],["comment_id",{"_index":628,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentcontract",{"_index":592,"title":{},"body":{"controllers/CommentsController.html":{}}}],["commentcreaterequesttype",{"_index":575,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["comments.controller",{"_index":613,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.service",{"_index":595,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{}}}],["comments/comments.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["commentscontroller",{"_index":572,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":282,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsservice",{"_index":594,"title":{"injectables/CommentsService.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"coverage.html":{},"overview.html":{}}}],["commenttype",{"_index":633,"title":{},"body":{"injectables/CommentsService.html":{}}}],["commentupdaterequesttype",{"_index":587,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{}}}],["community",{"_index":2783,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2654,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":1908,"title":{},"body":{"injectables/RecordsService.html":{}}}],["configmodule",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["configmodule.forroot",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":15,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"modules/MailModule.html":{},"injectables/PayosService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["configservice.get('mail_host",{"_index":1053,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('mail_password",{"_index":1061,"title":{},"body":{"modules/MailModule.html":{}}}],["configservice.get('mail_user",{"_index":1059,"title":{},"body":{"modules/MailModule.html":{}}}],["conflictexception",{"_index":2454,"title":{},"body":{"controllers/UsersController.html":{}}}],["conflictexception('email",{"_index":2488,"title":{},"body":{"controllers/UsersController.html":{}}}],["connect",{"_index":454,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CommentsService.html":{},"injectables/MediaService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{}}}],["connecting",{"_index":1935,"title":{},"body":{"injectables/RecordsService.html":{}}}],["console",{"_index":2764,"title":{},"body":{"index.html":{}}}],["console.error('error",{"_index":816,"title":{},"body":{"injectables/FileService.html":{}}}],["console.log(file",{"_index":1201,"title":{},"body":{"controllers/MediaController.html":{}}}],["console.log(filepath",{"_index":867,"title":{},"body":{"injectables/FileService.html":{}}}],["console.log(media",{"_index":1158,"title":{},"body":{"controllers/MediaController.html":{}}}],["console.log(payment.value",{"_index":264,"title":{},"body":{"injectables/AdminService.html":{}}}],["console.log(payment[month",{"_index":266,"title":{},"body":{"injectables/AdminService.html":{}}}],["console.log(result",{"_index":1501,"title":{},"body":{"controllers/NoteController.html":{}}}],["console.warn(`metric",{"_index":1983,"title":{},"body":{"injectables/RecordsService.html":{}}}],["console.warn(`no",{"_index":1989,"title":{},"body":{"injectables/RecordsService.html":{}}}],["const",{"_index":51,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"controllers/UsersController.html":{}}}],["constants",{"_index":785,"title":{},"body":{"injectables/FileService.html":{}}}],["constants.f_ok",{"_index":869,"title":{},"body":{"injectables/FileService.html":{}}}],["constraints",{"_index":1117,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"injectables/CategorysService.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"classes/TokenDto.html":{},"classes/UserEntity.html":{}}}],["constructor(app",{"_index":2165,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["constructor(category",{"_index":514,"title":{},"body":{"classes/Category.html":{}}}],["constructor(configservice",{"_index":751,"title":{},"body":{"injectables/FileService.html":{},"injectables/PayosService.html":{}}}],["constructor(databaseservice",{"_index":154,"title":{},"body":{"injectables/AdminService.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/HospitalService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["constructor(dataservice",{"_index":619,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/RecordsService.html":{}}}],["constructor(hospitaldata",{"_index":952,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["constructor(jwtservice",{"_index":997,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["constructor(jwtutilsservice",{"_index":13,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{}}}],["constructor(mailerservice",{"_index":1072,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metric",{"_index":1350,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["constructor(private",{"_index":118,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"controllers/PayosController.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"controllers/ReactionController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":2157,"title":{},"body":{"guards/RoleAuthGuard.html":{}}}],["constructor(reminderdata",{"_index":2038,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["constructor(tokendata",{"_index":2334,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{}}}],["constructor(userdata",{"_index":2366,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["content",{"_index":443,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CommentsService.html":{},"injectables/NoteService.html":{},"injectables/PostsService.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{}}}],["context",{"_index":26,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"injectables/MailService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["context.getclass",{"_index":94,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["context.gethandler",{"_index":93,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":53,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["contract",{"_index":2622,"title":{},"body":{"dependencies.html":{}}}],["controller",{"_index":104,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MailController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PayosController.html":{},"controllers/PostsController.html":{},"controllers/ReactionController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MailController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PayosController.html":{},"controllers/PostsController.html":{},"controllers/ReactionController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('mail",{"_index":1033,"title":{},"body":{"controllers/MailController.html":{}}}],["controller('reaction",{"_index":1759,"title":{},"body":{"controllers/ReactionController.html":{}}}],["controllers",{"_index":106,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/HospitalController.html":{},"modules/HospitalModule.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"controllers/MetricController.html":{},"modules/MetricModule.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"controllers/ReminderController.html":{},"modules/ReminderModule.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cors",{"_index":2177,"title":{},"body":{"classes/SocketIoAdapter.html":{},"dependencies.html":{}}}],["count",{"_index":247,"title":{},"body":{"injectables/AdminService.html":{},"controllers/MediaController.html":{}}}],["coverage",{"_index":2538,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":409,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/HospitalService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"index.html":{}}}],["create(@body",{"_index":1646,"title":{},"body":{"controllers/PayosController.html":{},"controllers/ReactionController.html":{}}}],["create(createblogdto",{"_index":417,"title":{},"body":{"injectables/BlogsService.html":{}}}],["create(createcategorydto",{"_index":557,"title":{},"body":{"injectables/CategorysService.html":{}}}],["create(createmembershipdto",{"_index":1319,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["create(createmetricdto",{"_index":1410,"title":{},"body":{"injectables/MetricService.html":{}}}],["create(createpostdto",{"_index":1714,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createreactiondto",{"_index":1742,"title":{},"body":{"controllers/ReactionController.html":{},"injectables/ReactionService.html":{}}}],["create(createreminderdto",{"_index":2108,"title":{},"body":{"injectables/ReminderService.html":{}}}],["create(createstandarddto",{"_index":2223,"title":{},"body":{"injectables/StandardService.html":{}}}],["create(createtagdto",{"_index":2289,"title":{},"body":{"injectables/TagService.html":{}}}],["create(hospital",{"_index":969,"title":{},"body":{"injectables/HospitalService.html":{}}}],["create_result",{"_index":1181,"title":{},"body":{"controllers/MediaController.html":{}}}],["createblogdto",{"_index":354,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{}}}],["createblogdto.author",{"_index":446,"title":{},"body":{"injectables/BlogsService.html":{}}}],["createblogdto.blog_cover",{"_index":453,"title":{},"body":{"injectables/BlogsService.html":{}}}],["createblogdto.category_id",{"_index":437,"title":{},"body":{"injectables/BlogsService.html":{}}}],["createblogdto.content",{"_index":444,"title":{},"body":{"injectables/BlogsService.html":{}}}],["createblogdto.summary",{"_index":448,"title":{},"body":{"injectables/BlogsService.html":{}}}],["createblogdto.tags_id",{"_index":455,"title":{},"body":{"injectables/BlogsService.html":{}}}],["createblogdto.title",{"_index":442,"title":{},"body":{"injectables/BlogsService.html":{}}}],["createbynextvisitdoctordate",{"_index":2106,"title":{},"body":{"injectables/ReminderService.html":{}}}],["createbynextvisitdoctordate(undefined",{"_index":2111,"title":{},"body":{"injectables/ReminderService.html":{}}}],["createcategorydto",{"_index":531,"title":{},"body":{"controllers/CategorysController.html":{},"injectables/CategorysService.html":{}}}],["createcategorydto.status",{"_index":565,"title":{},"body":{"injectables/CategorysService.html":{}}}],["createcategorydto.title",{"_index":566,"title":{},"body":{"injectables/CategorysService.html":{}}}],["createcomment",{"_index":615,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcomment(undefined",{"_index":624,"title":{},"body":{"injectables/CommentsService.html":{}}}],["createcommentdto",{"_index":579,"title":{},"body":{"controllers/CommentsController.html":{}}}],["created",{"_index":2709,"title":{},"body":{"index.html":{}}}],["created_at",{"_index":449,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CommentsService.html":{},"classes/Hospital.html":{},"injectables/JwtUtilsService.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["created_at.gettime",{"_index":1018,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["created_time",{"_index":1017,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["createdate",{"_index":189,"title":{},"body":{"injectables/AdminService.html":{}}}],["createdate.getfullyear",{"_index":192,"title":{},"body":{"injectables/AdminService.html":{}}}],["createdate.getmonth",{"_index":191,"title":{},"body":{"injectables/AdminService.html":{}}}],["createioserver",{"_index":2164,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["createioserver(port",{"_index":2169,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["createlinkpayment",{"_index":1660,"title":{},"body":{"injectables/PayosService.html":{}}}],["createlinkpayment(payoscreaterequest",{"_index":1662,"title":{},"body":{"injectables/PayosService.html":{}}}],["createmany",{"_index":1433,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmembershipdto",{"_index":1321,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["createmembershipdto.description",{"_index":1331,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["createmembershipdto.duration_days",{"_index":1336,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["createmembershipdto.price",{"_index":1334,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["createmembershipdto.status",{"_index":1332,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["createmembershipdto.title",{"_index":1329,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["createmetricdto",{"_index":1380,"title":{},"body":{"controllers/MetricController.html":{},"injectables/MetricService.html":{}}}],["createmetricdto.lowerbound_msg",{"_index":1432,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.measurement_unit",{"_index":1426,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.required",{"_index":1428,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.standard",{"_index":1422,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.standard.map((bound",{"_index":1434,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.status",{"_index":1427,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.tag_id",{"_index":1440,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.title",{"_index":1424,"title":{},"body":{"injectables/MetricService.html":{}}}],["createmetricdto.upperbound_msg",{"_index":1430,"title":{},"body":{"injectables/MetricService.html":{}}}],["createnote",{"_index":1508,"title":{},"body":{"injectables/NoteService.html":{}}}],["createnote(undefined",{"_index":1514,"title":{},"body":{"injectables/NoteService.html":{}}}],["createpayment",{"_index":1583,"title":{},"body":{"injectables/PaymentService.html":{}}}],["createpayment(paymentrequest",{"_index":1590,"title":{},"body":{"injectables/PaymentService.html":{}}}],["createpostdto",{"_index":1682,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto.content",{"_index":1724,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpresignedurlwithclient",{"_index":742,"title":{},"body":{"injectables/FileService.html":{}}}],["createreactiondto",{"_index":649,"title":{"classes/CreateReactionDto.html":{}},"body":{"classes/CreateReactionDto.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"classes/UpdateReactionDto.html":{},"coverage.html":{}}}],["createreadstream",{"_index":786,"title":{},"body":{"injectables/FileService.html":{}}}],["createreadstream(file.path",{"_index":813,"title":{},"body":{"injectables/FileService.html":{}}}],["createrecord",{"_index":1834,"title":{},"body":{"injectables/RecordsService.html":{}}}],["createrecord(undefined",{"_index":1846,"title":{},"body":{"injectables/RecordsService.html":{}}}],["createreminderdto",{"_index":2110,"title":{},"body":{"injectables/ReminderService.html":{}}}],["createreminderdto.color",{"_index":2139,"title":{},"body":{"injectables/ReminderService.html":{}}}],["createreminderdto.content",{"_index":2141,"title":{},"body":{"injectables/ReminderService.html":{}}}],["createreminderdto.title",{"_index":2140,"title":{},"body":{"injectables/ReminderService.html":{}}}],["createreminderdto.type",{"_index":2142,"title":{},"body":{"injectables/ReminderService.html":{}}}],["creates",{"_index":1877,"title":{},"body":{"injectables/RecordsService.html":{}}}],["createstandarddto",{"_index":652,"title":{"classes/CreateStandardDto.html":{}},"body":{"classes/CreateStandardDto.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"classes/UpdateStandardDto.html":{},"coverage.html":{}}}],["createstandarddto.lowerbound",{"_index":2238,"title":{},"body":{"injectables/StandardService.html":{}}}],["createstandarddto.metric_id",{"_index":2240,"title":{},"body":{"injectables/StandardService.html":{}}}],["createstandarddto.upperbound",{"_index":2237,"title":{},"body":{"injectables/StandardService.html":{}}}],["createstandarddto.week",{"_index":2236,"title":{},"body":{"injectables/StandardService.html":{}}}],["createstandarddto.who_standard_value",{"_index":2239,"title":{},"body":{"injectables/StandardService.html":{}}}],["createtagdto",{"_index":2257,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["createtagdto.status",{"_index":2301,"title":{},"body":{"injectables/TagService.html":{}}}],["createtagdto.title",{"_index":2300,"title":{},"body":{"injectables/TagService.html":{}}}],["createwithpostid",{"_index":1244,"title":{},"body":{"injectables/MediaService.html":{}}}],["createwithpostid(undefined",{"_index":1248,"title":{},"body":{"injectables/MediaService.html":{}}}],["createwithrecordid",{"_index":1245,"title":{},"body":{"injectables/MediaService.html":{}}}],["createwithrecordid(undefined",{"_index":1250,"title":{},"body":{"injectables/MediaService.html":{}}}],["createwritestream(filepath",{"_index":836,"title":{},"body":{"injectables/FileService.html":{}}}],["credentials",{"_index":801,"title":{},"body":{"injectables/FileService.html":{},"classes/SocketIoAdapter.html":{}}}],["crud",{"_index":1890,"title":{},"body":{"injectables/RecordsService.html":{}}}],["crypto",{"_index":2632,"title":{},"body":{"dependencies.html":{}}}],["cur",{"_index":504,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/MetricService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["current",{"_index":179,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RecordsService.html":{}}}],["currentdate",{"_index":181,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentdate.getfullyear",{"_index":186,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentdate.getmonth",{"_index":184,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentmonth",{"_index":183,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentmonthpackages",{"_index":216,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentmonthrevenue",{"_index":223,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentmonthsubscribers",{"_index":206,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentmonthusers",{"_index":187,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentmonthusers.length",{"_index":231,"title":{},"body":{"injectables/AdminService.html":{}}}],["currentyear",{"_index":185,"title":{},"body":{"injectables/AdminService.html":{}}}],["cách",{"_index":860,"title":{},"body":{"injectables/FileService.html":{}}}],["cái",{"_index":873,"title":{},"body":{"injectables/FileService.html":{}}}],["dashboard",{"_index":120,"title":{},"body":{"controllers/AdminController.html":{}}}],["dashboardcontract",{"_index":112,"title":{},"body":{"controllers/AdminController.html":{}}}],["dashboardoverviewtype",{"_index":162,"title":{},"body":{"injectables/AdminService.html":{}}}],["dashboardpaymenttype",{"_index":163,"title":{},"body":{"injectables/AdminService.html":{}}}],["dashboardtype",{"_index":164,"title":{},"body":{"injectables/AdminService.html":{}}}],["dashboardusertype",{"_index":165,"title":{},"body":{"injectables/AdminService.html":{}}}],["data",{"_index":226,"title":{},"body":{"injectables/AdminService.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/CommentsService.html":{},"injectables/HospitalService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"miscellaneous/functions.html":{}}}],["data.metric_id",{"_index":1898,"title":{},"body":{"injectables/RecordsService.html":{}}}],["data.value",{"_index":1910,"title":{},"body":{"injectables/RecordsService.html":{}}}],["database",{"_index":245,"title":{},"body":{"injectables/AdminService.html":{}}}],["database/database.service",{"_index":145,"title":{},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{}}}],["databaseservice",{"_index":139,"title":{"injectables/DatabaseService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["dataservice",{"_index":623,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/RecordsService.html":{}}}],["date",{"_index":182,"title":{},"body":{"injectables/AdminService.html":{},"classes/Hospital.html":{},"injectables/JwtUtilsService.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MembershipsService.html":{},"injectables/NoteService.html":{},"injectables/RecordsService.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["date()).length",{"_index":200,"title":{},"body":{"injectables/AdminService.html":{}}}],["date(createreminderdto.remind_date",{"_index":2144,"title":{},"body":{"injectables/ReminderService.html":{}}}],["date(currentyear",{"_index":204,"title":{},"body":{"injectables/AdminService.html":{}}}],["date(date.now",{"_index":450,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CommentsService.html":{},"injectables/MediaService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["date(date.now()).gettime",{"_index":897,"title":{},"body":{"injectables/FileService.html":{},"injectables/JwtUtilsService.html":{},"miscellaneous/variables.html":{}}}],["date(newrecord.visit_doctor_date",{"_index":1942,"title":{},"body":{"injectables/RecordsService.html":{}}}],["date(next_visit_doctor_date",{"_index":2123,"title":{},"body":{"injectables/ReminderService.html":{}}}],["date(nextvisitdoctordate",{"_index":2124,"title":{},"body":{"injectables/ReminderService.html":{}}}],["date(note.date",{"_index":1537,"title":{},"body":{"injectables/NoteService.html":{}}}],["date(payment.created_at",{"_index":208,"title":{},"body":{"injectables/AdminService.html":{}}}],["date(payment.expired_at",{"_index":199,"title":{},"body":{"injectables/AdminService.html":{}}}],["date(record.visit_doctor_date",{"_index":1912,"title":{},"body":{"injectables/RecordsService.html":{}}}],["date(updatereminderdto.remind_date",{"_index":2155,"title":{},"body":{"injectables/ReminderService.html":{}}}],["date(user.created_at",{"_index":190,"title":{},"body":{"injectables/AdminService.html":{}}}],["date.now",{"_index":1170,"title":{},"body":{"controllers/MediaController.html":{}}}],["day",{"_index":202,"title":{},"body":{"injectables/AdminService.html":{}}}],["daysremaining",{"_index":2321,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["declarations",{"_index":131,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoded_authorization",{"_index":64,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["decoded_authorization.user_id",{"_index":86,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["decoded_email_verify",{"_index":77,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["decoded_refresh_token",{"_index":84,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["decoded_refresh_token.user_id",{"_index":87,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["decorators",{"_index":109,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/ReactionController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":677,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1062,"title":{},"body":{"modules/MailModule.html":{}}}],["defined",{"_index":16,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"classes/TokenDto.html":{},"classes/UpdateStandardDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"index.html":{}}}],["delete",{"_index":1185,"title":{},"body":{"controllers/MediaController.html":{},"controllers/PostsController.html":{},"controllers/ReactionController.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{}}}],["delete(':id",{"_index":1747,"title":{},"body":{"controllers/ReactionController.html":{}}}],["deletecomment",{"_index":616,"title":{},"body":{"injectables/CommentsService.html":{}}}],["deletecomment(comment_id",{"_index":626,"title":{},"body":{"injectables/CommentsService.html":{}}}],["deleted",{"_index":1223,"title":{},"body":{"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{}}}],["deleted_result",{"_index":1186,"title":{},"body":{"controllers/MediaController.html":{}}}],["deletedmedia",{"_index":1948,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deletedmedia.length",{"_index":1950,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deletedmedias",{"_index":1160,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["deletedmedias.length",{"_index":1162,"title":{},"body":{"controllers/MediaController.html":{}}}],["deletedmedias.map((m",{"_index":1187,"title":{},"body":{"controllers/MediaController.html":{}}}],["deletednote",{"_index":1549,"title":{},"body":{"injectables/NoteService.html":{}}}],["deletedrecordmetric",{"_index":1944,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deletedrecordmetric.length",{"_index":1946,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deletedreminder",{"_index":1952,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deletedreminder.length",{"_index":1954,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deletefile",{"_index":745,"title":{},"body":{"injectables/FileService.html":{}}}],["deletefile(filename",{"_index":753,"title":{},"body":{"injectables/FileService.html":{}}}],["deletelocalfile",{"_index":746,"title":{},"body":{"injectables/FileService.html":{}}}],["deletelocalfile(filename",{"_index":756,"title":{},"body":{"injectables/FileService.html":{}}}],["deletenotebyid",{"_index":1509,"title":{},"body":{"injectables/NoteService.html":{}}}],["deletenotebyid(id",{"_index":1516,"title":{},"body":{"injectables/NoteService.html":{}}}],["deleteobjectcommand",{"_index":772,"title":{},"body":{"injectables/FileService.html":{}}}],["deleterecord",{"_index":1835,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deleterecord(recordid",{"_index":1849,"title":{},"body":{"injectables/RecordsService.html":{}}}],["deleting",{"_index":848,"title":{},"body":{"injectables/FileService.html":{}}}],["demoto",{"_index":2754,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":129,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1727,"title":{},"body":{"injectables/PostsService.html":{}}}],["description",{"_index":1330,"title":{},"body":{"injectables/MembershipsService.html":{},"injectables/PaymentService.html":{},"injectables/RecordsService.html":{}}}],["dest",{"_index":1239,"title":{},"body":{"modules/MediaModule.html":{}}}],["destination",{"_index":1240,"title":{},"body":{"modules/MediaModule.html":{}}}],["details",{"_index":1931,"title":{},"body":{"injectables/RecordsService.html":{}}}],["determine",{"_index":2015,"title":{},"body":{"injectables/RecordsService.html":{}}}],["dev",{"_index":2719,"title":{},"body":{"index.html":{}}}],["developer",{"_index":2772,"title":{},"body":{"index.html":{}}}],["dir",{"_index":1065,"title":{},"body":{"modules/MailModule.html":{}}}],["directory",{"_index":831,"title":{},"body":{"injectables/FileService.html":{}}}],["discord",{"_index":2784,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":1235,"title":{},"body":{"modules/MediaModule.html":{}}}],["district",{"_index":2359,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["docs",{"_index":2739,"title":{},"body":{"index.html":{}}}],["doctor",{"_index":1882,"title":{},"body":{"injectables/RecordsService.html":{}}}],["doctor_name",{"_index":909,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["documentation",{"_index":2539,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":99,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["download",{"_index":876,"title":{},"body":{"injectables/FileService.html":{}}}],["downloadfile(filename",{"_index":824,"title":{},"body":{"injectables/FileService.html":{}}}],["downloading",{"_index":846,"title":{},"body":{"injectables/FileService.html":{}}}],["dto/create",{"_index":1754,"title":{},"body":{"controllers/ReactionController.html":{},"injectables/ReactionService.html":{}}}],["dto/update",{"_index":1756,"title":{},"body":{"controllers/ReactionController.html":{},"injectables/ReactionService.html":{}}}],["dung",{"_index":2459,"title":{},"body":{"controllers/UsersController.html":{}}}],["duration_days",{"_index":1335,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["dynamic",{"_index":2583,"title":{},"body":{"dependencies.html":{}}}],["dùng",{"_index":851,"title":{},"body":{"injectables/FileService.html":{}}}],["e",{"_index":73,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["each",{"_index":248,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RecordsService.html":{}}}],["ed13",{"_index":1036,"title":{},"body":{"controllers/MailController.html":{}}}],["editor",{"_index":2769,"title":{},"body":{"index.html":{}}}],["email",{"_index":1640,"title":{},"body":{"injectables/PaymentService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["emailverifytokenauthguard",{"_index":75,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"modules/AuthModule.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["endpoint",{"_index":794,"title":{},"body":{"injectables/FileService.html":{}}}],["enriches",{"_index":2771,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":830,"title":{},"body":{"injectables/FileService.html":{},"injectables/RecordsService.html":{}}}],["entities/record.entity",{"_index":1888,"title":{},"body":{"injectables/RecordsService.html":{}}}],["env",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/PayosService.html":{}}}],["envfilepath",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":815,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{},"injectables/RecordsService.html":{}}}],["es",{"_index":2645,"title":{},"body":{"dependencies.html":{}}}],["eslint",{"_index":2641,"title":{},"body":{"dependencies.html":{}}}],["exactmatch",{"_index":1994,"title":{},"body":{"injectables/RecordsService.html":{}}}],["example",{"_index":2720,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":24,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["existing",{"_index":1927,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existingmetric",{"_index":2022,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existingmetric.visit_record_metric_id",{"_index":2025,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existingmetricmap",{"_index":2017,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existingmetricmap.get(metricdata.metric_id",{"_index":2023,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existingmetrics",{"_index":2016,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existingrecord",{"_index":1928,"title":{},"body":{"injectables/RecordsService.html":{}}}],["exists",{"_index":832,"title":{},"body":{"injectables/FileService.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"controllers/UsersController.html":{}}}],["expected",{"_index":1880,"title":{},"body":{"injectables/RecordsService.html":{}}}],["expected_birth_date",{"_index":2365,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["expectedbirthdate",{"_index":1965,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["expectedbirthdate.gettime",{"_index":2319,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["experience",{"_index":2773,"title":{},"body":{"index.html":{}}}],["expired_at",{"_index":1637,"title":{},"body":{"injectables/PaymentService.html":{}}}],["expiresin",{"_index":863,"title":{},"body":{"injectables/FileService.html":{},"injectables/JwtUtilsService.html":{}}}],["explore",{"_index":2708,"title":{},"body":{"index.html":{}}}],["export",{"_index":46,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["exports",{"_index":134,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":42,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/CommentsController.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"modules/MediaModule.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"guards/RoleAuthGuard.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":763,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["extends",{"_index":916,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"classes/SocketIoAdapter.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["extension",{"_index":2770,"title":{},"body":{"index.html":{}}}],["extract",{"_index":1967,"title":{},"body":{"injectables/RecordsService.html":{}}}],["f\\d]{12",{"_index":2809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{3",{"_index":2807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{4",{"_index":2805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f\\d]{8",{"_index":2804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failed",{"_index":1180,"title":{},"body":{"controllers/MediaController.html":{}}}],["fe",{"_index":2722,"title":{},"body":{"index.html":{}}}],["feature",{"_index":2747,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":2003,"title":{},"body":{"injectables/RecordsService.html":{}}}],["fetch(m.media_url",{"_index":1166,"title":{},"body":{"controllers/MediaController.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["file([blob",{"_index":895,"title":{},"body":{"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["file.originalname",{"_index":1199,"title":{},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{}}}],["file.path",{"_index":1202,"title":{},"body":{"controllers/MediaController.html":{}}}],["file.service",{"_index":740,"title":{},"body":{"modules/FileModule.html":{}}}],["file/file.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["file/file.service",{"_index":1151,"title":{},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{}}}],["filemodule",{"_index":283,"title":{"modules/FileModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FileModule.html":{},"modules.html":{},"overview.html":{}}}],["filename",{"_index":755,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"miscellaneous/variables.html":{}}}],["filepath",{"_index":828,"title":{},"body":{"injectables/FileService.html":{}}}],["files",{"_index":2737,"title":{},"body":{"index.html":{}}}],["fileservice",{"_index":738,"title":{"injectables/FileService.html":{}},"body":{"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"coverage.html":{},"overview.html":{}}}],["filter((payment",{"_index":224,"title":{},"body":{"injectables/AdminService.html":{}}}],["filter((tag_id",{"_index":460,"title":{},"body":{"injectables/BlogsService.html":{}}}],["find",{"_index":1926,"title":{},"body":{"injectables/RecordsService.html":{}}}],["findall",{"_index":410,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/HospitalService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["findall(page",{"_index":420,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/PostsService.html":{}}}],["findallbyuser",{"_index":2287,"title":{},"body":{"injectables/TagService.html":{}}}],["findallbyuser(userid",{"_index":2292,"title":{},"body":{"injectables/TagService.html":{}}}],["findbycategory",{"_index":411,"title":{},"body":{"injectables/BlogsService.html":{}}}],["findbycategory(undefined",{"_index":422,"title":{},"body":{"injectables/BlogsService.html":{}}}],["findbymetricidandweek",{"_index":1407,"title":{},"body":{"injectables/MetricService.html":{}}}],["findbymetricidandweek(undefined",{"_index":1413,"title":{},"body":{"injectables/MetricService.html":{}}}],["findbytag",{"_index":412,"title":{},"body":{"injectables/BlogsService.html":{}}}],["findbytag(page",{"_index":424,"title":{},"body":{"injectables/BlogsService.html":{}}}],["findone",{"_index":413,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/HospitalService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["findone(@param('id",{"_index":1762,"title":{},"body":{"controllers/ReactionController.html":{}}}],["findone(id",{"_index":427,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/HospitalService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["findstandardbymetricid",{"_index":2221,"title":{},"body":{"injectables/StandardService.html":{}}}],["findstandardbymetricid(id",{"_index":2227,"title":{},"body":{"injectables/StandardService.html":{}}}],["finish",{"_index":2713,"title":{},"body":{"index.html":{}}}],["first",{"_index":201,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RecordsService.html":{}}}],["firstdayofmonth",{"_index":203,"title":{},"body":{"injectables/AdminService.html":{}}}],["follow",{"_index":2785,"title":{},"body":{"index.html":{}}}],["following",{"_index":2013,"title":{},"body":{"injectables/RecordsService.html":{}}}],["forbiddenexception",{"_index":30,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["forbiddenexception(\"you",{"_index":98,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["forbiddenexception('invalid",{"_index":88,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["forbiddenexception('user",{"_index":59,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["forbiddenexception(e.message",{"_index":74,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["forgotpasswordrequest",{"_index":2427,"title":{},"body":{"controllers/UsersController.html":{}}}],["format",{"_index":1856,"title":{},"body":{"injectables/RecordsService.html":{}}}],["formatrecord",{"_index":1836,"title":{},"body":{"injectables/RecordsService.html":{}}}],["formatrecord(records",{"_index":1853,"title":{},"body":{"injectables/RecordsService.html":{}}}],["formatrecord[0",{"_index":1917,"title":{},"body":{"injectables/RecordsService.html":{}}}],["formatted",{"_index":1848,"title":{},"body":{"injectables/RecordsService.html":{}}}],["formkit/auto",{"_index":2586,"title":{},"body":{"dependencies.html":{}}}],["found",{"_index":439,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/CommentsService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["frontend",{"_index":2181,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["fs",{"_index":787,"title":{},"body":{"injectables/FileService.html":{}}}],["fs/promises",{"_index":789,"title":{},"body":{"injectables/FileService.html":{}}}],["fullcalendar/angular",{"_index":2589,"title":{},"body":{"dependencies.html":{}}}],["fullcalendar/core",{"_index":2591,"title":{},"body":{"dependencies.html":{}}}],["fullcalendar/daygrid",{"_index":2593,"title":{},"body":{"dependencies.html":{}}}],["fullcalendar/interaction",{"_index":2594,"title":{},"body":{"dependencies.html":{}}}],["function",{"_index":882,"title":{},"body":{"injectables/FileService.html":{},"classes/MatchConstraint.html":{},"coverage.html":{}}}],["functions",{"_index":1889,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/RecordsService.html":{},"miscellaneous/functions.html":{}}}],["g",{"_index":2752,"title":{},"body":{"index.html":{}}}],["generate",{"_index":2750,"title":{},"body":{"index.html":{}}}],["generatenewrefreshtokenexpiry",{"_index":994,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["generatenewrefreshtokenexpiry(undefined",{"_index":1000,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["generation",{"_index":2746,"title":{},"body":{"index.html":{}}}],["generator",{"_index":2749,"title":{},"body":{"index.html":{}}}],["generators",{"_index":2766,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":1745,"title":{},"body":{"controllers/ReactionController.html":{}}}],["getallcommentsbypostid",{"_index":617,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getallcommentsbypostid(post_id",{"_index":629,"title":{},"body":{"injectables/CommentsService.html":{}}}],["getallnotes",{"_index":1510,"title":{},"body":{"injectables/NoteService.html":{}}}],["getallnotes(user_id",{"_index":1518,"title":{},"body":{"injectables/NoteService.html":{}}}],["getallpayments",{"_index":1584,"title":{},"body":{"injectables/PaymentService.html":{}}}],["getblog",{"_index":699,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getblogontag",{"_index":701,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getcategory",{"_index":689,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getcomment",{"_index":713,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getdashboard",{"_index":150,"title":{},"body":{"injectables/AdminService.html":{}}}],["getdashboardoverview",{"_index":151,"title":{},"body":{"injectables/AdminService.html":{}}}],["getdashboardpayment",{"_index":152,"title":{},"body":{"injectables/AdminService.html":{}}}],["getdashboarduser",{"_index":153,"title":{},"body":{"injectables/AdminService.html":{}}}],["getdata",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getfile",{"_index":747,"title":{},"body":{"injectables/FileService.html":{}}}],["getfile(filename",{"_index":758,"title":{},"body":{"injectables/FileService.html":{}}}],["getfilepath(filename",{"_index":865,"title":{},"body":{"injectables/FileService.html":{}}}],["gethospital",{"_index":697,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getimageurl",{"_index":748,"title":{},"body":{"injectables/FileService.html":{}}}],["getimageurl(filename",{"_index":760,"title":{},"body":{"injectables/FileService.html":{}}}],["getmedia",{"_index":703,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getmembership",{"_index":685,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getmetric",{"_index":695,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getnote",{"_index":709,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getnotebyid",{"_index":1511,"title":{},"body":{"injectables/NoteService.html":{}}}],["getnotebyid(noteid",{"_index":1520,"title":{},"body":{"injectables/NoteService.html":{}}}],["getobjectcommand",{"_index":773,"title":{},"body":{"injectables/FileService.html":{}}}],["getpayment",{"_index":715,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getpost",{"_index":711,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getrecord",{"_index":705,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getrecordbyid",{"_index":1838,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getrecordbyid(recordid",{"_index":1858,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getrecordbyuserid",{"_index":1839,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getrecordbyuserid(userid",{"_index":1860,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getrecordmetric",{"_index":707,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getreminder",{"_index":687,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getsignedurl",{"_index":781,"title":{},"body":{"injectables/FileService.html":{}}}],["getsignedurl(client",{"_index":862,"title":{},"body":{"injectables/FileService.html":{}}}],["getsignedurl(this.s3client",{"_index":880,"title":{},"body":{"injectables/FileService.html":{}}}],["getstandard",{"_index":693,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getstandardidbyweek",{"_index":1840,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getstandardidbyweek(undefined",{"_index":1862,"title":{},"body":{"injectables/RecordsService.html":{}}}],["gettag",{"_index":691,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["gettagidbyvalue",{"_index":1841,"title":{},"body":{"injectables/RecordsService.html":{}}}],["gettagidbyvalue(undefined",{"_index":1864,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getting",{"_index":823,"title":{"index.html":{}},"body":{"injectables/FileService.html":{}}}],["gettoken",{"_index":681,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getuser",{"_index":683,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["getuserbyid",{"_index":1924,"title":{},"body":{"injectables/RecordsService.html":{}}}],["graph",{"_index":2706,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"overview.html":{}}}],["gửi",{"_index":854,"title":{},"body":{"injectables/FileService.html":{}}}],["handle",{"_index":1991,"title":{},"body":{"injectables/RecordsService.html":{}}}],["handlebars",{"_index":2636,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":1046,"title":{},"body":{"modules/MailModule.html":{}}}],["handlechangepassword",{"_index":2412,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlechangepassword(@body",{"_index":2473,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlechangepassword(body",{"_index":2419,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlecreate",{"_index":343,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handlecreate(@body",{"_index":385,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handlecreate(body",{"_index":2054,"title":{},"body":{"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["handlecreate(createblogdto",{"_index":350,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handlecreate(createcategorydto",{"_index":527,"title":{},"body":{"controllers/CategorysController.html":{}}}],["handlecreate(createcommentdto",{"_index":574,"title":{},"body":{"controllers/CommentsController.html":{}}}],["handlecreate(createmetricdto",{"_index":1376,"title":{},"body":{"controllers/MetricController.html":{}}}],["handlecreate(createpostdto",{"_index":1678,"title":{},"body":{"controllers/PostsController.html":{}}}],["handlecreate(createstandarddto",{"_index":2192,"title":{},"body":{"controllers/StandardController.html":{}}}],["handlecreate(createtagdto",{"_index":2253,"title":{},"body":{"controllers/TagController.html":{}}}],["handlecreate(note",{"_index":1468,"title":{},"body":{"controllers/NoteController.html":{}}}],["handlecreatehospital",{"_index":920,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handlecreatehospital(@body",{"_index":945,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handlecreatehospital(hospital",{"_index":924,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handlecreatemembership",{"_index":1278,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handlecreatemembership(@body",{"_index":1302,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handlecreatemembership(body",{"_index":1283,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handlecreatepayment",{"_index":1553,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlecreatepayment(@body",{"_index":1571,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlecreatepayment(paymentrequest",{"_index":1556,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlecreaterecord",{"_index":1784,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlecreaterecord(@body",{"_index":1811,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlecreaterecord(record",{"_index":1789,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handledelete",{"_index":344,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{}}}],["handledelete(@param",{"_index":2089,"title":{},"body":{"controllers/ReminderController.html":{}}}],["handledelete(@param('id",{"_index":402,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{}}}],["handledelete(@param('standard_id",{"_index":2213,"title":{},"body":{"controllers/StandardController.html":{}}}],["handledelete(id",{"_index":355,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{}}}],["handledelete(standardid",{"_index":2196,"title":{},"body":{"controllers/StandardController.html":{}}}],["handledelete(undefined",{"_index":2058,"title":{},"body":{"controllers/ReminderController.html":{}}}],["handledeletefile",{"_index":1133,"title":{},"body":{"controllers/MediaController.html":{}}}],["handledeletefile(@param('id",{"_index":1217,"title":{},"body":{"controllers/MediaController.html":{}}}],["handledeletefile(filename",{"_index":1137,"title":{},"body":{"controllers/MediaController.html":{}}}],["handledeletemembership",{"_index":1279,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handledeletemembership(@param('id",{"_index":1310,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handledeletemembership(id",{"_index":1287,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handledeleterecord",{"_index":1785,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handledeleterecord(@param('id",{"_index":1819,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handledeleterecord(id",{"_index":1793,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlefindall",{"_index":2052,"title":{},"body":{"controllers/ReminderController.html":{}}}],["handlefindallhospitals",{"_index":921,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handlefindallmemberships",{"_index":1280,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handlefindone",{"_index":2053,"title":{},"body":{"controllers/ReminderController.html":{}}}],["handlefindone(@param('id",{"_index":2079,"title":{},"body":{"controllers/ReminderController.html":{}}}],["handlefindone(id",{"_index":2063,"title":{},"body":{"controllers/ReminderController.html":{}}}],["handlefindonehospitals",{"_index":922,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handlefindonehospitals(@param('id",{"_index":942,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handlefindonehospitals(id",{"_index":930,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handlefindonemembership",{"_index":1281,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handlefindonemembership(@param('id",{"_index":1306,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handlefindonemembership(id",{"_index":1292,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handleforgotpassword",{"_index":2413,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleforgotpassword(@body",{"_index":2502,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleforgotpassword(body",{"_index":2426,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlegetall",{"_index":345,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handlegetall(@param('post_id",{"_index":605,"title":{},"body":{"controllers/CommentsController.html":{}}}],["handlegetall(@query('page",{"_index":388,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/PostsController.html":{}}}],["handlegetall(@req",{"_index":1493,"title":{},"body":{"controllers/NoteController.html":{}}}],["handlegetall(page",{"_index":359,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/PostsController.html":{}}}],["handlegetall(post_id",{"_index":582,"title":{},"body":{"controllers/CommentsController.html":{}}}],["handlegetall(req",{"_index":1474,"title":{},"body":{"controllers/NoteController.html":{}}}],["handlegetallpayments",{"_index":1554,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handlegetblogbycategory",{"_index":346,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handlegetblogbycategory(@param('category_id",{"_index":393,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handlegetblogbycategory(category_id",{"_index":364,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handlegetblogbytag",{"_index":347,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handlegetblogbytag(@param('tag_id",{"_index":396,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handlegetblogbytag(tagid",{"_index":368,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handlegetbymetricid",{"_index":2191,"title":{},"body":{"controllers/StandardController.html":{}}}],["handlegetbymetricid(@param('metric_id",{"_index":2210,"title":{},"body":{"controllers/StandardController.html":{}}}],["handlegetbymetricid(metricid",{"_index":2199,"title":{},"body":{"controllers/StandardController.html":{}}}],["handlegetdashboard",{"_index":108,"title":{},"body":{"controllers/AdminController.html":{}}}],["handlegetfile(@param('filename",{"_index":1211,"title":{},"body":{"controllers/MediaController.html":{}}}],["handlegetlink",{"_index":1134,"title":{},"body":{"controllers/MediaController.html":{}}}],["handlegetlink(@param('filename",{"_index":1224,"title":{},"body":{"controllers/MediaController.html":{}}}],["handlegetlink(@param('id",{"_index":1226,"title":{},"body":{"controllers/MediaController.html":{}}}],["handlegetlink(filename",{"_index":1140,"title":{},"body":{"controllers/MediaController.html":{}}}],["handlegetone",{"_index":348,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handlegetone(@param('id",{"_index":398,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handlegetone(id",{"_index":372,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handlegetprofile",{"_index":2414,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlegetprofile(@req",{"_index":2493,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlegetprofile(req",{"_index":2434,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlegetrecordbyid",{"_index":1786,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlegetrecordbyid(@param('id",{"_index":1822,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlegetrecordbyid(id",{"_index":1796,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlegetrecordbyuserid",{"_index":1787,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlegetrecordbyuserid(@req",{"_index":1814,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlegetrecordbyuserid(request",{"_index":1799,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handlegettagsbyuser",{"_index":2252,"title":{},"body":{"controllers/TagController.html":{}}}],["handlegettagsbyuser(@param('userid",{"_index":2277,"title":{},"body":{"controllers/TagController.html":{}}}],["handlegettagsbyuser(userid",{"_index":2264,"title":{},"body":{"controllers/TagController.html":{}}}],["handlelogin",{"_index":2415,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlelogin(@body",{"_index":2461,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlelogin(body",{"_index":2437,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlelogout(@body",{"_index":2476,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlemail",{"_index":1034,"title":{},"body":{"controllers/MailController.html":{}}}],["handlerefreshtoken(@body",{"_index":2485,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleregister",{"_index":2416,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleregister(@body",{"_index":2465,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleregister(body",{"_index":2441,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlesigninwithtoken",{"_index":2417,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlesigninwithtoken(@req",{"_index":2470,"title":{},"body":{"controllers/UsersController.html":{}}}],["handlesigninwithtoken(req",{"_index":2445,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleupdate",{"_index":349,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handleupdate(@body",{"_index":400,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["handleupdate(body",{"_index":2066,"title":{},"body":{"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["handleupdate(note",{"_index":1479,"title":{},"body":{"controllers/NoteController.html":{}}}],["handleupdate(updateblogdto",{"_index":375,"title":{},"body":{"controllers/BlogsController.html":{}}}],["handleupdate(updatecategorydto",{"_index":538,"title":{},"body":{"controllers/CategorysController.html":{}}}],["handleupdate(updatecommentdto",{"_index":586,"title":{},"body":{"controllers/CommentsController.html":{}}}],["handleupdate(updatemetricdto",{"_index":1387,"title":{},"body":{"controllers/MetricController.html":{}}}],["handleupdate(updatepostdto",{"_index":1689,"title":{},"body":{"controllers/PostsController.html":{}}}],["handleupdate(updatestandard",{"_index":2202,"title":{},"body":{"controllers/StandardController.html":{}}}],["handleupdate(updatetagdto",{"_index":2267,"title":{},"body":{"controllers/TagController.html":{}}}],["handleupdatefile",{"_index":1196,"title":{},"body":{"controllers/MediaController.html":{}}}],["handleupdatehospital",{"_index":923,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handleupdatehospital(@body",{"_index":948,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handleupdatehospital(hospital",{"_index":933,"title":{},"body":{"controllers/HospitalController.html":{}}}],["handleupdatemembership",{"_index":1282,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handleupdatemembership(@body",{"_index":1308,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handleupdatemembership(body",{"_index":1295,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["handleupdatepayment",{"_index":1555,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handleupdatepayment(@body",{"_index":1574,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handleupdatepayment(paymentrequest",{"_index":1563,"title":{},"body":{"controllers/PaymentController.html":{}}}],["handleupdateprofile",{"_index":2418,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleupdateprofile(@body",{"_index":2500,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleupdateprofile(body",{"_index":2451,"title":{},"body":{"controllers/UsersController.html":{}}}],["handleupdaterecord",{"_index":1788,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handleupdaterecord(@body",{"_index":1817,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handleupdaterecord(record",{"_index":1802,"title":{},"body":{"controllers/RecordsController.html":{}}}],["handleuploadfile",{"_index":1135,"title":{},"body":{"controllers/MediaController.html":{}}}],["handleuploadfile(@body",{"_index":1192,"title":{},"body":{"controllers/MediaController.html":{}}}],["handleuploadfile(media",{"_index":1143,"title":{},"body":{"controllers/MediaController.html":{}}}],["hello",{"_index":329,"title":{},"body":{"injectables/AppService.html":{}}}],["helper",{"_index":1962,"title":{},"body":{"injectables/RecordsService.html":{}}}],["here",{"_index":2716,"title":{},"body":{"index.html":{}}}],["highest",{"_index":2001,"title":{},"body":{"injectables/RecordsService.html":{}}}],["highlight.js",{"_index":2638,"title":{},"body":{"dependencies.html":{}}}],["hosiptal/hospital.module",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["hospital",{"_index":671,"title":{"classes/Hospital.html":{}},"body":{"injectables/DatabaseService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"classes/Media-1.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{}}}],["hospital.controller",{"_index":966,"title":{},"body":{"modules/HospitalModule.html":{}}}],["hospital.hospital_id",{"_index":980,"title":{},"body":{"injectables/HospitalService.html":{},"injectables/RecordsService.html":{}}}],["hospital.service",{"_index":939,"title":{},"body":{"controllers/HospitalController.html":{},"modules/HospitalModule.html":{}}}],["hospital_id",{"_index":900,"title":{},"body":{"classes/Hospital.html":{},"injectables/HospitalService.html":{},"classes/Media-1.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["hospitalcontract",{"_index":937,"title":{},"body":{"controllers/HospitalController.html":{}}}],["hospitalcontroller",{"_index":918,"title":{"controllers/HospitalController.html":{}},"body":{"controllers/HospitalController.html":{},"modules/HospitalModule.html":{},"coverage.html":{}}}],["hospitalcreaterequesttype",{"_index":925,"title":{},"body":{"controllers/HospitalController.html":{},"injectables/HospitalService.html":{}}}],["hospitaldata",{"_index":954,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["hospitaldata.city",{"_index":960,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["hospitaldata.id",{"_index":958,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["hospitaldata.name",{"_index":962,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["hospitalentity",{"_index":950,"title":{"classes/HospitalEntity.html":{}},"body":{"classes/HospitalEntity.html":{},"coverage.html":{}}}],["hospitalises",{"_index":940,"title":{},"body":{"controllers/HospitalController.html":{}}}],["hospitalmodule",{"_index":284,"title":{"modules/HospitalModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HospitalModule.html":{},"modules.html":{},"overview.html":{}}}],["hospitalservice",{"_index":938,"title":{"injectables/HospitalService.html":{}},"body":{"controllers/HospitalController.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"coverage.html":{},"overview.html":{}}}],["hospitalupdaterequesttype",{"_index":934,"title":{},"body":{"controllers/HospitalController.html":{},"injectables/HospitalService.html":{}}}],["host",{"_index":1052,"title":{},"body":{"modules/MailModule.html":{}}}],["hs256",{"_index":1011,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["http",{"_index":791,"title":{},"body":{"injectables/FileService.html":{}}}],["http://localhost:3000/payos/cancel",{"_index":1649,"title":{},"body":{"controllers/PayosController.html":{}}}],["http://localhost:3000/payos/return",{"_index":1650,"title":{},"body":{"controllers/PayosController.html":{}}}],["http://localhost:4200",{"_index":2180,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["https://pregnancy",{"_index":1622,"title":{},"body":{"injectables/PaymentService.html":{}}}],["hàm",{"_index":849,"title":{},"body":{"injectables/FileService.html":{}}}],["hẹn",{"_index":2129,"title":{},"body":{"injectables/ReminderService.html":{}}}],["id",{"_index":358,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"classes/Standard.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["ide",{"_index":2767,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":2540,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1969,"title":{},"body":{"injectables/RecordsService.html":{}}}],["ignoretls",{"_index":1056,"title":{},"body":{"modules/MailModule.html":{}}}],["image",{"_index":2653,"title":{},"body":{"dependencies.html":{}}}],["images",{"_index":771,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["imglink",{"_index":1272,"title":{},"body":{"injectables/MediaService.html":{}}}],["implements",{"_index":48,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"classes/MatchConstraint.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["import",{"_index":29,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":144,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PostsModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/UsersModule.html":{}}}],["improves",{"_index":2775,"title":{},"body":{"index.html":{}}}],["include",{"_index":469,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/MediaService.html":{},"injectables/MetricService.html":{},"injectables/PaymentService.html":{},"injectables/RecordsService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["incomingmessage",{"_index":790,"title":{},"body":{"injectables/FileService.html":{},"miscellaneous/functions.html":{}}}],["incorrect",{"_index":2464,"title":{},"body":{"controllers/UsersController.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":2166,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["inferred",{"_index":2733,"title":{},"body":{"index.html":{}}}],["infinite",{"_index":2656,"title":{},"body":{"dependencies.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["inherited",{"_index":2523,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["initialize",{"_index":234,"title":{},"body":{"injectables/AdminService.html":{}}}],["inject",{"_index":1069,"title":{},"body":{"modules/MailModule.html":{}}}],["injectable",{"_index":31,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"injectables/HospitalService.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"injectables/PostsService.html":{},"injectables/ReactionService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"injectables/PostsService.html":{},"injectables/ReactionService.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"coverage.html":{}}}],["injectables",{"_index":148,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"injectables/HospitalService.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"injectables/PostsService.html":{},"injectables/ReactionService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"overview.html":{}}}],["install",{"_index":2763,"title":{},"body":{"index.html":{}}}],["installed",{"_index":2758,"title":{},"body":{"index.html":{}}}],["intellij",{"_index":2778,"title":{},"body":{"index.html":{}}}],["interface",{"_index":957,"title":{"interfaces/JwtPayload.html":{},"interfaces/MetricDTO.html":{},"interfaces/Reminder.html":{},"interfaces/TokenDataType.html":{},"interfaces/User.html":{}},"body":{"classes/HospitalEntity.html":{},"interfaces/JwtPayload.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["interfaces",{"_index":984,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/MetricDTO.html":{},"interfaces/Reminder.html":{},"interfaces/TokenDataType.html":{},"interfaces/User.html":{},"overview.html":{}}}],["invalid",{"_index":600,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["io.adapter.ts",{"_index":2162,"title":{},"body":{"classes/SocketIoAdapter.html":{},"coverage.html":{}}}],["io.adapter.ts:10",{"_index":2171,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["io.adapter.ts:5",{"_index":2167,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["ioadapter",{"_index":2163,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["isallowed",{"_index":96,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["isexist",{"_index":2082,"title":{},"body":{"controllers/ReminderController.html":{}}}],["isexist.type",{"_index":2084,"title":{},"body":{"controllers/ReminderController.html":{}}}],["isglobal",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["isloggin",{"_index":101,"title":{"guards/IsLoggin.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"modules/AuthModule.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"coverage.html":{}}}],["isoptionalnonnullable",{"_index":2565,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isoptionalnonnullable(data",{"_index":2692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["item.tag",{"_index":494,"title":{},"body":{"injectables/BlogsService.html":{}}}],["item.tag.status",{"_index":489,"title":{},"body":{"injectables/BlogsService.html":{}}}],["item.tag.tag_id",{"_index":488,"title":{},"body":{"injectables/BlogsService.html":{}}}],["item.tag.title",{"_index":487,"title":{},"body":{"injectables/BlogsService.html":{}}}],["join",{"_index":792,"title":{},"body":{"injectables/FileService.html":{},"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":770,"title":{},"body":{"injectables/FileService.html":{},"modules/MailModule.html":{}}}],["join(this.uploadpath",{"_index":829,"title":{},"body":{"injectables/FileService.html":{}}}],["journal",{"_index":39,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["js",{"_index":2633,"title":{},"body":{"dependencies.html":{}}}],["jsonc",{"_index":2640,"title":{},"body":{"dependencies.html":{}}}],["jsverse/transloco",{"_index":2595,"title":{},"body":{"dependencies.html":{}}}],["jwt.interface",{"_index":1007,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["jwt_secret",{"_index":68,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["jwtmodule",{"_index":990,"title":{},"body":{"modules/JwtUtilsModule.html":{}}}],["jwtpayload",{"_index":983,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtUtilsService.html":{},"controllers/NoteController.html":{},"controllers/RecordsController.html":{},"coverage.html":{}}}],["jwtpayload).user_id",{"_index":1494,"title":{},"body":{"controllers/NoteController.html":{},"controllers/RecordsController.html":{}}}],["jwtservice",{"_index":998,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["jwtsignoptions",{"_index":1006,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["jwtutils.service",{"_index":992,"title":{},"body":{"modules/JwtUtilsModule.html":{}}}],["jwtutilsmodule",{"_index":334,"title":{"modules/JwtUtilsModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/JwtUtilsModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PostsModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["jwtutilsservice",{"_index":14,"title":{"injectables/JwtUtilsService.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":812,"title":{},"body":{"injectables/FileService.html":{}}}],["khi",{"_index":855,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["khám",{"_index":2131,"title":{},"body":{"injectables/ReminderService.html":{}}}],["không",{"_index":1531,"title":{},"body":{"injectables/NoteService.html":{}}}],["kiểm",{"_index":1526,"title":{},"body":{"injectables/NoteService.html":{}}}],["ko",{"_index":858,"title":{},"body":{"injectables/FileService.html":{},"controllers/UsersController.html":{}}}],["label",{"_index":227,"title":{},"body":{"injectables/AdminService.html":{}}}],["last",{"_index":1957,"title":{},"body":{"injectables/RecordsService.html":{}}}],["last_ovulation_date",{"_index":2364,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["lastmodified",{"_index":896,"title":{},"body":{"injectables/FileService.html":{},"miscellaneous/variables.html":{}}}],["lastovulationdate",{"_index":2360,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["lastrecord",{"_index":2303,"title":{},"body":{"injectables/TagService.html":{}}}],["lastrecord.visit_record_metric.map((metric",{"_index":2306,"title":{},"body":{"injectables/TagService.html":{}}}],["learn",{"_index":2700,"title":{},"body":{"index.html":{}}}],["legend",{"_index":130,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":211,"title":{},"body":{"injectables/AdminService.html":{}}}],["less",{"_index":1996,"title":{},"body":{"injectables/RecordsService.html":{},"dependencies.html":{}}}],["let's",{"_index":2710,"title":{},"body":{"index.html":{}}}],["lets",{"_index":2774,"title":{},"body":{"index.html":{}}}],["leverage",{"_index":2744,"title":{},"body":{"index.html":{}}}],["library",{"_index":2755,"title":{},"body":{"index.html":{}}}],["libs/contract/src/lib/comment.contract",{"_index":634,"title":{},"body":{"injectables/CommentsService.html":{}}}],["license",{"_index":2798,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":360,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["line",{"_index":1095,"title":{},"body":{"injectables/MailService.html":{}}}],["link",{"_index":874,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["linkedin",{"_index":2787,"title":{},"body":{"index.html":{}}}],["links",{"_index":2780,"title":{},"body":{"index.html":{}}}],["list",{"_index":1088,"title":{},"body":{"injectables/MailService.html":{},"index.html":{}}}],["literal",{"_index":326,"title":{},"body":{"injectables/AppService.html":{},"injectables/BlogsService.html":{},"injectables/CommentsService.html":{},"injectables/JwtUtilsService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"injectables/TimeUtilsService.html":{}}}],["local",{"_index":871,"title":{},"body":{"injectables/FileService.html":{}}}],["lodash",{"_index":2644,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":1883,"title":{},"body":{"injectables/RecordsService.html":{}}}],["logger.error(error",{"_index":1959,"title":{},"body":{"injectables/RecordsService.html":{}}}],["loginrequest",{"_index":2438,"title":{},"body":{"controllers/UsersController.html":{}}}],["logout",{"_index":2482,"title":{},"body":{"controllers/UsersController.html":{}}}],["lowerbound",{"_index":655,"title":{},"body":{"classes/CreateStandardDto.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"classes/Standard.html":{},"injectables/StandardService.html":{}}}],["lowerbound_msg",{"_index":1431,"title":{},"body":{"injectables/MetricService.html":{}}}],["lowerboundmsg",{"_index":1347,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["lts.1",{"_index":2648,"title":{},"body":{"dependencies.html":{}}}],["luxon",{"_index":2580,"title":{},"body":{"dependencies.html":{}}}],["làm",{"_index":859,"title":{},"body":{"injectables/FileService.html":{}}}],["lấy",{"_index":872,"title":{},"body":{"injectables/FileService.html":{}}}],["lịch",{"_index":2128,"title":{},"body":{"injectables/ReminderService.html":{}}}],["m",{"_index":1447,"title":{},"body":{"injectables/MetricService.html":{},"injectables/RecordsService.html":{}}}],["m.blob()))).map((blob",{"_index":1169,"title":{},"body":{"controllers/MediaController.html":{}}}],["m.lowerbound_msg",{"_index":1455,"title":{},"body":{"injectables/MetricService.html":{}}}],["m.measurement_unit",{"_index":1451,"title":{},"body":{"injectables/MetricService.html":{}}}],["m.media_id",{"_index":1264,"title":{},"body":{"injectables/MediaService.html":{},"injectables/RecordsService.html":{}}}],["m.media_url",{"_index":1982,"title":{},"body":{"injectables/RecordsService.html":{}}}],["m.metric_id",{"_index":1449,"title":{},"body":{"injectables/MetricService.html":{},"injectables/RecordsService.html":{}}}],["m.required",{"_index":1453,"title":{},"body":{"injectables/MetricService.html":{}}}],["m.status",{"_index":1452,"title":{},"body":{"injectables/MetricService.html":{}}}],["m.tag_id",{"_index":1448,"title":{},"body":{"injectables/MetricService.html":{}}}],["m.title",{"_index":1450,"title":{},"body":{"injectables/MetricService.html":{}}}],["m.upperbound_msg",{"_index":1454,"title":{},"body":{"injectables/MetricService.html":{}}}],["m2.media_id",{"_index":1263,"title":{},"body":{"injectables/MediaService.html":{}}}],["mail",{"_index":1030,"title":{},"body":{"controllers/MailController.html":{}}}],["mail.controller",{"_index":1048,"title":{},"body":{"modules/MailModule.html":{}}}],["mail.service",{"_index":1032,"title":{},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mail/mail.service",{"_index":2510,"title":{},"body":{"modules/UsersModule.html":{}}}],["mailcontroller",{"_index":1027,"title":{"controllers/MailController.html":{}},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["mailermodule",{"_index":1044,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":1049,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":1073,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":285,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":1031,"title":{"injectables/MailService.html":{}},"body":{"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["main",{"_index":1956,"title":{},"body":{"injectables/RecordsService.html":{}}}],["manually",{"_index":2742,"title":{},"body":{"index.html":{}}}],["map((tag_id",{"_index":462,"title":{},"body":{"injectables/BlogsService.html":{}}}],["map(existingmetrics.map((m",{"_index":2018,"title":{},"body":{"injectables/RecordsService.html":{}}}],["match",{"_index":1119,"title":{},"body":{"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["match(property",{"_index":1112,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["matchconstraint",{"_index":1100,"title":{"classes/MatchConstraint.html":{}},"body":{"classes/MatchConstraint.html":{},"coverage.html":{}}}],["matching",{"_index":103,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil((await",{"_index":472,"title":{},"body":{"injectables/BlogsService.html":{}}}],["math.ceil(timediff",{"_index":2322,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["measurement_unit",{"_index":1425,"title":{},"body":{"injectables/MetricService.html":{}}}],["measurementunit",{"_index":1348,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["media",{"_index":673,"title":{"classes/Media.html":{},"classes/Media-1.html":{}},"body":{"injectables/DatabaseService.html":{},"classes/Hospital.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{}}}],["media.controller",{"_index":1237,"title":{},"body":{"modules/MediaModule.html":{}}}],["media.filter((m",{"_index":1265,"title":{},"body":{"injectables/MediaService.html":{}}}],["media.find((m2",{"_index":1262,"title":{},"body":{"injectables/MediaService.html":{}}}],["media.service",{"_index":1153,"title":{},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{}}}],["media/media.module",{"_index":308,"title":{},"body":{"modules/AppModule.html":{},"modules/RecordsModule.html":{}}}],["media/media.service",{"_index":1885,"title":{},"body":{"injectables/RecordsService.html":{}}}],["media_id",{"_index":913,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["media_url",{"_index":914,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["media_urls",{"_index":1164,"title":{},"body":{"controllers/MediaController.html":{}}}],["mediacontract",{"_index":1150,"title":{},"body":{"controllers/MediaController.html":{}}}],["mediacontroller",{"_index":1131,"title":{"controllers/MediaController.html":{}},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{},"coverage.html":{}}}],["mediamodule",{"_index":286,"title":{"modules/MediaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MediaModule.html":{},"modules/RecordsModule.html":{},"modules.html":{},"overview.html":{}}}],["mediaofrecord",{"_index":1259,"title":{},"body":{"injectables/MediaService.html":{}}}],["mediaofrecord.filter((m",{"_index":1261,"title":{},"body":{"injectables/MediaService.html":{}}}],["mediaofrecord.find((m2",{"_index":1266,"title":{},"body":{"injectables/MediaService.html":{}}}],["mediaresponse",{"_index":1144,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["mediaservice",{"_index":1152,"title":{"injectables/MediaService.html":{}},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"injectables/RecordsService.html":{},"coverage.html":{},"overview.html":{}}}],["meeting",{"_index":2087,"title":{},"body":{"controllers/ReminderController.html":{}}}],["memberdata",{"_index":239,"title":{},"body":{"injectables/AdminService.html":{}}}],["memberdata[month",{"_index":255,"title":{},"body":{"injectables/AdminService.html":{}}}],["membership",{"_index":263,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DatabaseService.html":{},"controllers/MembershipsController.html":{},"injectables/PaymentService.html":{}}}],["membership.membership_id",{"_index":1611,"title":{},"body":{"injectables/PaymentService.html":{}}}],["membership.price",{"_index":1612,"title":{},"body":{"injectables/PaymentService.html":{}}}],["membership.title",{"_index":1625,"title":{},"body":{"injectables/PaymentService.html":{}}}],["membership[month",{"_index":268,"title":{},"body":{"injectables/AdminService.html":{}}}],["membership_id",{"_index":1339,"title":{},"body":{"injectables/MembershipsService.html":{},"injectables/PaymentService.html":{}}}],["membershipcontract",{"_index":1299,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["membershipcreaterequest",{"_index":1284,"title":{},"body":{"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{}}}],["membershipexisted",{"_index":1605,"title":{},"body":{"injectables/PaymentService.html":{}}}],["memberships",{"_index":1304,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["memberships.controller",{"_index":1316,"title":{},"body":{"modules/MembershipsModule.html":{}}}],["memberships.service",{"_index":1301,"title":{},"body":{"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{}}}],["memberships/memberships.module",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{}}}],["memberships/memberships.service",{"_index":1601,"title":{},"body":{"injectables/PaymentService.html":{}}}],["membershipscontroller",{"_index":1276,"title":{"controllers/MembershipsController.html":{}},"body":{"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"coverage.html":{}}}],["membershipservice",{"_index":1588,"title":{},"body":{"injectables/PaymentService.html":{}}}],["membershipsmodule",{"_index":287,"title":{"modules/MembershipsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MembershipsModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["membershipsservice",{"_index":1300,"title":{"injectables/MembershipsService.html":{}},"body":{"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["membershipupdaterequest",{"_index":1296,"title":{},"body":{"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{}}}],["mes",{"_index":1820,"title":{},"body":{"controllers/RecordsController.html":{}}}],["message",{"_index":327,"title":{},"body":{"injectables/AppService.html":{},"injectables/FileService.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["metadata",{"_index":2672,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"controllers/UsersController.html":{}}}],["metric",{"_index":670,"title":{"classes/Metric.html":{}},"body":{"injectables/DatabaseService.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"injectables/StandardService.html":{},"coverage.html":{}}}],["metric.bounds",{"_index":1373,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["metric.controller",{"_index":1405,"title":{},"body":{"modules/MetricModule.html":{}}}],["metric.id",{"_index":1361,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["metric.lowerboundmsg",{"_index":1371,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["metric.map(async",{"_index":1446,"title":{},"body":{"injectables/MetricService.html":{}}}],["metric.measurementunit",{"_index":1364,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["metric.metric_id",{"_index":1443,"title":{},"body":{"injectables/MetricService.html":{}}}],["metric.required",{"_index":1367,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["metric.service",{"_index":1394,"title":{},"body":{"controllers/MetricController.html":{},"modules/MetricModule.html":{}}}],["metric.status",{"_index":1365,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["metric.tag_id",{"_index":1995,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metric.tag_id).filter((tag_id",{"_index":2307,"title":{},"body":{"injectables/TagService.html":{}}}],["metric.title",{"_index":1362,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"injectables/RecordsService.html":{}}}],["metric.upperboundmsg",{"_index":1369,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["metric/metric.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"modules/RecordsModule.html":{},"modules/StandardModule.html":{}}}],["metric/metric.service",{"_index":2233,"title":{},"body":{"injectables/StandardService.html":{}}}],["metric_id",{"_index":911,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"injectables/StandardService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["metriccontract",{"_index":1392,"title":{},"body":{"controllers/MetricController.html":{}}}],["metriccontroller",{"_index":1374,"title":{"controllers/MetricController.html":{}},"body":{"controllers/MetricController.html":{},"modules/MetricModule.html":{},"coverage.html":{}}}],["metriccreaterequesttype",{"_index":1377,"title":{},"body":{"controllers/MetricController.html":{},"injectables/MetricService.html":{}}}],["metricdata",{"_index":2019,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricdata.metric_id",{"_index":2021,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricdata.value",{"_index":2020,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricdto",{"_index":1351,"title":{"interfaces/MetricDTO.html":{}},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"coverage.html":{}}}],["metricid",{"_index":656,"title":{},"body":{"classes/CreateStandardDto.html":{},"injectables/MetricService.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{}}}],["metricids",{"_index":2004,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricids.filter((id",{"_index":2010,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricids.length",{"_index":2008,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricmodule",{"_index":288,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"modules/RecordsModule.html":{},"modules/StandardModule.html":{},"modules.html":{},"overview.html":{}}}],["metricrecord",{"_index":1971,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricrecord.metric_id",{"_index":1974,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricrecord.tag_id",{"_index":1976,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricrecord.value",{"_index":1975,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricresponsetype",{"_index":1419,"title":{},"body":{"injectables/MetricService.html":{}}}],["metrics",{"_index":195,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RecordsService.html":{}}}],["metrics.find((m",{"_index":2011,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metrics.length",{"_index":2007,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricsdata",{"_index":1871,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricsdata.map((m",{"_index":2005,"title":{},"body":{"injectables/RecordsService.html":{}}}],["metricservice",{"_index":1393,"title":{"injectables/MetricService.html":{}},"body":{"controllers/MetricController.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"injectables/StandardService.html":{},"coverage.html":{},"overview.html":{}}}],["metricupdaterequesttype",{"_index":1388,"title":{},"body":{"controllers/MetricController.html":{},"injectables/MetricService.html":{}}}],["middleware",{"_index":2460,"title":{},"body":{"controllers/UsersController.html":{}}}],["miscellaneous",{"_index":2687,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missingmetricids",{"_index":2009,"title":{},"body":{"injectables/RecordsService.html":{}}}],["missingmetricids.join",{"_index":2014,"title":{},"body":{"injectables/RecordsService.html":{}}}],["mit",{"_index":2799,"title":{},"body":{"properties.html":{}}}],["mkdirsync(this.uploadpath",{"_index":833,"title":{},"body":{"injectables/FileService.html":{}}}],["module",{"_index":126,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":128,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":1045,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":1047,"title":{},"body":{"modules/MailModule.html":{}}}],["monorepo.pages.dev/membership",{"_index":1623,"title":{},"body":{"injectables/PaymentService.html":{}}}],["monorepo/contract",{"_index":40,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["month",{"_index":180,"title":{},"body":{"injectables/AdminService.html":{}}}],["monthlyrevenue",{"_index":261,"title":{},"body":{"injectables/AdminService.html":{}}}],["monthlyrevenue[month",{"_index":265,"title":{},"body":{"injectables/AdminService.html":{}}}],["months",{"_index":238,"title":{},"body":{"injectables/AdminService.html":{}}}],["more",{"_index":2701,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1236,"title":{},"body":{"modules/MediaModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":1233,"title":{},"body":{"modules/MediaModule.html":{}}}],["multermodule.register",{"_index":1238,"title":{},"body":{"modules/MediaModule.html":{}}}],["multiple",{"_index":244,"title":{},"body":{"injectables/AdminService.html":{}}}],["mylibyou",{"_index":2757,"title":{},"body":{"index.html":{}}}],["mún",{"_index":875,"title":{},"body":{"injectables/FileService.html":{}}}],["mục",{"_index":1221,"title":{},"body":{"controllers/MediaController.html":{}}}],["name",{"_index":20,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":256,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RecordsService.html":{}}}],["nestjs",{"_index":7,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":32,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":33,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"modules/MailModule.html":{},"injectables/PayosService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":35,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":991,"title":{},"body":{"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2355,"title":{},"body":{"classes/UpdateStandardDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1234,"title":{},"body":{"modules/MediaModule.html":{},"classes/SocketIoAdapter.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":2352,"title":{},"body":{"classes/UpdateReactionDto.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":2604,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":58,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"modules/MailModule.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newexpiresin",{"_index":1024,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["newexpiresin}s",{"_index":1026,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["newmedias",{"_index":1159,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["newmedias.length",{"_index":1163,"title":{},"body":{"controllers/MediaController.html":{}}}],["newrecord",{"_index":1899,"title":{},"body":{"injectables/RecordsService.html":{}}}],["newrecord.user_id",{"_index":1939,"title":{},"body":{"injectables/RecordsService.html":{}}}],["newrecord.visit_record_id",{"_index":1914,"title":{},"body":{"injectables/RecordsService.html":{}}}],["next_visit_doctor_date",{"_index":906,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["nextvisitdoctordate",{"_index":2122,"title":{},"body":{"injectables/ReminderService.html":{}}}],["nextvisitdoctordate.getdate()}/${nextvisitdoctordate.getmonth",{"_index":2134,"title":{},"body":{"injectables/ReminderService.html":{}}}],["ng",{"_index":2649,"title":{},"body":{"dependencies.html":{}}}],["ngx",{"_index":2652,"title":{},"body":{"dependencies.html":{}}}],["ngày",{"_index":2133,"title":{},"body":{"injectables/ReminderService.html":{}}}],["nh",{"_index":878,"title":{},"body":{"injectables/FileService.html":{}}}],["nodemailer",{"_index":2662,"title":{},"body":{"dependencies.html":{}}}],["noreply@gmail.com",{"_index":1090,"title":{},"body":{"injectables/MailService.html":{}}}],["note",{"_index":676,"title":{},"body":{"injectables/DatabaseService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{}}}],["note.content",{"_index":1536,"title":{},"body":{"injectables/NoteService.html":{}}}],["note.controller",{"_index":1506,"title":{},"body":{"modules/NoteModule.html":{}}}],["note.date",{"_index":1545,"title":{},"body":{"injectables/NoteService.html":{}}}],["note.note_id",{"_index":1544,"title":{},"body":{"injectables/NoteService.html":{}}}],["note.service",{"_index":1487,"title":{},"body":{"controllers/NoteController.html":{},"modules/NoteModule.html":{}}}],["note.status",{"_index":1538,"title":{},"body":{"injectables/NoteService.html":{}}}],["note.title",{"_index":1535,"title":{},"body":{"injectables/NoteService.html":{}}}],["note/note.module",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["note_id",{"_index":1541,"title":{},"body":{"injectables/NoteService.html":{}}}],["notecontract",{"_index":1484,"title":{},"body":{"controllers/NoteController.html":{}}}],["notecontroller",{"_index":1466,"title":{"controllers/NoteController.html":{}},"body":{"controllers/NoteController.html":{},"modules/NoteModule.html":{},"coverage.html":{}}}],["notecreaterequest",{"_index":1469,"title":{},"body":{"controllers/NoteController.html":{},"injectables/NoteService.html":{}}}],["noteexist",{"_index":1543,"title":{},"body":{"injectables/NoteService.html":{}}}],["noteid",{"_index":1522,"title":{},"body":{"injectables/NoteService.html":{}}}],["notemodule",{"_index":289,"title":{"modules/NoteModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NoteModule.html":{},"modules.html":{},"overview.html":{}}}],["noteresponse",{"_index":1525,"title":{},"body":{"injectables/NoteService.html":{}}}],["noteservice",{"_index":1486,"title":{"injectables/NoteService.html":{}},"body":{"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"coverage.html":{},"overview.html":{}}}],["noteupdaterequest",{"_index":1480,"title":{},"body":{"controllers/NoteController.html":{},"injectables/NoteService.html":{}}}],["notfoundexception",{"_index":433,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["notfoundexception('blog",{"_index":492,"title":{},"body":{"injectables/BlogsService.html":{}}}],["notfoundexception('category",{"_index":438,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{}}}],["notfoundexception('comment",{"_index":646,"title":{},"body":{"injectables/CommentsService.html":{}}}],["notfoundexception('email",{"_index":2504,"title":{},"body":{"controllers/UsersController.html":{}}}],["notfoundexception('file",{"_index":1216,"title":{},"body":{"controllers/MediaController.html":{}}}],["notfoundexception('hospital",{"_index":944,"title":{},"body":{"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"injectables/RecordsService.html":{}}}],["notfoundexception('media",{"_index":1228,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["notfoundexception('membership",{"_index":1340,"title":{},"body":{"injectables/MembershipsService.html":{},"injectables/PaymentService.html":{}}}],["notfoundexception('metric",{"_index":1457,"title":{},"body":{"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"injectables/StandardService.html":{}}}],["notfoundexception('note",{"_index":1542,"title":{},"body":{"injectables/NoteService.html":{}}}],["notfoundexception('payment",{"_index":1632,"title":{},"body":{"injectables/PaymentService.html":{}}}],["notfoundexception('phone",{"_index":2463,"title":{},"body":{"controllers/UsersController.html":{}}}],["notfoundexception('please",{"_index":1672,"title":{},"body":{"injectables/PayosService.html":{}}}],["notfoundexception('post",{"_index":1268,"title":{},"body":{"injectables/MediaService.html":{},"injectables/PostsService.html":{}}}],["notfoundexception('record",{"_index":1258,"title":{},"body":{"injectables/MediaService.html":{},"injectables/RecordsService.html":{}}}],["notfoundexception('standard",{"_index":2245,"title":{},"body":{"injectables/StandardService.html":{}}}],["notfoundexception('tag",{"_index":458,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/TagService.html":{}}}],["notfoundexception('token",{"_index":599,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/UsersController.html":{}}}],["notfoundexception('user",{"_index":1533,"title":{},"body":{"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/RecordsService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["notfoundexception(`the",{"_index":2012,"title":{},"body":{"injectables/RecordsService.html":{}}}],["now",{"_index":1019,"title":{},"body":{"injectables/JwtUtilsService.html":{},"index.html":{}}}],["npx",{"_index":2705,"title":{},"body":{"index.html":{}}}],["null",{"_index":907,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/TagService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["number",{"_index":262,"title":{},"body":{"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/CreateStandardDto.html":{},"classes/Hospital.html":{},"classes/Media-1.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ReactionService.html":{},"injectables/RecordsService.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/UsersController.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["number(date.now",{"_index":1648,"title":{},"body":{"controllers/PayosController.html":{}}}],["number(limit",{"_index":392,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"injectables/PostsService.html":{}}}],["number(new",{"_index":1609,"title":{},"body":{"injectables/PaymentService.html":{}}}],["number(old_expires_in.replace('d",{"_index":1020,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["number(page",{"_index":467,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/PostsService.html":{}}}],["number(pregnancyweek.tofixed(0",{"_index":2329,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["nx",{"_index":2697,"title":{},"body":{"index.html":{}}}],["nx/angular:app",{"_index":2753,"title":{},"body":{"index.html":{}}}],["nx/angular:lib",{"_index":2756,"title":{},"body":{"index.html":{}}}],["này",{"_index":850,"title":{},"body":{"injectables/FileService.html":{}}}],["nếu",{"_index":1207,"title":{},"body":{"controllers/MediaController.html":{}}}],["nữa",{"_index":861,"title":{},"body":{"injectables/FileService.html":{}}}],["oauth2",{"_index":2617,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":1113,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["object.constructor",{"_index":1116,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["oidc",{"_index":2618,"title":{},"body":{"dependencies.html":{}}}],["old_expires_in",{"_index":1016,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["once",{"_index":242,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RecordsService.html":{}}}],["operations",{"_index":1891,"title":{},"body":{"injectables/RecordsService.html":{}}}],["optional",{"_index":22,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1009,"title":{},"body":{"injectables/JwtUtilsService.html":{},"modules/MailModule.html":{},"classes/MatchConstraint.html":{},"classes/SocketIoAdapter.html":{}}}],["options.secret",{"_index":1013,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["orderby",{"_index":1726,"title":{},"body":{"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/TagService.html":{}}}],["ordercode",{"_index":1619,"title":{},"body":{"injectables/PaymentService.html":{},"controllers/PayosController.html":{}}}],["origin",{"_index":2178,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["out",{"_index":142,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":167,"title":{"overview.html":{}},"body":{"injectables/AdminService.html":{},"overview.html":{}}}],["package",{"_index":212,"title":{"dependencies.html":{},"properties.html":{}},"body":{"injectables/AdminService.html":{}}}],["package.json",{"_index":2736,"title":{},"body":{"index.html":{}}}],["packages",{"_index":232,"title":{},"body":{"injectables/AdminService.html":{},"index.html":{}}}],["page",{"_index":363,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["param",{"_index":380,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/ReactionController.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":2494,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"classes/TokenDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":809,"title":{},"body":{"injectables/FileService.html":{}}}],["parseint(uuid.slice(0",{"_index":1084,"title":{},"body":{"injectables/MailService.html":{}}}],["parser",{"_index":2642,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":2351,"title":{},"body":{"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{}}}],["partialtype(createreactiondto",{"_index":2350,"title":{},"body":{"classes/UpdateReactionDto.html":{}}}],["partialtype(createstandarddto",{"_index":2354,"title":{},"body":{"classes/UpdateStandardDto.html":{}}}],["particular",{"_index":2760,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1060,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":1094,"title":{},"body":{"injectables/MailService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["patch",{"_index":1753,"title":{},"body":{"controllers/ReactionController.html":{}}}],["patch(':id",{"_index":1751,"title":{},"body":{"controllers/ReactionController.html":{}}}],["path",{"_index":793,"title":{},"body":{"injectables/FileService.html":{},"modules/MailModule.html":{}}}],["payincludeuserinfo",{"_index":1597,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payload",{"_index":1008,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["payment",{"_index":171,"title":{},"body":{"injectables/AdminService.html":{},"injectables/DatabaseService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["payment.controller",{"_index":1581,"title":{},"body":{"modules/PaymentModule.html":{}}}],["payment.expired_at",{"_index":198,"title":{},"body":{"injectables/AdminService.html":{}}}],["payment.membership.duration_days",{"_index":1638,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payment.payment_history_id",{"_index":1635,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payment.service",{"_index":1569,"title":{},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{}}}],["payment.value",{"_index":221,"title":{},"body":{"injectables/AdminService.html":{}}}],["payment/payment.module",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["payment_history_id",{"_index":1634,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payment_method",{"_index":1614,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payment_url",{"_index":1628,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentcontract",{"_index":1567,"title":{},"body":{"controllers/PaymentController.html":{}}}],["paymentcontroller",{"_index":1551,"title":{"controllers/PaymentController.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"coverage.html":{}}}],["paymentcreaterequesttype",{"_index":1557,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentdate",{"_index":207,"title":{},"body":{"injectables/AdminService.html":{}}}],["paymentdate.getfullyear",{"_index":210,"title":{},"body":{"injectables/AdminService.html":{}}}],["paymentdate.getmonth",{"_index":209,"title":{},"body":{"injectables/AdminService.html":{}}}],["paymentmodule",{"_index":290,"title":{"modules/PaymentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules.html":{},"overview.html":{}}}],["paymentrequest",{"_index":1560,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymentrequest.payos_order_code",{"_index":1631,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymentresponsewithlinktype",{"_index":1598,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payments",{"_index":176,"title":{},"body":{"injectables/AdminService.html":{},"controllers/PaymentController.html":{}}}],["paymentservice",{"_index":1568,"title":{"injectables/PaymentService.html":{}},"body":{"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"coverage.html":{},"overview.html":{}}}],["paymentupdaterequesttype",{"_index":1564,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["paymenturl",{"_index":1626,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymenturl.checkouturl",{"_index":1629,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymethod",{"_index":1599,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paymethod.payos",{"_index":1615,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payos",{"_index":1664,"title":{},"body":{"injectables/PayosService.html":{}}}],["payos(payos_client_id",{"_index":1674,"title":{},"body":{"injectables/PayosService.html":{}}}],["payos.controller",{"_index":1658,"title":{},"body":{"modules/PayosModule.html":{}}}],["payos.createpaymentlink(payoscreaterequest",{"_index":1675,"title":{},"body":{"injectables/PayosService.html":{}}}],["payos.service",{"_index":1644,"title":{},"body":{"controllers/PayosController.html":{},"modules/PayosModule.html":{}}}],["payos/node",{"_index":1665,"title":{},"body":{"injectables/PayosService.html":{},"dependencies.html":{}}}],["payos/node/lib/type",{"_index":1596,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/PayosService.html":{}}}],["payos/payos.module",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{}}}],["payos/payos.service",{"_index":1602,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payos_api_key",{"_index":1668,"title":{},"body":{"injectables/PayosService.html":{}}}],["payos_checksum_key",{"_index":1670,"title":{},"body":{"injectables/PayosService.html":{}}}],["payos_client_id",{"_index":1666,"title":{},"body":{"injectables/PayosService.html":{}}}],["payos_order_code",{"_index":1616,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payoscontroller",{"_index":1642,"title":{"controllers/PayosController.html":{}},"body":{"controllers/PayosController.html":{},"modules/PayosModule.html":{},"coverage.html":{}}}],["payoscreaterequest",{"_index":1647,"title":{},"body":{"controllers/PayosController.html":{},"injectables/PayosService.html":{}}}],["payoscreateresponse",{"_index":1651,"title":{},"body":{"controllers/PayosController.html":{}}}],["payosmodule",{"_index":291,"title":{"modules/PayosModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules.html":{},"overview.html":{}}}],["payosordercode",{"_index":1608,"title":{},"body":{"injectables/PaymentService.html":{}}}],["payosservice",{"_index":1586,"title":{"injectables/PayosService.html":{}},"body":{"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"coverage.html":{},"overview.html":{}}}],["payrequest",{"_index":1618,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paystatus",{"_index":1600,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paystatus.failed",{"_index":1613,"title":{},"body":{"injectables/PaymentService.html":{}}}],["paystatus.success",{"_index":1636,"title":{},"body":{"injectables/PaymentService.html":{}}}],["per",{"_index":254,"title":{},"body":{"injectables/AdminService.html":{}}}],["perfect",{"_index":2664,"title":{},"body":{"dependencies.html":{}}}],["permission",{"_index":100,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["phone",{"_index":1641,"title":{},"body":{"injectables/PaymentService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["plaintext",{"_index":1097,"title":{},"body":{"injectables/MailService.html":{}}}],["plugin",{"_index":2761,"title":{},"body":{"index.html":{}}}],["plugin's",{"_index":2748,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":2745,"title":{},"body":{"index.html":{}}}],["port",{"_index":1054,"title":{},"body":{"modules/MailModule.html":{},"classes/SocketIoAdapter.html":{}}}],["post",{"_index":640,"title":{},"body":{"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/MediaService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"classes/SocketIoAdapter.html":{}}}],["post_id",{"_index":585,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/Hospital.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/PostsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["postcontract",{"_index":1694,"title":{},"body":{"controllers/PostsController.html":{}}}],["postcreatetype",{"_index":1679,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts",{"_index":1700,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":1711,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.length",{"_index":1702,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.service",{"_index":1695,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{}}}],["posts/posts.service",{"_index":635,"title":{},"body":{"injectables/CommentsService.html":{}}}],["postscontroller",{"_index":1676,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":620,"title":{},"body":{"injectables/CommentsService.html":{}}}],["postsmodule",{"_index":292,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":621,"title":{"injectables/PostsService.html":{}},"body":{"injectables/CommentsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":1721,"title":{},"body":{"injectables/PostsService.html":{}}}],["postupdatetype",{"_index":1690,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["prefix",{"_index":1029,"title":{},"body":{"controllers/MailController.html":{},"controllers/ReactionController.html":{}}}],["pregnancy",{"_index":38,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["pregnancyjournal",{"_index":2695,"title":{},"body":{"index.html":{}}}],["pregnancyweek",{"_index":2326,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["premium",{"_index":258,"title":{},"body":{"injectables/AdminService.html":{}}}],["presign",{"_index":853,"title":{},"body":{"injectables/FileService.html":{}}}],["presigner",{"_index":783,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["prevent",{"_index":243,"title":{},"body":{"injectables/AdminService.html":{}}}],["price",{"_index":1333,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["primeicons",{"_index":2667,"title":{},"body":{"dependencies.html":{}}}],["primeng",{"_index":2669,"title":{},"body":{"dependencies.html":{}}}],["primeng/themes",{"_index":2606,"title":{},"body":{"dependencies.html":{}}}],["primeui",{"_index":2678,"title":{},"body":{"dependencies.html":{}}}],["prisma",{"_index":666,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["prisma/client",{"_index":717,"title":{},"body":{"injectables/DatabaseService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":679,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["private",{"_index":49,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MetricService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"injectables/StandardService.html":{}}}],["process",{"_index":1904,"title":{},"body":{"injectables/RecordsService.html":{}}}],["process.env.fe_url",{"_index":2179,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["production",{"_index":2724,"title":{},"body":{"index.html":{}}}],["project",{"_index":2730,"title":{},"body":{"index.html":{}}}],["project.json",{"_index":2735,"title":{},"body":{"index.html":{}}}],["projects",{"_index":2741,"title":{},"body":{"index.html":{}}}],["promise",{"_index":158,"title":{},"body":{"injectables/AdminService.html":{},"injectables/BlogsService.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":884,"title":{},"body":{"injectables/FileService.html":{}}}],["promise.all",{"_index":1172,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{}}}],["promise.all(media.map((m",{"_index":1194,"title":{},"body":{"controllers/MediaController.html":{}}}],["promise.all(media_urls.map((m",{"_index":1168,"title":{},"body":{"controllers/MediaController.html":{}}}],["promise.all(newmedias.map((m",{"_index":1165,"title":{},"body":{"controllers/MediaController.html":{}}}],["promise.all(tags_id.map((tag_id",{"_index":2308,"title":{},"body":{"injectables/TagService.html":{}}}],["properties",{"_index":513,"title":{"properties.html":{}},"body":{"classes/Category.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"classes/HospitalEntity.html":{},"interfaces/JwtPayload.html":{},"classes/Media-1.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"classes/Standard.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"properties.html":{}}}],["property",{"_index":1118,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["propertyname",{"_index":1114,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["provide",{"_index":1673,"title":{},"body":{"injectables/PayosService.html":{}}}],["provided",{"_index":1157,"title":{},"body":{"controllers/MediaController.html":{},"injectables/RecordsService.html":{}}}],["providers",{"_index":133,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["province",{"_index":2361,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["public",{"_index":1837,"title":{},"body":{"injectables/RecordsService.html":{}}}],["purchase",{"_index":213,"title":{},"body":{"injectables/AdminService.html":{}}}],["purchased",{"_index":233,"title":{},"body":{"injectables/AdminService.html":{}}}],["putobjectcommand",{"_index":774,"title":{},"body":{"injectables/FileService.html":{}}}],["queries",{"_index":246,"title":{},"body":{"injectables/AdminService.html":{}}}],["query",{"_index":381,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{}}}],["query('limit",{"_index":389,"title":{},"body":{"controllers/BlogsController.html":{},"controllers/PostsController.html":{}}}],["query('page",{"_index":394,"title":{},"body":{"controllers/BlogsController.html":{}}}],["quill",{"_index":2658,"title":{},"body":{"dependencies.html":{}}}],["r2",{"_index":818,"title":{},"body":{"injectables/FileService.html":{}}}],["race",{"_index":1907,"title":{},"body":{"injectables/RecordsService.html":{}}}],["re",{"_index":946,"title":{},"body":{"controllers/HospitalController.html":{}}}],["react",{"_index":1735,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":1738,"title":{"classes/Reaction.html":{}},"body":{"classes/Reaction.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"coverage.html":{}}}],["reaction.controller",{"_index":1771,"title":{},"body":{"modules/ReactionModule.html":{}}}],["reaction.dto",{"_index":1755,"title":{},"body":{"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"classes/UpdateReactionDto.html":{}}}],["reaction.dto.ts",{"_index":651,"title":{},"body":{"classes/CreateReactionDto.html":{},"classes/UpdateReactionDto.html":{},"coverage.html":{}}}],["reaction.service",{"_index":1758,"title":{},"body":{"controllers/ReactionController.html":{},"modules/ReactionModule.html":{}}}],["reaction/reaction.module",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["reactioncontroller",{"_index":1740,"title":{"controllers/ReactionController.html":{}},"body":{"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"coverage.html":{}}}],["reactionmodule",{"_index":293,"title":{"modules/ReactionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ReactionModule.html":{},"modules.html":{},"overview.html":{}}}],["reactionservice",{"_index":1757,"title":{"injectables/ReactionService.html":{}},"body":{"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"coverage.html":{},"overview.html":{}}}],["readonly",{"_index":50,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":2699,"title":{},"body":{"index.html":{}}}],["receivers",{"_index":1089,"title":{},"body":{"injectables/MailService.html":{}}}],["record",{"_index":674,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/MediaService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["record.data",{"_index":1896,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.data.length",{"_index":1940,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.doctor_name",{"_index":1903,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.hospital",{"_index":1980,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.hospital_id",{"_index":1894,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.media.map((m",{"_index":1981,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.next_visit_doctor_date",{"_index":1902,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.user_id",{"_index":1960,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.visit_doctor_date",{"_index":1901,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.visit_record_id",{"_index":1930,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.visit_record_metric.map(async",{"_index":1970,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record[0",{"_index":1824,"title":{},"body":{"controllers/RecordsController.html":{}}}],["record_id",{"_index":1155,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["recordcontract",{"_index":1806,"title":{},"body":{"controllers/RecordsController.html":{}}}],["recordcreaterequest",{"_index":1790,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["recordid",{"_index":1852,"title":{},"body":{"injectables/RecordsService.html":{}}}],["recordmetric",{"_index":675,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["recordresponse",{"_index":1884,"title":{},"body":{"injectables/RecordsService.html":{}}}],["records",{"_index":1857,"title":{},"body":{"injectables/RecordsService.html":{}}}],["records.controller",{"_index":1832,"title":{},"body":{"modules/RecordsModule.html":{}}}],["records.length",{"_index":1920,"title":{},"body":{"injectables/RecordsService.html":{}}}],["records.map(async",{"_index":1963,"title":{},"body":{"injectables/RecordsService.html":{}}}],["records.service",{"_index":1808,"title":{},"body":{"controllers/RecordsController.html":{},"modules/RecordsModule.html":{}}}],["records/records.module",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["recordscontroller",{"_index":1782,"title":{"controllers/RecordsController.html":{}},"body":{"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"coverage.html":{}}}],["recordservice",{"_index":1809,"title":{},"body":{"controllers/RecordsController.html":{}}}],["recordsmodule",{"_index":294,"title":{"modules/RecordsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecordsModule.html":{},"modules.html":{},"overview.html":{}}}],["recordsservice",{"_index":1807,"title":{"injectables/RecordsService.html":{}},"body":{"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"coverage.html":{},"overview.html":{}}}],["recordupdaterequest",{"_index":1803,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["recursive",{"_index":834,"title":{},"body":{"injectables/FileService.html":{}}}],["reduce((sum",{"_index":225,"title":{},"body":{"injectables/AdminService.html":{}}}],["reflect",{"_index":2671,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":34,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["refresh",{"_index":2480,"title":{},"body":{"controllers/UsersController.html":{}}}],["refresh_token",{"_index":2332,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"controllers/UsersController.html":{}}}],["refresh_token_id",{"_index":2478,"title":{},"body":{"controllers/UsersController.html":{}}}],["refreshtokenauthguard",{"_index":81,"title":{"guards/RefreshTokenAuthGuard.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"modules/AuthModule.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["refreshtokenrequest",{"_index":36,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["refreshtokenrequest).refresh_token",{"_index":83,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["region",{"_index":804,"title":{},"body":{"injectables/FileService.html":{}}}],["registerdecorator",{"_index":1108,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["registered",{"_index":2468,"title":{},"body":{"controllers/UsersController.html":{}}}],["registerrequest",{"_index":2442,"title":{},"body":{"controllers/UsersController.html":{}}}],["registry",{"_index":2768,"title":{},"body":{"index.html":{}}}],["reject",{"_index":885,"title":{},"body":{"injectables/FileService.html":{}}}],["relatedpropertyname",{"_index":1120,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["relatedvalue",{"_index":1122,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["release",{"_index":2782,"title":{},"body":{"index.html":{}}}],["releasing",{"_index":2781,"title":{},"body":{"index.html":{}}}],["remind_date",{"_index":2035,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{}}}],["remind_date.setdate(remind_date.getdate",{"_index":2125,"title":{},"body":{"injectables/ReminderService.html":{}}}],["reminder",{"_index":668,"title":{"interfaces/Reminder.html":{}},"body":{"injectables/DatabaseService.html":{},"injectables/RecordsService.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"coverage.html":{}}}],["reminder.controller",{"_index":2104,"title":{},"body":{"modules/ReminderModule.html":{}}}],["reminder.reminder_id",{"_index":2151,"title":{},"body":{"injectables/ReminderService.html":{}}}],["reminder.service",{"_index":2071,"title":{},"body":{"controllers/ReminderController.html":{},"modules/ReminderModule.html":{}}}],["reminder/reminder.module",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"modules/RecordsModule.html":{}}}],["reminder/reminder.service",{"_index":1886,"title":{},"body":{"injectables/RecordsService.html":{}}}],["reminder_content",{"_index":2126,"title":{},"body":{"injectables/ReminderService.html":{}}}],["reminder_id",{"_index":2147,"title":{},"body":{"injectables/ReminderService.html":{}}}],["remindercontract",{"_index":2070,"title":{},"body":{"controllers/ReminderController.html":{}}}],["remindercontroller",{"_index":2050,"title":{"controllers/ReminderController.html":{}},"body":{"controllers/ReminderController.html":{},"modules/ReminderModule.html":{},"coverage.html":{}}}],["remindercreaterequest",{"_index":2055,"title":{},"body":{"controllers/ReminderController.html":{},"injectables/ReminderService.html":{}}}],["reminderdata",{"_index":2092,"title":{},"body":{"classes/ReminderEntity.html":{}}}],["reminderdata.content",{"_index":2044,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["reminderdata.id",{"_index":2039,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["reminderdata.remind_date",{"_index":2046,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["reminderdata.status",{"_index":2049,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["reminderdata.title",{"_index":2040,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["reminderdata.type",{"_index":2042,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["reminderdata.user_id",{"_index":2048,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["reminderentity",{"_index":2037,"title":{"classes/ReminderEntity.html":{}},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"coverage.html":{}}}],["remindermodule",{"_index":295,"title":{"modules/ReminderModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules.html":{},"overview.html":{}}}],["reminderresponse",{"_index":2121,"title":{},"body":{"injectables/ReminderService.html":{}}}],["reminders",{"_index":2077,"title":{},"body":{"controllers/ReminderController.html":{}}}],["reminderservice",{"_index":1844,"title":{"injectables/ReminderService.html":{}},"body":{"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"coverage.html":{},"overview.html":{}}}],["remindertype",{"_index":2036,"title":{},"body":{"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{}}}],["remindertype.follow_up_meeting",{"_index":2085,"title":{},"body":{"controllers/ReminderController.html":{},"injectables/ReminderService.html":{}}}],["remindertype.user_created_event",{"_index":2143,"title":{},"body":{"injectables/ReminderService.html":{}}}],["reminderupdaterequest",{"_index":2067,"title":{},"body":{"controllers/ReminderController.html":{},"injectables/ReminderService.html":{}}}],["remove",{"_index":414,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["remove(@param('id",{"_index":1766,"title":{},"body":{"controllers/ReactionController.html":{}}}],["remove(id",{"_index":429,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["removes",{"_index":1781,"title":{},"body":{"injectables/ReactionService.html":{}}}],["reply",{"_index":1063,"title":{},"body":{"modules/MailModule.html":{}}}],["req",{"_index":576,"title":{},"body":{"controllers/CommentsController.html":{},"modules/MediaModule.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["req.decoded_authorization",{"_index":598,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["req.decoded_authorization.user_id",{"_index":602,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/NoteController.html":{}}}],["req.decoded_authorization?.user_id",{"_index":1697,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["req.decoded_refresh_token",{"_index":2486,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":52,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"controllers/RecordsController.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"dependencies.html":{}}}],["request.body",{"_index":82,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["request.decoded_authorization",{"_index":69,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"controllers/RecordsController.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["request.decoded_authorization.user_id",{"_index":1815,"title":{},"body":{"controllers/RecordsController.html":{}}}],["request.decoded_email_verify",{"_index":79,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["request.decoded_refresh_token",{"_index":89,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["request.headers.authorization?.split",{"_index":55,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["request.query.email_verify_token",{"_index":76,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["requestwithjwt",{"_index":41,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/CommentsController.html":{},"guards/IsLoggin.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"guards/RoleAuthGuard.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":62,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["requiredroles",{"_index":91,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["requiredroles.includes(decoded_authorization.role",{"_index":97,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["res",{"_index":1212,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MembershipsService.html":{}}}],["res.send",{"_index":840,"title":{},"body":{"injectables/FileService.html":{}}}],["res.sendfile(await",{"_index":1213,"title":{},"body":{"controllers/MediaController.html":{}}}],["reset",{"_index":141,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetcode",{"_index":1099,"title":{},"body":{"injectables/MailService.html":{}}}],["resetpassword",{"_index":1071,"title":{},"body":{"injectables/MailService.html":{}}}],["resetpassword(user",{"_index":1075,"title":{},"body":{"injectables/MailService.html":{}}}],["resolve(buffer.concat(chunks",{"_index":891,"title":{},"body":{"injectables/FileService.html":{}}}],["response",{"_index":820,"title":{},"body":{"injectables/FileService.html":{},"injectables/RecordsService.html":{}}}],["response.body",{"_index":822,"title":{},"body":{"injectables/FileService.html":{}}}],["rest/core",{"_index":2611,"title":{},"body":{"dependencies.html":{}}}],["rest/nest",{"_index":115,"title":{},"body":{"controllers/AdminController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["rest/open",{"_index":2613,"title":{},"body":{"dependencies.html":{}}}],["result",{"_index":386,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/HospitalService.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["result.author",{"_index":498,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.blog_cover",{"_index":502,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.blog_id",{"_index":495,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.blog_tag.map((item",{"_index":493,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.category",{"_index":503,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.content",{"_index":497,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.created_at",{"_index":500,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.length",{"_index":1922,"title":{},"body":{"injectables/RecordsService.html":{}}}],["result.map((blog",{"_index":475,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.push(...create_result",{"_index":1183,"title":{},"body":{"controllers/MediaController.html":{}}}],["result.push(...deleted_result",{"_index":1190,"title":{},"body":{"controllers/MediaController.html":{}}}],["result.standard",{"_index":2243,"title":{},"body":{"injectables/StandardService.html":{}}}],["result.summary",{"_index":499,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.title",{"_index":496,"title":{},"body":{"injectables/BlogsService.html":{}}}],["result.updated_at",{"_index":501,"title":{},"body":{"injectables/BlogsService.html":{}}}],["results",{"_index":102,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":70,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":27,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"controllers/MetricController.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["returnurl",{"_index":1621,"title":{},"body":{"injectables/PaymentService.html":{},"controllers/PayosController.html":{}}}],["revenue",{"_index":217,"title":{},"body":{"injectables/AdminService.html":{}}}],["role",{"_index":95,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["roleauthguard",{"_index":90,"title":{"guards/RoleAuthGuard.html":{}},"body":{"guards/AccessTokenAuthGuard.html":{},"modules/AuthModule.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"coverage.html":{}}}],["roles",{"_index":2567,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles(userrole.admin",{"_index":2490,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles_key",{"_index":43,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":2704,"title":{},"body":{"index.html":{}}}],["running",{"_index":2738,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2674,"title":{},"body":{"dependencies.html":{}}}],["rồi",{"_index":1733,"title":{},"body":{"injectables/PostsService.html":{}}}],["s",{"_index":2458,"title":{},"body":{"controllers/UsersController.html":{}}}],["s.week",{"_index":1993,"title":{},"body":{"injectables/RecordsService.html":{}}}],["s3",{"_index":777,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["s3client",{"_index":743,"title":{},"body":{"injectables/FileService.html":{}}}],["sau",{"_index":1205,"title":{},"body":{"controllers/MediaController.html":{},"injectables/PostsService.html":{}}}],["save",{"_index":845,"title":{},"body":{"injectables/FileService.html":{}}}],["saved",{"_index":841,"title":{},"body":{"injectables/FileService.html":{}}}],["schema",{"_index":250,"title":{},"body":{"injectables/AdminService.html":{}}}],["scroll",{"_index":2657,"title":{},"body":{"dependencies.html":{}}}],["scrollbar",{"_index":2665,"title":{},"body":{"dependencies.html":{}}}],["sdk/client",{"_index":776,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["sdk/lib",{"_index":779,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":782,"title":{},"body":{"injectables/FileService.html":{},"dependencies.html":{}}}],["secret",{"_index":66,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["secretaccesskey",{"_index":807,"title":{},"body":{"injectables/FileService.html":{}}}],["secretkey",{"_index":798,"title":{},"body":{"injectables/FileService.html":{}}}],["secure",{"_index":1057,"title":{},"body":{"modules/MailModule.html":{}}}],["see",{"_index":2727,"title":{},"body":{"index.html":{}}}],["select",{"_index":1639,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/RecordsService.html":{}}}],["sender",{"_index":1091,"title":{},"body":{"injectables/MailService.html":{}}}],["sent",{"_index":1215,"title":{},"body":{"controllers/MediaController.html":{}}}],["sequentially",{"_index":1905,"title":{},"body":{"injectables/RecordsService.html":{}}}],["serve",{"_index":2721,"title":{},"body":{"index.html":{}}}],["server",{"_index":2175,"title":{},"body":{"classes/SocketIoAdapter.html":{},"index.html":{}}}],["serveroptions",{"_index":2170,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["set",{"_index":802,"title":{},"body":{"injectables/FileService.html":{}}}],["setmetadata(roles_key",{"_index":2803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":2717,"title":{},"body":{"index.html":{}}}],["setup",{"_index":2702,"title":{},"body":{"index.html":{}}}],["shiny",{"_index":2696,"title":{},"body":{"index.html":{}}}],["show",{"_index":2731,"title":{},"body":{"index.html":{}}}],["signtoken",{"_index":995,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["signtoken(undefined",{"_index":1002,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["simplified",{"_index":1978,"title":{},"body":{"injectables/RecordsService.html":{}}}],["skip",{"_index":466,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/PostsService.html":{}}}],["socket.io",{"_index":2173,"title":{},"body":{"classes/SocketIoAdapter.html":{},"dependencies.html":{}}}],["socketioadapter",{"_index":2160,"title":{"classes/SocketIoAdapter.html":{}},"body":{"classes/SocketIoAdapter.html":{},"coverage.html":{}}}],["sorted",{"_index":1987,"title":{},"body":{"injectables/RecordsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"controllers/BlogsController.html":{},"modules/BlogsModule.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"modules/CategorysModule.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"injectables/CommentsService.html":{},"classes/CreateReactionDto.html":{},"classes/CreateStandardDto.html":{},"injectables/DatabaseService.html":{},"modules/FileModule.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"modules/HospitalModule.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"modules/JwtUtilsModule.html":{},"injectables/JwtUtilsService.html":{},"controllers/MailController.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"modules/MembershipsModule.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"modules/MetricModule.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"modules/NoteModule.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"modules/PaymentModule.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"modules/PayosModule.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/Reaction.html":{},"controllers/ReactionController.html":{},"modules/ReactionModule.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"modules/ReminderModule.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateReactionDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["specific",{"_index":2759,"title":{},"body":{"index.html":{}}}],["speed",{"_index":2712,"title":{},"body":{"index.html":{}}}],["splide",{"_index":2660,"title":{},"body":{"dependencies.html":{}}}],["splidejs/splide",{"_index":2609,"title":{},"body":{"dependencies.html":{}}}],["standard",{"_index":669,"title":{"classes/Standard.html":{}},"body":{"injectables/DatabaseService.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"coverage.html":{}}}],["standard.controller",{"_index":2219,"title":{},"body":{"modules/StandardModule.html":{}}}],["standard.dto",{"_index":2357,"title":{},"body":{"classes/UpdateStandardDto.html":{}}}],["standard.dto.ts",{"_index":654,"title":{},"body":{"classes/CreateStandardDto.html":{},"classes/UpdateStandardDto.html":{},"coverage.html":{}}}],["standard.dto.ts:2",{"_index":661,"title":{},"body":{"classes/CreateStandardDto.html":{}}}],["standard.dto.ts:3",{"_index":663,"title":{},"body":{"classes/CreateStandardDto.html":{}}}],["standard.dto.ts:4",{"_index":662,"title":{},"body":{"classes/CreateStandardDto.html":{}}}],["standard.dto.ts:5",{"_index":660,"title":{},"body":{"classes/CreateStandardDto.html":{},"classes/UpdateStandardDto.html":{}}}],["standard.dto.ts:6",{"_index":664,"title":{},"body":{"classes/CreateStandardDto.html":{}}}],["standard.service",{"_index":2208,"title":{},"body":{"controllers/StandardController.html":{},"modules/StandardModule.html":{}}}],["standard.standard_id",{"_index":2030,"title":{},"body":{"injectables/RecordsService.html":{}}}],["standard/entities/standard.entity",{"_index":1360,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["standard/standard.module",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["standard/standard.service",{"_index":1830,"title":{},"body":{"modules/RecordsModule.html":{}}}],["standard_id",{"_index":1977,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/StandardService.html":{}}}],["standardcontract",{"_index":2207,"title":{},"body":{"controllers/StandardController.html":{}}}],["standardcontroller",{"_index":2189,"title":{"controllers/StandardController.html":{}},"body":{"controllers/StandardController.html":{},"modules/StandardModule.html":{},"coverage.html":{}}}],["standardcreaterequest",{"_index":2193,"title":{},"body":{"controllers/StandardController.html":{},"injectables/StandardService.html":{}}}],["standardid",{"_index":1972,"title":{},"body":{"injectables/RecordsService.html":{},"controllers/StandardController.html":{}}}],["standardmodule",{"_index":296,"title":{"modules/StandardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StandardModule.html":{},"modules.html":{},"overview.html":{}}}],["standards",{"_index":1985,"title":{},"body":{"injectables/RecordsService.html":{}}}],["standards.filter((s",{"_index":1998,"title":{},"body":{"injectables/RecordsService.html":{}}}],["standards.find((s",{"_index":2029,"title":{},"body":{"injectables/RecordsService.html":{}}}],["standards.length",{"_index":1988,"title":{},"body":{"injectables/RecordsService.html":{}}}],["standards[standards.length",{"_index":2026,"title":{},"body":{"injectables/RecordsService.html":{}}}],["standardservice",{"_index":1421,"title":{"injectables/StandardService.html":{}},"body":{"injectables/MetricService.html":{},"modules/RecordsModule.html":{},"controllers/StandardController.html":{},"modules/StandardModule.html":{},"injectables/StandardService.html":{},"coverage.html":{},"overview.html":{}}}],["standardupdatereq",{"_index":2203,"title":{},"body":{"controllers/StandardController.html":{},"injectables/StandardService.html":{}}}],["started",{"_index":2694,"title":{"index.html":{}},"body":{}}],["statements",{"_index":2541,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":123,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PayosController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["status.active",{"_index":2137,"title":{},"body":{"injectables/ReminderService.html":{}}}],["still",{"_index":257,"title":{},"body":{"injectables/AdminService.html":{}}}],["storage",{"_index":780,"title":{},"body":{"injectables/FileService.html":{},"modules/MediaModule.html":{},"dependencies.html":{}}}],["stream",{"_index":2693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stream.on('data",{"_index":887,"title":{},"body":{"injectables/FileService.html":{}}}],["stream.on('end",{"_index":890,"title":{},"body":{"injectables/FileService.html":{}}}],["stream.on('error",{"_index":892,"title":{},"body":{"injectables/FileService.html":{}}}],["streamtobuffer",{"_index":2551,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["streamtobuffer(file",{"_index":827,"title":{},"body":{"injectables/FileService.html":{}}}],["streamtobuffer(stream",{"_index":883,"title":{},"body":{"injectables/FileService.html":{},"miscellaneous/functions.html":{}}}],["strict",{"_index":1068,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":328,"title":{},"body":{"injectables/AppService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateStandardDto.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtUtilsService.html":{},"classes/MatchConstraint.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string(payosordercode",{"_index":1617,"title":{},"body":{"injectables/PaymentService.html":{}}}],["structure",{"_index":1979,"title":{},"body":{"injectables/RecordsService.html":{}}}],["subject",{"_index":1093,"title":{},"body":{"injectables/MailService.html":{}}}],["subscriber",{"_index":194,"title":{},"body":{"injectables/AdminService.html":{}}}],["subscriberdata",{"_index":241,"title":{},"body":{"injectables/AdminService.html":{}}}],["subscriberdata[month",{"_index":260,"title":{},"body":{"injectables/AdminService.html":{}}}],["subscribers",{"_index":205,"title":{},"body":{"injectables/AdminService.html":{}}}],["success",{"_index":1851,"title":{},"body":{"injectables/RecordsService.html":{}}}],["successful",{"_index":175,"title":{},"body":{"injectables/AdminService.html":{}}}],["successfully",{"_index":842,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["sum",{"_index":220,"title":{},"body":{"injectables/AdminService.html":{}}}],["summary",{"_index":447,"title":{},"body":{"injectables/BlogsService.html":{}}}],["super(app",{"_index":2174,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["super.createioserver(port",{"_index":2176,"title":{},"body":{"classes/SocketIoAdapter.html":{}}}],["support",{"_index":2790,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":2791,"title":{},"body":{"modules.html":{}}}],["table",{"_index":2570,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2569,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":456,"title":{"classes/Tag.html":{}},"body":{"injectables/BlogsService.html":{},"injectables/DatabaseService.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"classes/Tag.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["tag.controller",{"_index":2285,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.service",{"_index":2273,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag.tag_id",{"_index":1444,"title":{},"body":{"injectables/MetricService.html":{}}}],["tag_id",{"_index":425,"title":{},"body":{"injectables/BlogsService.html":{},"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"injectables/TagService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["tagcontract",{"_index":2272,"title":{},"body":{"controllers/TagController.html":{}}}],["tagcontroller",{"_index":2250,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagcreaterequest",{"_index":2254,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tagid",{"_index":371,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/RecordsService.html":{}}}],["tagmodule",{"_index":297,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"modules/RecordsModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tagresponse",{"_index":2298,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":485,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/TagService.html":{}}}],["tags.filter((tag",{"_index":2309,"title":{},"body":{"injectables/TagService.html":{}}}],["tags/tag.module",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"modules/RecordsModule.html":{}}}],["tags/tag.service",{"_index":1420,"title":{},"body":{"injectables/MetricService.html":{}}}],["tags_id",{"_index":2305,"title":{},"body":{"injectables/TagService.html":{}}}],["tagservice",{"_index":1408,"title":{"injectables/TagService.html":{}},"body":{"injectables/MetricService.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["tagupdaterequest",{"_index":2268,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["tailwindcss",{"_index":2677,"title":{},"body":{"dependencies.html":{}}}],["take",{"_index":468,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/PostsService.html":{}}}],["target",{"_index":1115,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["targets",{"_index":2729,"title":{},"body":{"index.html":{}}}],["tasks",{"_index":2718,"title":{},"body":{"index.html":{}}}],["template",{"_index":1064,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["text",{"_index":1096,"title":{},"body":{"injectables/MailService.html":{}}}],["th",{"_index":1220,"title":{},"body":{"controllers/MediaController.html":{}}}],["thai",{"_index":2325,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["this.address",{"_index":2385,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.adminservice.getdashboard",{"_index":122,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.appservice.getdata",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["this.blogsservice.create(createblogdto",{"_index":387,"title":{},"body":{"controllers/BlogsController.html":{}}}],["this.blogsservice.findall(number(page",{"_index":391,"title":{},"body":{"controllers/BlogsController.html":{}}}],["this.blogsservice.findbycategory",{"_index":395,"title":{},"body":{"controllers/BlogsController.html":{}}}],["this.blogsservice.findbytag(page",{"_index":397,"title":{},"body":{"controllers/BlogsController.html":{}}}],["this.blogsservice.findone(id",{"_index":399,"title":{},"body":{"controllers/BlogsController.html":{}}}],["this.blogsservice.remove(id",{"_index":403,"title":{},"body":{"controllers/BlogsController.html":{}}}],["this.blogsservice.update(updateblogdto",{"_index":401,"title":{},"body":{"controllers/BlogsController.html":{}}}],["this.bounds",{"_index":1372,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["this.categorysservice.create(createcategorydto",{"_index":546,"title":{},"body":{"controllers/CategorysController.html":{}}}],["this.categorysservice.findall",{"_index":547,"title":{},"body":{"controllers/CategorysController.html":{}}}],["this.categorysservice.findone(id",{"_index":548,"title":{},"body":{"controllers/CategorysController.html":{}}}],["this.categorysservice.remove(id",{"_index":550,"title":{},"body":{"controllers/CategorysController.html":{}}}],["this.categorysservice.update(updatecategorydto",{"_index":549,"title":{},"body":{"controllers/CategorysController.html":{}}}],["this.city",{"_index":959,"title":{},"body":{"classes/HospitalEntity.html":{}}}],["this.commentsservice.createcomment",{"_index":603,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.deletecomment(id",{"_index":608,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.getallcommentsbypostid(post_id",{"_index":606,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsservice.updatecomment(updatecommentdto",{"_index":607,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.configservice.get('cloudflare_access",{"_index":797,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get('cloudflare_bucket",{"_index":811,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get('cloudflare_endpoint",{"_index":795,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get('cloudflare_secret",{"_index":799,"title":{},"body":{"injectables/FileService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":67,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["this.configservice.get('jwt_email_token_secret",{"_index":78,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":85,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["this.configservice.get('jwt_secret",{"_index":1012,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["this.configservice.get('payos_api_key",{"_index":1669,"title":{},"body":{"injectables/PayosService.html":{}}}],["this.configservice.get('payos_checksum_key",{"_index":1671,"title":{},"body":{"injectables/PayosService.html":{}}}],["this.configservice.get('payos_client_id",{"_index":1667,"title":{},"body":{"injectables/PayosService.html":{}}}],["this.content",{"_index":2043,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["this.createbynextvisitdoctordate",{"_index":2149,"title":{},"body":{"injectables/ReminderService.html":{}}}],["this.created_at",{"_index":2339,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.databaseservice.blog.count",{"_index":473,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.blog.create",{"_index":440,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.blog.delete",{"_index":511,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.blog.findmany",{"_index":465,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.blog.findunique",{"_index":491,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.blog.update",{"_index":507,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.blogontag.createmany",{"_index":459,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.blogontag.deletemany",{"_index":508,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.databaseservice.category.create",{"_index":564,"title":{},"body":{"injectables/CategorysService.html":{}}}],["this.databaseservice.category.delete",{"_index":571,"title":{},"body":{"injectables/CategorysService.html":{}}}],["this.databaseservice.category.findmany",{"_index":567,"title":{},"body":{"injectables/CategorysService.html":{}}}],["this.databaseservice.category.findunique",{"_index":436,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{}}}],["this.databaseservice.category.update",{"_index":569,"title":{},"body":{"injectables/CategorysService.html":{}}}],["this.databaseservice.hospital.create",{"_index":977,"title":{},"body":{"injectables/HospitalService.html":{}}}],["this.databaseservice.hospital.findmany",{"_index":975,"title":{},"body":{"injectables/HospitalService.html":{}}}],["this.databaseservice.hospital.findunique",{"_index":976,"title":{},"body":{"injectables/HospitalService.html":{}}}],["this.databaseservice.hospital.update",{"_index":979,"title":{},"body":{"injectables/HospitalService.html":{}}}],["this.databaseservice.media.create",{"_index":1269,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.databaseservice.media.delete",{"_index":1275,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.databaseservice.media.findmany",{"_index":1260,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.databaseservice.media.findunique",{"_index":1271,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.databaseservice.membership.create",{"_index":1328,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["this.databaseservice.membership.delete",{"_index":1344,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["this.databaseservice.membership.findmany",{"_index":1337,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["this.databaseservice.membership.findunique",{"_index":1338,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["this.databaseservice.membership.update",{"_index":1342,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["this.databaseservice.metric.create",{"_index":1423,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.databaseservice.metric.delete",{"_index":1464,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.databaseservice.metric.findfirst",{"_index":1465,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.databaseservice.metric.findmany",{"_index":1445,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.databaseservice.metric.findunique",{"_index":1456,"title":{},"body":{"injectables/MetricService.html":{},"injectables/StandardService.html":{}}}],["this.databaseservice.metric.update",{"_index":1442,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.databaseservice.note.create",{"_index":1534,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.databaseservice.note.delete",{"_index":1550,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.databaseservice.note.findmany",{"_index":1539,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.databaseservice.note.findunique",{"_index":1540,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.databaseservice.note.update",{"_index":1547,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.databaseservice.payment.create",{"_index":1610,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.databaseservice.payment.findfirst",{"_index":1630,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.databaseservice.payment.findmany",{"_index":178,"title":{},"body":{"injectables/AdminService.html":{},"injectables/PaymentService.html":{}}}],["this.databaseservice.payment.update",{"_index":1633,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.databaseservice.post.create",{"_index":1723,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.databaseservice.post.delete",{"_index":1737,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.databaseservice.post.findmany",{"_index":1725,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.databaseservice.post.findunique",{"_index":1267,"title":{},"body":{"injectables/MediaService.html":{},"injectables/PostsService.html":{}}}],["this.databaseservice.post.update",{"_index":1729,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.databaseservice.record.findunique",{"_index":1257,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.databaseservice.reminder.create",{"_index":2136,"title":{},"body":{"injectables/ReminderService.html":{}}}],["this.databaseservice.reminder.delete",{"_index":2156,"title":{},"body":{"injectables/ReminderService.html":{}}}],["this.databaseservice.reminder.findfirst",{"_index":2148,"title":{},"body":{"injectables/ReminderService.html":{}}}],["this.databaseservice.reminder.findmany",{"_index":2145,"title":{},"body":{"injectables/ReminderService.html":{}}}],["this.databaseservice.reminder.findunique",{"_index":2146,"title":{},"body":{"injectables/ReminderService.html":{}}}],["this.databaseservice.reminder.update",{"_index":2150,"title":{},"body":{"injectables/ReminderService.html":{}}}],["this.databaseservice.standard.create",{"_index":2235,"title":{},"body":{"injectables/StandardService.html":{}}}],["this.databaseservice.standard.delete",{"_index":2248,"title":{},"body":{"injectables/StandardService.html":{}}}],["this.databaseservice.standard.deletemany",{"_index":1463,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.databaseservice.standard.findmany",{"_index":2241,"title":{},"body":{"injectables/StandardService.html":{}}}],["this.databaseservice.standard.findunique",{"_index":2242,"title":{},"body":{"injectables/StandardService.html":{}}}],["this.databaseservice.standard.update",{"_index":2246,"title":{},"body":{"injectables/StandardService.html":{}}}],["this.databaseservice.tag.create",{"_index":2299,"title":{},"body":{"injectables/TagService.html":{}}}],["this.databaseservice.tag.delete",{"_index":2313,"title":{},"body":{"injectables/TagService.html":{}}}],["this.databaseservice.tag.findmany",{"_index":2302,"title":{},"body":{"injectables/TagService.html":{}}}],["this.databaseservice.tag.findunique",{"_index":457,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/MetricService.html":{},"injectables/TagService.html":{}}}],["this.databaseservice.tag.update",{"_index":2311,"title":{},"body":{"injectables/TagService.html":{}}}],["this.databaseservice.user.findunique",{"_index":1532,"title":{},"body":{"injectables/NoteService.html":{},"injectables/TagService.html":{}}}],["this.dataservice.comment.create",{"_index":638,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.dataservice.comment.delete",{"_index":648,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.dataservice.comment.findmany",{"_index":643,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.dataservice.comment.findunique",{"_index":644,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.dataservice.comment.update",{"_index":647,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.dataservice.hospital.findunique",{"_index":1895,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.media.findmany",{"_index":1949,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.metric.findmany",{"_index":2006,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.metric.findunique",{"_index":1897,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.record.create",{"_index":1900,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.record.delete",{"_index":1958,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.record.findmany",{"_index":1918,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.record.findunique",{"_index":1929,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.record.update",{"_index":1937,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.recordmetric.create",{"_index":1913,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.recordmetric.deletemany",{"_index":1947,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.recordmetric.findmany",{"_index":1945,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.recordmetric.update",{"_index":2024,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.reminder.deletemany",{"_index":1955,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.reminder.findmany",{"_index":1953,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.standard.findmany",{"_index":1986,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.dataservice.user.findunique",{"_index":1893,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.deletelocalfile(filename",{"_index":847,"title":{},"body":{"injectables/FileService.html":{}}}],["this.district",{"_index":2381,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.downloadfile(filename",{"_index":866,"title":{},"body":{"injectables/FileService.html":{}}}],["this.email",{"_index":2373,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.expected_birth_date",{"_index":2377,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.fileservice.createpresignedurl(filename",{"_index":1225,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.fileservice.deletefile(m.media_url",{"_index":1189,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.fileservice.deletefile(media.media_url",{"_index":1219,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.fileservice.deletefile(result.media_url",{"_index":1274,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.fileservice.getimageurl(result.media_url",{"_index":1273,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.fileservice.sendfile(filename",{"_index":1214,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.fileservice.uploadtor2(file",{"_index":1200,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.fileservice.uploadtor2blob(blob.buffer",{"_index":1174,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.findone(hospital.hospital_id",{"_index":978,"title":{},"body":{"injectables/HospitalService.html":{}}}],["this.findone(id",{"_index":510,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["this.findone(updateblogdto.blog_id",{"_index":509,"title":{},"body":{"injectables/BlogsService.html":{}}}],["this.findone(updatecategorydto.category_id",{"_index":568,"title":{},"body":{"injectables/CategorysService.html":{}}}],["this.findone(updatemembershipdto.membership_id",{"_index":1341,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["this.findone(updatemetricdto.metric_id",{"_index":1458,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.findone(updatepostdto.post_id",{"_index":1728,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.findone(updatestandarddto.standard_id",{"_index":2244,"title":{},"body":{"injectables/StandardService.html":{}}}],["this.findone(updatetagdto.tag_id",{"_index":2310,"title":{},"body":{"injectables/TagService.html":{}}}],["this.formatrecord([record",{"_index":1961,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.formatrecord(records",{"_index":1921,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.getdashboardoverview",{"_index":168,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getdashboardpayment",{"_index":172,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getdashboarduser",{"_index":170,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.getfile(filename",{"_index":825,"title":{},"body":{"injectables/FileService.html":{}}}],["this.getnotebyid(id",{"_index":1548,"title":{},"body":{"injectables/NoteService.html":{}}}],["this.getrecordbyid(newrecord.visit_record_id",{"_index":1916,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.getrecordbyid(record.visit_record_id",{"_index":1943,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.getstandardidbyweek",{"_index":1973,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.gettagidbyvalue",{"_index":1909,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.hospitalservice.create(hospital",{"_index":947,"title":{},"body":{"controllers/HospitalController.html":{}}}],["this.hospitalservice.findall",{"_index":941,"title":{},"body":{"controllers/HospitalController.html":{}}}],["this.hospitalservice.findone(id",{"_index":943,"title":{},"body":{"controllers/HospitalController.html":{}}}],["this.hospitalservice.update(hospital",{"_index":949,"title":{},"body":{"controllers/HospitalController.html":{}}}],["this.id",{"_index":519,"title":{},"body":{"classes/Category.html":{},"classes/HospitalEntity.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.jwtservice.signasync(payload",{"_index":1014,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["this.jwtservice.verify(token",{"_index":1015,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["this.jwtutilsservice.verifytoken",{"_index":65,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["this.last_ovulation_date",{"_index":2375,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.lowerboundmsg",{"_index":1370,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["this.mailerservice.sendmail",{"_index":1086,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.resetpassword('940ccb81",{"_index":1035,"title":{},"body":{"controllers/MailController.html":{}}}],["this.measurementunit",{"_index":1363,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["this.mediaservice.createwithpostid",{"_index":1182,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.createwithrecordid",{"_index":1184,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.findone(filename",{"_index":1227,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.remove(filename",{"_index":1218,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.remove(m.media_id",{"_index":1188,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.remove(media.media_id",{"_index":1951,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.mediaservice.updatewithrecordid",{"_index":1161,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.membershipservice.findone(paymentrequest.membership_id",{"_index":1604,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.membershipsservice.create(body",{"_index":1303,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["this.membershipsservice.findall",{"_index":1305,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["this.membershipsservice.findone(id",{"_index":1307,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["this.membershipsservice.remove(id",{"_index":1311,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["this.membershipsservice.update(body",{"_index":1309,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["this.metricservice.create(createmetricdto",{"_index":1395,"title":{},"body":{"controllers/MetricController.html":{}}}],["this.metricservice.findall",{"_index":1396,"title":{},"body":{"controllers/MetricController.html":{}}}],["this.metricservice.findone(createstandarddto.metric_id",{"_index":2234,"title":{},"body":{"injectables/StandardService.html":{}}}],["this.metricservice.findone(id",{"_index":1397,"title":{},"body":{"controllers/MetricController.html":{},"injectables/StandardService.html":{}}}],["this.metricservice.remove(id",{"_index":1399,"title":{},"body":{"controllers/MetricController.html":{}}}],["this.metricservice.update(updatemetricdto",{"_index":1398,"title":{},"body":{"controllers/MetricController.html":{}}}],["this.name",{"_index":961,"title":{},"body":{"classes/HospitalEntity.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.noteservice.createnote",{"_index":1491,"title":{},"body":{"controllers/NoteController.html":{}}}],["this.noteservice.deletenotebyid(id",{"_index":1500,"title":{},"body":{"controllers/NoteController.html":{}}}],["this.noteservice.getallnotes(user_id",{"_index":1495,"title":{},"body":{"controllers/NoteController.html":{}}}],["this.noteservice.getnotebyid(id",{"_index":1497,"title":{},"body":{"controllers/NoteController.html":{}}}],["this.noteservice.updatenotebyid(note",{"_index":1499,"title":{},"body":{"controllers/NoteController.html":{}}}],["this.password",{"_index":2371,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.paymentservice.createpayment(paymentrequest",{"_index":1572,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.getallpayments",{"_index":1576,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.paymentservice.updatepayment(paymentrequest",{"_index":1575,"title":{},"body":{"controllers/PaymentController.html":{}}}],["this.payosservice.createlinkpayment(payoscreaterequest",{"_index":1652,"title":{},"body":{"controllers/PayosController.html":{}}}],["this.payosservice.createlinkpayment(payrequest",{"_index":1627,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.phone",{"_index":2369,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.postservice.findone(comment.post_id",{"_index":636,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.postservice.findone(post_id",{"_index":642,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":1699,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(page",{"_index":1701,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findone(id",{"_index":1703,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.remove(id",{"_index":1705,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(updatepostdto",{"_index":1704,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prisma.blog",{"_index":727,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.blog_tag",{"_index":728,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.category",{"_index":722,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.comment",{"_index":734,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.hospital",{"_index":726,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.media",{"_index":729,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.membership",{"_index":720,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.metric",{"_index":725,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.note",{"_index":732,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.payment_history",{"_index":735,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.post",{"_index":733,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.reminder",{"_index":721,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.standard",{"_index":724,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.tag",{"_index":723,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.token",{"_index":718,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.user",{"_index":719,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.visit_record",{"_index":730,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.prisma.visit_record_metric",{"_index":731,"title":{},"body":{"injectables/DatabaseService.html":{}}}],["this.province",{"_index":2379,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.reactionservice.create(createreactiondto",{"_index":1760,"title":{},"body":{"controllers/ReactionController.html":{}}}],["this.reactionservice.findall",{"_index":1761,"title":{},"body":{"controllers/ReactionController.html":{}}}],["this.reactionservice.findone(+id",{"_index":1763,"title":{},"body":{"controllers/ReactionController.html":{}}}],["this.reactionservice.remove(+id",{"_index":1767,"title":{},"body":{"controllers/ReactionController.html":{}}}],["this.reactionservice.update(+id",{"_index":1765,"title":{},"body":{"controllers/ReactionController.html":{}}}],["this.recordservice.createrecord",{"_index":1812,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.recordservice.deleterecord(id",{"_index":1821,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.recordservice.getrecordbyid(id",{"_index":1823,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.recordservice.getrecordbyuserid(id",{"_index":1816,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.recordservice.updaterecord(record",{"_index":1818,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.reflector.getallandoverride(roles_key",{"_index":92,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["this.refresh_token",{"_index":2337,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{}}}],["this.remind_date",{"_index":2045,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["this.reminderservice.create(body",{"_index":2075,"title":{},"body":{"controllers/ReminderController.html":{}}}],["this.reminderservice.createbynextvisitdoctordate",{"_index":1915,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.reminderservice.findall",{"_index":2078,"title":{},"body":{"controllers/ReminderController.html":{}}}],["this.reminderservice.findone(body.reminder_id",{"_index":2083,"title":{},"body":{"controllers/ReminderController.html":{}}}],["this.reminderservice.findone(id",{"_index":2080,"title":{},"body":{"controllers/ReminderController.html":{}}}],["this.reminderservice.remove(id",{"_index":2090,"title":{},"body":{"controllers/ReminderController.html":{}}}],["this.reminderservice.update(body",{"_index":2088,"title":{},"body":{"controllers/ReminderController.html":{}}}],["this.reminderservice.updatebynextvisitdoctordate",{"_index":1938,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.required",{"_index":1366,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["this.role",{"_index":2389,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.s3client",{"_index":803,"title":{},"body":{"injectables/FileService.html":{}}}],["this.s3client.send(command",{"_index":821,"title":{},"body":{"injectables/FileService.html":{}}}],["this.standardservice.create(createstandarddto",{"_index":2209,"title":{},"body":{"controllers/StandardController.html":{}}}],["this.standardservice.findstandardbymetricid(metricid",{"_index":2211,"title":{},"body":{"controllers/StandardController.html":{}}}],["this.standardservice.remove(standardid",{"_index":2214,"title":{},"body":{"controllers/StandardController.html":{}}}],["this.standardservice.update(updatestandard",{"_index":2212,"title":{},"body":{"controllers/StandardController.html":{}}}],["this.status",{"_index":523,"title":{},"body":{"classes/Category.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.tagservice.create(createtagdto",{"_index":2274,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.findall",{"_index":2275,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.findallbyuser(userid",{"_index":2278,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.findone(createmetricdto.tag_id",{"_index":1441,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.tagservice.findone(id",{"_index":2276,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.findone(tag",{"_index":1460,"title":{},"body":{"injectables/MetricService.html":{}}}],["this.tagservice.remove(id",{"_index":2280,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.update(updatetagdto",{"_index":2279,"title":{},"body":{"controllers/TagController.html":{}}}],["this.timeutilsservice.calculatepregnancyweeks",{"_index":1964,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.title",{"_index":521,"title":{},"body":{"classes/Category.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["this.type",{"_index":2041,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["this.updated_at",{"_index":2341,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["this.updaterecordmetrics(record.visit_record_id",{"_index":1941,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.upperboundmsg",{"_index":1368,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["this.user",{"_index":2335,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{}}}],["this.user_id",{"_index":2047,"title":{},"body":{"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{}}}],["this.userservice.checkaccountmembership(user.user_id",{"_index":1606,"title":{},"body":{"injectables/PaymentService.html":{}}}],["this.userservice.getuserbyid(existingrecord.user_id",{"_index":1932,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.userservice.getuserbyid(user_id",{"_index":1722,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.userservice.getuserbyid(userid",{"_index":1603,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/ReminderService.html":{}}}],["this.usersservice.changepassword(body",{"_index":2474,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.checkaccountmembership(payment.user_id",{"_index":267,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.usersservice.checkaccountmembership(user.user_id",{"_index":259,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.usersservice.checkemail(body.email",{"_index":2466,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.checkrefreshtoken",{"_index":2479,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(body",{"_index":2489,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.forgotpassword(body.email",{"_index":2503,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":2496,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(user_id",{"_index":637,"title":{},"body":{"injectables/CommentsService.html":{}}}],["this.usersservice.getuserprofile(user_id",{"_index":2495,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.login(body",{"_index":2462,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.logout(user_id",{"_index":2481,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.refreshtoken",{"_index":2487,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.register(body",{"_index":2467,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.signinwithtoken(user_id",{"_index":2471,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateprofile(body",{"_index":2501,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuser(body",{"_index":2498,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.users",{"_index":174,"title":{},"body":{"injectables/AdminService.html":{},"controllers/UsersController.html":{}}}],["this.ward",{"_index":2383,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["throw",{"_index":57,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"controllers/HospitalController.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["throws",{"_index":1892,"title":{},"body":{"injectables/RecordsService.html":{}}}],["thêm",{"_index":1734,"title":{},"body":{"injectables/PostsService.html":{}}}],["thất",{"_index":1208,"title":{},"body":{"controllers/MediaController.html":{}}}],["timediff",{"_index":2318,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["timeutilsservice",{"_index":1828,"title":{"injectables/TimeUtilsService.html":{}},"body":{"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"injectables/TimeUtilsService.html":{},"coverage.html":{},"overview.html":{}}}],["title",{"_index":441,"title":{},"body":{"injectables/BlogsService.html":{},"classes/Category.html":{},"injectables/CategorysService.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"injectables/TagService.html":{}}}],["token",{"_index":54,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/DatabaseService.html":{},"guards/IsLoggin.html":{},"injectables/JwtUtilsService.html":{},"controllers/PostsController.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"controllers/UsersController.html":{}}}],["tokendata",{"_index":2344,"title":{},"body":{"classes/TokenDto.html":{}}}],["tokendata.created_at",{"_index":2340,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{}}}],["tokendata.refresh_token",{"_index":2338,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{}}}],["tokendata.updated_at",{"_index":2342,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{}}}],["tokendata.user_id",{"_index":2336,"title":{},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{}}}],["tokendatatype",{"_index":2330,"title":{"interfaces/TokenDataType.html":{}},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["tokendto",{"_index":2333,"title":{"classes/TokenDto.html":{}},"body":{"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["tokenrequest",{"_index":2477,"title":{},"body":{"controllers/UsersController.html":{}}}],["total",{"_index":228,"title":{},"body":{"injectables/AdminService.html":{},"controllers/PostsController.html":{},"injectables/RecordsService.html":{}}}],["total_page",{"_index":471,"title":{},"body":{"injectables/BlogsService.html":{}}}],["totalpackages",{"_index":214,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalpayments",{"_index":177,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalpayments.filter((payment",{"_index":197,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalpayments.length",{"_index":215,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalpayments.reduce((sum",{"_index":219,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalrevenue",{"_index":218,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalsubscribers",{"_index":196,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalusers",{"_index":173,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalusers.filter((user",{"_index":188,"title":{},"body":{"injectables/AdminService.html":{}}}],["totalusers.length",{"_index":230,"title":{},"body":{"injectables/AdminService.html":{}}}],["tra",{"_index":1527,"title":{},"body":{"injectables/NoteService.html":{}}}],["track",{"_index":253,"title":{},"body":{"injectables/AdminService.html":{}}}],["transformer",{"_index":2628,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":1051,"title":{},"body":{"modules/MailModule.html":{}}}],["trc",{"_index":1732,"title":{},"body":{"injectables/PostsService.html":{}}}],["true",{"_index":71,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"modules/AppModule.html":{},"injectables/BlogsService.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"modules/MailModule.html":{},"injectables/MediaService.html":{},"injectables/MetricService.html":{},"injectables/PaymentService.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["try",{"_index":63,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/FileService.html":{},"guards/IsLoggin.html":{},"controllers/MediaController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["ts",{"_index":114,"title":{},"body":{"controllers/AdminController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["tslib",{"_index":2680,"title":{},"body":{"dependencies.html":{}}}],["tsresthandler",{"_index":113,"title":{},"body":{"controllers/AdminController.html":{},"controllers/BlogsController.html":{},"controllers/CategorysController.html":{},"controllers/CommentsController.html":{},"controllers/HospitalController.html":{},"controllers/MediaController.html":{},"controllers/MembershipsController.html":{},"controllers/MetricController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/StandardController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["tsresthandler(authcontract.changepassword",{"_index":2472,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(authcontract.forgotpassword",{"_index":2428,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(authcontract.login",{"_index":2439,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(authcontract.logout",{"_index":2475,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(authcontract.refreshtoken",{"_index":2484,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(authcontract.register",{"_index":2443,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(authcontract.signinwithtoken",{"_index":2469,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(blogcontract.create",{"_index":352,"title":{},"body":{"controllers/BlogsController.html":{}}}],["tsresthandler(blogcontract.delete",{"_index":356,"title":{},"body":{"controllers/BlogsController.html":{}}}],["tsresthandler(blogcontract.getall",{"_index":361,"title":{},"body":{"controllers/BlogsController.html":{}}}],["tsresthandler(blogcontract.getblogbycategory",{"_index":365,"title":{},"body":{"controllers/BlogsController.html":{}}}],["tsresthandler(blogcontract.getblogbytag",{"_index":369,"title":{},"body":{"controllers/BlogsController.html":{}}}],["tsresthandler(blogcontract.getone",{"_index":373,"title":{},"body":{"controllers/BlogsController.html":{}}}],["tsresthandler(blogcontract.update",{"_index":377,"title":{},"body":{"controllers/BlogsController.html":{}}}],["tsresthandler(categorycontract.create",{"_index":529,"title":{},"body":{"controllers/CategorysController.html":{}}}],["tsresthandler(categorycontract.delete",{"_index":532,"title":{},"body":{"controllers/CategorysController.html":{}}}],["tsresthandler(categorycontract.getall",{"_index":534,"title":{},"body":{"controllers/CategorysController.html":{}}}],["tsresthandler(categorycontract.getone",{"_index":536,"title":{},"body":{"controllers/CategorysController.html":{}}}],["tsresthandler(categorycontract.update",{"_index":540,"title":{},"body":{"controllers/CategorysController.html":{}}}],["tsresthandler(commentcontract.create",{"_index":597,"title":{},"body":{"controllers/CommentsController.html":{}}}],["tsresthandler(commentcontract.delete",{"_index":580,"title":{},"body":{"controllers/CommentsController.html":{}}}],["tsresthandler(commentcontract.getall",{"_index":583,"title":{},"body":{"controllers/CommentsController.html":{}}}],["tsresthandler(commentcontract.update",{"_index":588,"title":{},"body":{"controllers/CommentsController.html":{}}}],["tsresthandler(dashboardcontract.getdashboard",{"_index":110,"title":{},"body":{"controllers/AdminController.html":{}}}],["tsresthandler(hospitalcontract.create",{"_index":926,"title":{},"body":{"controllers/HospitalController.html":{}}}],["tsresthandler(hospitalcontract.getall",{"_index":928,"title":{},"body":{"controllers/HospitalController.html":{}}}],["tsresthandler(hospitalcontract.getone",{"_index":931,"title":{},"body":{"controllers/HospitalController.html":{}}}],["tsresthandler(hospitalcontract.update",{"_index":935,"title":{},"body":{"controllers/HospitalController.html":{}}}],["tsresthandler(mediacontract.deletefile",{"_index":1138,"title":{},"body":{"controllers/MediaController.html":{}}}],["tsresthandler(mediacontract.getfile",{"_index":1210,"title":{},"body":{"controllers/MediaController.html":{}}}],["tsresthandler(mediacontract.getlink",{"_index":1141,"title":{},"body":{"controllers/MediaController.html":{}}}],["tsresthandler(mediacontract.updatefile",{"_index":1145,"title":{},"body":{"controllers/MediaController.html":{}}}],["tsresthandler(mediacontract.updatemultifiles",{"_index":1148,"title":{},"body":{"controllers/MediaController.html":{}}}],["tsresthandler(membershipcontract.create",{"_index":1285,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["tsresthandler(membershipcontract.delete",{"_index":1288,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["tsresthandler(membershipcontract.getall",{"_index":1290,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["tsresthandler(membershipcontract.getone",{"_index":1293,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["tsresthandler(membershipcontract.update",{"_index":1297,"title":{},"body":{"controllers/MembershipsController.html":{}}}],["tsresthandler(metriccontract.create",{"_index":1378,"title":{},"body":{"controllers/MetricController.html":{}}}],["tsresthandler(metriccontract.delete",{"_index":1381,"title":{},"body":{"controllers/MetricController.html":{}}}],["tsresthandler(metriccontract.getall",{"_index":1383,"title":{},"body":{"controllers/MetricController.html":{}}}],["tsresthandler(metriccontract.getone",{"_index":1385,"title":{},"body":{"controllers/MetricController.html":{}}}],["tsresthandler(metriccontract.update",{"_index":1389,"title":{},"body":{"controllers/MetricController.html":{}}}],["tsresthandler(notecontract.create",{"_index":1488,"title":{},"body":{"controllers/NoteController.html":{}}}],["tsresthandler(notecontract.delete",{"_index":1472,"title":{},"body":{"controllers/NoteController.html":{}}}],["tsresthandler(notecontract.getall",{"_index":1492,"title":{},"body":{"controllers/NoteController.html":{}}}],["tsresthandler(notecontract.getone",{"_index":1496,"title":{},"body":{"controllers/NoteController.html":{}}}],["tsresthandler(notecontract.update",{"_index":1498,"title":{},"body":{"controllers/NoteController.html":{}}}],["tsresthandler(paymentcontract.create",{"_index":1570,"title":{},"body":{"controllers/PaymentController.html":{}}}],["tsresthandler(paymentcontract.getall",{"_index":1561,"title":{},"body":{"controllers/PaymentController.html":{}}}],["tsresthandler(paymentcontract.update",{"_index":1565,"title":{},"body":{"controllers/PaymentController.html":{}}}],["tsresthandler(payoscontract.create",{"_index":1645,"title":{},"body":{"controllers/PayosController.html":{}}}],["tsresthandler(postcontract.create",{"_index":1696,"title":{},"body":{"controllers/PostsController.html":{}}}],["tsresthandler(postcontract.delete",{"_index":1683,"title":{},"body":{"controllers/PostsController.html":{}}}],["tsresthandler(postcontract.getall",{"_index":1685,"title":{},"body":{"controllers/PostsController.html":{}}}],["tsresthandler(postcontract.getone",{"_index":1687,"title":{},"body":{"controllers/PostsController.html":{}}}],["tsresthandler(postcontract.update",{"_index":1691,"title":{},"body":{"controllers/PostsController.html":{}}}],["tsresthandler(recordcontract.createrecord",{"_index":1810,"title":{},"body":{"controllers/RecordsController.html":{}}}],["tsresthandler(recordcontract.deleterecord",{"_index":1794,"title":{},"body":{"controllers/RecordsController.html":{}}}],["tsresthandler(recordcontract.getrecordbyid",{"_index":1797,"title":{},"body":{"controllers/RecordsController.html":{}}}],["tsresthandler(recordcontract.getrecordbyuserid",{"_index":1813,"title":{},"body":{"controllers/RecordsController.html":{}}}],["tsresthandler(recordcontract.updaterecord",{"_index":1804,"title":{},"body":{"controllers/RecordsController.html":{}}}],["tsresthandler(remindercontract.create",{"_index":2072,"title":{},"body":{"controllers/ReminderController.html":{}}}],["tsresthandler(remindercontract.delete",{"_index":2059,"title":{},"body":{"controllers/ReminderController.html":{}}}],["tsresthandler(remindercontract.getall",{"_index":2061,"title":{},"body":{"controllers/ReminderController.html":{}}}],["tsresthandler(remindercontract.getone",{"_index":2064,"title":{},"body":{"controllers/ReminderController.html":{}}}],["tsresthandler(remindercontract.update",{"_index":2068,"title":{},"body":{"controllers/ReminderController.html":{}}}],["tsresthandler(standardcontract.create",{"_index":2194,"title":{},"body":{"controllers/StandardController.html":{}}}],["tsresthandler(standardcontract.delete",{"_index":2197,"title":{},"body":{"controllers/StandardController.html":{}}}],["tsresthandler(standardcontract.getallstandardbymetricid",{"_index":2200,"title":{},"body":{"controllers/StandardController.html":{}}}],["tsresthandler(standardcontract.update",{"_index":2204,"title":{},"body":{"controllers/StandardController.html":{}}}],["tsresthandler(tagcontract.create",{"_index":2255,"title":{},"body":{"controllers/TagController.html":{}}}],["tsresthandler(tagcontract.delete",{"_index":2258,"title":{},"body":{"controllers/TagController.html":{}}}],["tsresthandler(tagcontract.getall",{"_index":2260,"title":{},"body":{"controllers/TagController.html":{}}}],["tsresthandler(tagcontract.getone",{"_index":2262,"title":{},"body":{"controllers/TagController.html":{}}}],["tsresthandler(tagcontract.gettagsbyuser",{"_index":2265,"title":{},"body":{"controllers/TagController.html":{}}}],["tsresthandler(tagcontract.update",{"_index":2269,"title":{},"body":{"controllers/TagController.html":{}}}],["tsresthandler(usercontract.create",{"_index":2424,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(usercontract.getall",{"_index":2430,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(usercontract.getone",{"_index":2432,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(usercontract.getprofile",{"_index":2492,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(usercontract.update",{"_index":2449,"title":{},"body":{"controllers/UsersController.html":{}}}],["tsresthandler(usercontract.updateprofile",{"_index":2499,"title":{},"body":{"controllers/UsersController.html":{}}}],["tuần",{"_index":2324,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["type",{"_index":21,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"injectables/AdminService.html":{},"injectables/AppService.html":{},"controllers/BlogsController.html":{},"injectables/BlogsService.html":{},"classes/Category.html":{},"controllers/CategorysController.html":{},"injectables/CategorysService.html":{},"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/CreateStandardDto.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"controllers/HospitalController.html":{},"classes/HospitalEntity.html":{},"injectables/HospitalService.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtUtilsService.html":{},"injectables/MailService.html":{},"classes/MatchConstraint.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/MembershipsController.html":{},"injectables/MembershipsService.html":{},"classes/Metric.html":{},"controllers/MetricController.html":{},"interfaces/MetricDTO.html":{},"injectables/MetricService.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/RefreshTokenAuthGuard.html":{},"interfaces/Reminder.html":{},"controllers/ReminderController.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"guards/RoleAuthGuard.html":{},"classes/SocketIoAdapter.html":{},"classes/Standard.html":{},"controllers/StandardController.html":{},"injectables/StandardService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/TimeUtilsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"classes/UpdateStandardDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":2356,"title":{},"body":{"classes/UpdateStandardDto.html":{},"dependencies.html":{}}}],["types/express",{"_index":2614,"title":{},"body":{"dependencies.html":{}}}],["tái",{"_index":2130,"title":{},"body":{"injectables/ReminderService.html":{}}}],["tính",{"_index":2323,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["tại",{"_index":1530,"title":{},"body":{"injectables/NoteService.html":{}}}],["tạm",{"_index":1206,"title":{},"body":{"controllers/MediaController.html":{},"injectables/PostsService.html":{}}}],["tạo",{"_index":852,"title":{},"body":{"injectables/FileService.html":{}}}],["tấm",{"_index":877,"title":{},"body":{"injectables/FileService.html":{}}}],["tồn",{"_index":1529,"title":{},"body":{"injectables/NoteService.html":{}}}],["unauthorized",{"_index":2074,"title":{},"body":{"controllers/ReminderController.html":{}}}],["unauthorizedexception",{"_index":1483,"title":{},"body":{"controllers/NoteController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{}}}],["unauthorizedexception('access",{"_index":1698,"title":{},"body":{"controllers/PostsController.html":{}}}],["unauthorizedexception('unauthorized",{"_index":1489,"title":{},"body":{"controllers/NoteController.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{}}}],["undefined",{"_index":461,"title":{},"body":{"injectables/BlogsService.html":{},"controllers/MediaController.html":{},"injectables/MetricService.html":{}}}],["uniquename",{"_index":1198,"title":{},"body":{"controllers/MediaController.html":{}}}],["unknown",{"_index":419,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/CommentsService.html":{},"injectables/FileService.html":{},"injectables/HospitalService.html":{},"injectables/MailService.html":{},"injectables/MediaService.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PayosService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{}}}],["unlink",{"_index":788,"title":{},"body":{"injectables/FileService.html":{}}}],["unlink(file.path",{"_index":1203,"title":{},"body":{"controllers/MediaController.html":{}}}],["unlink(filepath",{"_index":870,"title":{},"body":{"injectables/FileService.html":{}}}],["unlink(join(__dirname",{"_index":1222,"title":{},"body":{"controllers/MediaController.html":{}}}],["unnamed",{"_index":1990,"title":{},"body":{"injectables/RecordsService.html":{}}}],["unprocessableentityexception(e.message",{"_index":80,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["up",{"_index":2711,"title":{},"body":{"index.html":{}}}],["update",{"_index":415,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CategorysService.html":{},"injectables/HospitalService.html":{},"controllers/MediaController.html":{},"injectables/MembershipsService.html":{},"injectables/MetricService.html":{},"injectables/PostsService.html":{},"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"injectables/RecordsService.html":{},"controllers/ReminderController.html":{},"injectables/ReminderService.html":{},"injectables/StandardService.html":{},"injectables/TagService.html":{}}}],["update(@param('id",{"_index":1764,"title":{},"body":{"controllers/ReactionController.html":{}}}],["update(hospital",{"_index":973,"title":{},"body":{"injectables/HospitalService.html":{}}}],["update(id",{"_index":1749,"title":{},"body":{"controllers/ReactionController.html":{},"injectables/ReactionService.html":{}}}],["update(updateblogdto",{"_index":431,"title":{},"body":{"injectables/BlogsService.html":{}}}],["update(updatecategorydto",{"_index":562,"title":{},"body":{"injectables/CategorysService.html":{}}}],["update(updatemembershipdto",{"_index":1325,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["update(updatemetricdto",{"_index":1417,"title":{},"body":{"injectables/MetricService.html":{}}}],["update(updatepostdto",{"_index":1719,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(updatereminderdto",{"_index":2116,"title":{},"body":{"injectables/ReminderService.html":{}}}],["update(updatestandarddto",{"_index":2230,"title":{},"body":{"injectables/StandardService.html":{}}}],["update(updatetagdto",{"_index":2296,"title":{},"body":{"injectables/TagService.html":{}}}],["updateblogdto",{"_index":379,"title":{},"body":{"controllers/BlogsController.html":{},"injectables/BlogsService.html":{}}}],["updateblogdto.blog_id",{"_index":505,"title":{},"body":{"injectables/BlogsService.html":{}}}],["updateblogdto.tags_id",{"_index":506,"title":{},"body":{"injectables/BlogsService.html":{}}}],["updatebynextvisitdoctordate",{"_index":1925,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/ReminderService.html":{}}}],["updatebynextvisitdoctordate(undefined",{"_index":2119,"title":{},"body":{"injectables/ReminderService.html":{}}}],["updatecategorydto",{"_index":542,"title":{},"body":{"controllers/CategorysController.html":{},"injectables/CategorysService.html":{}}}],["updatecategorydto.category_id",{"_index":570,"title":{},"body":{"injectables/CategorysService.html":{}}}],["updatecomment",{"_index":618,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updatecomment(comment",{"_index":631,"title":{},"body":{"injectables/CommentsService.html":{}}}],["updatecommentdto",{"_index":590,"title":{},"body":{"controllers/CommentsController.html":{}}}],["updated_at",{"_index":451,"title":{},"body":{"injectables/BlogsService.html":{},"injectables/CommentsService.html":{},"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/MembershipsService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["updatednote",{"_index":1546,"title":{},"body":{"injectables/NoteService.html":{}}}],["updatemembershipdto",{"_index":1327,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["updatemembershipdto.membership_id",{"_index":1343,"title":{},"body":{"injectables/MembershipsService.html":{}}}],["updatemetricdto",{"_index":1391,"title":{},"body":{"controllers/MetricController.html":{},"injectables/MetricService.html":{}}}],["updatemetricdto.metric_id",{"_index":1462,"title":{},"body":{"injectables/MetricService.html":{}}}],["updatemetricdto.tag_id",{"_index":1459,"title":{},"body":{"injectables/MetricService.html":{}}}],["updatenotebyid",{"_index":1512,"title":{},"body":{"injectables/NoteService.html":{}}}],["updatenotebyid(note",{"_index":1523,"title":{},"body":{"injectables/NoteService.html":{}}}],["updatepayment",{"_index":1585,"title":{},"body":{"injectables/PaymentService.html":{}}}],["updatepayment(paymentrequest",{"_index":1593,"title":{},"body":{"injectables/PaymentService.html":{}}}],["updatepostdto",{"_index":1693,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto.content",{"_index":1731,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepostdto.post_id",{"_index":1730,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatereactiondto",{"_index":1750,"title":{"classes/UpdateReactionDto.html":{}},"body":{"controllers/ReactionController.html":{},"injectables/ReactionService.html":{},"classes/UpdateReactionDto.html":{},"coverage.html":{}}}],["updaterecord",{"_index":1842,"title":{},"body":{"injectables/RecordsService.html":{}}}],["updaterecord(record",{"_index":1868,"title":{},"body":{"injectables/RecordsService.html":{}}}],["updaterecordmetrics",{"_index":1843,"title":{},"body":{"injectables/RecordsService.html":{}}}],["updaterecordmetrics(visitrecordid",{"_index":1870,"title":{},"body":{"injectables/RecordsService.html":{}}}],["updatereminderdto",{"_index":2118,"title":{},"body":{"injectables/ReminderService.html":{}}}],["updatereminderdto.content",{"_index":2154,"title":{},"body":{"injectables/ReminderService.html":{}}}],["updatereminderdto.reminder_id",{"_index":2152,"title":{},"body":{"injectables/ReminderService.html":{}}}],["updatereminderdto.title",{"_index":2153,"title":{},"body":{"injectables/ReminderService.html":{}}}],["updates",{"_index":1780,"title":{},"body":{"injectables/ReactionService.html":{},"injectables/RecordsService.html":{}}}],["updatestandard",{"_index":2206,"title":{},"body":{"controllers/StandardController.html":{}}}],["updatestandarddto",{"_index":2232,"title":{"classes/UpdateStandardDto.html":{}},"body":{"injectables/StandardService.html":{},"classes/UpdateStandardDto.html":{},"coverage.html":{}}}],["updatestandarddto.standard_id",{"_index":2247,"title":{},"body":{"injectables/StandardService.html":{}}}],["updatetagdto",{"_index":2271,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["updatetagdto.tag_id",{"_index":2312,"title":{},"body":{"injectables/TagService.html":{}}}],["updatewithrecordid",{"_index":1246,"title":{},"body":{"injectables/MediaService.html":{}}}],["updatewithrecordid(undefined",{"_index":1255,"title":{},"body":{"injectables/MediaService.html":{}}}],["upload",{"_index":778,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["upload.done",{"_index":814,"title":{},"body":{"injectables/FileService.html":{}}}],["uploaded",{"_index":1193,"title":{},"body":{"controllers/MediaController.html":{}}}],["uploadedfile",{"_index":1197,"title":{},"body":{"controllers/MediaController.html":{}}}],["uploadfile",{"_index":1136,"title":{},"body":{"controllers/MediaController.html":{}}}],["uploadfile(@body",{"_index":1154,"title":{},"body":{"controllers/MediaController.html":{}}}],["uploadfile(media",{"_index":1147,"title":{},"body":{"controllers/MediaController.html":{}}}],["uploading",{"_index":817,"title":{},"body":{"injectables/FileService.html":{},"controllers/MediaController.html":{}}}],["uploadpath",{"_index":744,"title":{},"body":{"injectables/FileService.html":{}}}],["uploads",{"_index":1171,"title":{},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{}}}],["uploads.length",{"_index":1177,"title":{},"body":{"controllers/MediaController.html":{}}}],["uploads.some((upload",{"_index":1179,"title":{},"body":{"controllers/MediaController.html":{}}}],["uploadtor2",{"_index":749,"title":{},"body":{"injectables/FileService.html":{}}}],["uploadtor2(file",{"_index":762,"title":{},"body":{"injectables/FileService.html":{}}}],["uploadtor2blob",{"_index":750,"title":{},"body":{"injectables/FileService.html":{}}}],["uploadtor2blob(file",{"_index":765,"title":{},"body":{"injectables/FileService.html":{}}}],["upperbound",{"_index":657,"title":{},"body":{"classes/CreateStandardDto.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"classes/Standard.html":{},"injectables/StandardService.html":{}}}],["upperbound_msg",{"_index":1429,"title":{},"body":{"injectables/MetricService.html":{}}}],["upperboundmsg",{"_index":1349,"title":{},"body":{"classes/Metric.html":{},"interfaces/MetricDTO.html":{}}}],["url",{"_index":879,"title":{},"body":{"injectables/FileService.html":{}}}],["use",{"_index":252,"title":{},"body":{"injectables/AdminService.html":{},"index.html":{}}}],["used",{"_index":1923,"title":{},"body":{"injectables/RecordsService.html":{}}}],["usefactory",{"_index":1050,"title":{},"body":{"modules/MailModule.html":{}}}],["useful",{"_index":2779,"title":{},"body":{"index.html":{}}}],["useguards",{"_index":591,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenauthguard",{"_index":596,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/NoteController.html":{},"controllers/PaymentController.html":{},"controllers/PostsController.html":{},"controllers/RecordsController.html":{},"controllers/ReminderController.html":{},"controllers/UsersController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(authcontract.changepassword",{"_index":2421,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(authcontract.signinwithtoken",{"_index":2446,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(commentcontract.create",{"_index":577,"title":{},"body":{"controllers/CommentsController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(notecontract.create",{"_index":1470,"title":{},"body":{"controllers/NoteController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(notecontract.getall",{"_index":1475,"title":{},"body":{"controllers/NoteController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(notecontract.getone",{"_index":1477,"title":{},"body":{"controllers/NoteController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(notecontract.update",{"_index":1481,"title":{},"body":{"controllers/NoteController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(paymentcontract.create",{"_index":1558,"title":{},"body":{"controllers/PaymentController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(postcontract.create",{"_index":1680,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(recordcontract.createrecord",{"_index":1791,"title":{},"body":{"controllers/RecordsController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(recordcontract.getrecordbyuserid",{"_index":1800,"title":{},"body":{"controllers/RecordsController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(remindercontract.create",{"_index":2056,"title":{},"body":{"controllers/ReminderController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(usercontract.getprofile",{"_index":2435,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(accesstokenauthguard)@tsresthandler(usercontract.updateprofile",{"_index":2452,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(refreshtokenauthguard",{"_index":2483,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(roleauthguard",{"_index":2491,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1195,"title":{},"body":{"controllers/MediaController.html":{}}}],["user",{"_index":169,"title":{"interfaces/User.html":{}},"body":{"injectables/AdminService.html":{},"injectables/CommentsService.html":{},"injectables/DatabaseService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NoteService.html":{},"controllers/PaymentController.html":{},"injectables/PaymentService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"injectables/TagService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["user.email",{"_index":1087,"title":{},"body":{"injectables/MailService.html":{}}}],["user.expected_birth_date",{"_index":1911,"title":{},"body":{"injectables/RecordsService.html":{}}}],["user.name",{"_index":1098,"title":{},"body":{"injectables/MailService.html":{}}}],["user.user_id",{"_index":1573,"title":{},"body":{"controllers/PaymentController.html":{},"injectables/PaymentService.html":{}}}],["user.visit_record[user.visit_record.length",{"_index":2304,"title":{},"body":{"injectables/TagService.html":{}}}],["user_id",{"_index":601,"title":{},"body":{"controllers/CommentsController.html":{},"injectables/CommentsService.html":{},"classes/Hospital.html":{},"interfaces/JwtPayload.html":{},"classes/Media-1.html":{},"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"interfaces/Reminder.html":{},"classes/ReminderEntity.html":{},"injectables/ReminderService.html":{},"injectables/TagService.html":{},"interfaces/TokenDataType.html":{},"classes/TokenDto.html":{},"controllers/UsersController.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["usercontract",{"_index":2456,"title":{},"body":{"controllers/UsersController.html":{}}}],["usercreaterequesttype",{"_index":2423,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdata",{"_index":2395,"title":{},"body":{"classes/UserEntity.html":{}}}],["userdata.address",{"_index":2386,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.created_at",{"_index":2387,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.district",{"_index":2382,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.email",{"_index":2374,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.expectedbirthdate",{"_index":2378,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.id",{"_index":2367,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.lastovulationdate",{"_index":2376,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.name",{"_index":2368,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.password",{"_index":2372,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.phone",{"_index":2370,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.province",{"_index":2380,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.role",{"_index":2390,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.status",{"_index":2392,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.updated_at",{"_index":2388,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userdata.ward",{"_index":2384,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userentity",{"_index":1854,"title":{"classes/UserEntity.html":{}},"body":{"injectables/RecordsService.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexpectbirthdate",{"_index":1873,"title":{},"body":{"injectables/RecordsService.html":{}}}],["userid",{"_index":1490,"title":{},"body":{"controllers/NoteController.html":{},"injectables/NoteService.html":{},"injectables/PaymentService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["userresponsetype",{"_index":1076,"title":{},"body":{"injectables/MailService.html":{}}}],["userrole",{"_index":37,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"interfaces/JwtPayload.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{},"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userrole.member",{"_index":2391,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["users",{"_index":229,"title":{},"body":{"injectables/AdminService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":2511,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":2457,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/user.entity",{"_index":1887,"title":{},"body":{"injectables/RecordsService.html":{}}}],["users/users.module",{"_index":146,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/PaymentModule.html":{},"modules/PostsModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{}}}],["users/users.service",{"_index":166,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CommentsService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{}}}],["userscontroller",{"_index":2410,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1587,"title":{},"body":{"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{}}}],["usersmodule",{"_index":138,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules/PaymentModule.html":{},"modules/PostsModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":155,"title":{},"body":{"injectables/AdminService.html":{},"injectables/CommentsService.html":{},"injectables/PaymentService.html":{},"injectables/PostsService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userstatus",{"_index":2363,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userstatus.active",{"_index":2393,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["userupdaterequesttype",{"_index":2448,"title":{},"body":{"controllers/UsersController.html":{}}}],["utils/decorators/role.decorator",{"_index":44,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["utils/jwt/jwt.interface",{"_index":1485,"title":{},"body":{"controllers/NoteController.html":{},"controllers/RecordsController.html":{}}}],["utils/jwt/jwtutils.module",{"_index":336,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommentsModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PostsModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/UsersModule.html":{}}}],["utils/jwt/jwtutils.service",{"_index":45,"title":{},"body":{"guards/AccessTokenAuthGuard.html":{},"guards/IsLoggin.html":{},"guards/RefreshTokenAuthGuard.html":{},"guards/RoleAuthGuard.html":{}}}],["utils/time/timeutils.service",{"_index":1831,"title":{},"body":{"modules/RecordsModule.html":{},"injectables/RecordsService.html":{}}}],["uuid",{"_index":1080,"title":{},"body":{"injectables/MailService.html":{},"dependencies.html":{}}}],["uuid_reg",{"_index":2563,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["uuidv4",{"_index":1079,"title":{},"body":{"injectables/MailService.html":{}}}],["uuidv4().replace(/[^0",{"_index":1081,"title":{},"body":{"injectables/MailService.html":{}}}],["v4",{"_index":1078,"title":{},"body":{"injectables/MailService.html":{}}}],["validate",{"_index":1103,"title":{},"body":{"classes/MatchConstraint.html":{},"injectables/RecordsService.html":{}}}],["validate(value",{"_index":1104,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validationarguments",{"_index":1106,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validationoptions",{"_index":1109,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":1111,"title":{},"body":{"classes/MatchConstraint.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":1110,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validatorconstraintinterface",{"_index":1102,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["value",{"_index":678,"title":{},"body":{"injectables/DatabaseService.html":{},"injectables/FileService.html":{},"classes/Hospital.html":{},"classes/MatchConstraint.html":{},"classes/Media-1.html":{},"injectables/PaymentService.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1968,"title":{},"body":{"injectables/RecordsService.html":{}}}],["variable",{"_index":2552,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2800,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":1933,"title":{},"body":{"injectables/RecordsService.html":{}}}],["verifytoken",{"_index":996,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["verifytoken(undefined",{"_index":1004,"title":{},"body":{"injectables/JwtUtilsService.html":{}}}],["version",{"_index":2796,"title":{},"body":{"properties.html":{}}}],["visit",{"_index":1879,"title":{},"body":{"injectables/RecordsService.html":{}}}],["visit_doctor_date",{"_index":908,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/RecordsService.html":{},"injectables/TagService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["visit_record",{"_index":1270,"title":{},"body":{"injectables/MediaService.html":{},"injectables/ReminderService.html":{},"injectables/TagService.html":{}}}],["visit_record_id",{"_index":905,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"injectables/RecordsService.html":{},"injectables/ReminderService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["visit_record_metric",{"_index":917,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"injectables/TagService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["visit_record_metric_id",{"_index":912,"title":{},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["visitdate",{"_index":1966,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/TimeUtilsService.html":{}}}],["visitdate.gettime",{"_index":2320,"title":{},"body":{"injectables/TimeUtilsService.html":{}}}],["visitdoctordate",{"_index":1874,"title":{},"body":{"injectables/RecordsService.html":{}}}],["visitrecord",{"_index":904,"title":{"classes/VisitRecord.html":{}},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{}}}],["visitrecord:2",{"_index":2530,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["visitrecord:3",{"_index":2527,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["visitrecord:4",{"_index":2529,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["visitrecord:5",{"_index":2525,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["visitrecord:6",{"_index":2526,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["visitrecord:7",{"_index":2524,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["visitrecord:8",{"_index":2528,"title":{},"body":{"classes/VisitRecordIncludeOtherTables.html":{}}}],["visitrecordid",{"_index":1878,"title":{},"body":{"injectables/RecordsService.html":{}}}],["visitrecordincludeothertables",{"_index":915,"title":{"classes/VisitRecordIncludeOtherTables.html":{}},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/RecordsService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{}}}],["visitrecordmetric",{"_index":910,"title":{"classes/VisitRecordMetric.html":{}},"body":{"classes/Hospital.html":{},"classes/Media-1.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{},"coverage.html":{}}}],["visually",{"_index":2707,"title":{},"body":{"index.html":{}}}],["vs",{"_index":1736,"title":{},"body":{"injectables/PostsService.html":{},"injectables/RecordsService.html":{}}}],["vscode",{"_index":2777,"title":{},"body":{"index.html":{}}}],["vào",{"_index":2132,"title":{},"body":{"injectables/ReminderService.html":{}}}],["want",{"_index":2743,"title":{},"body":{"index.html":{}}}],["ward",{"_index":2362,"title":{},"body":{"interfaces/User.html":{},"classes/UserEntity.html":{}}}],["we'll",{"_index":251,"title":{},"body":{"injectables/AdminService.html":{}}}],["week",{"_index":658,"title":{},"body":{"classes/CreateStandardDto.html":{},"classes/Hospital.html":{},"classes/Media-1.html":{},"injectables/MetricService.html":{},"injectables/RecordsService.html":{},"classes/Standard.html":{},"injectables/StandardService.html":{},"classes/VisitRecord.html":{},"classes/VisitRecordIncludeOtherTables.html":{},"classes/VisitRecordMetric.html":{}}}],["who_standard_value",{"_index":1438,"title":{},"body":{"injectables/MetricService.html":{},"injectables/StandardService.html":{}}}],["whostandardvalue",{"_index":659,"title":{},"body":{"classes/CreateStandardDto.html":{},"classes/Standard.html":{}}}],["workspace",{"_index":2698,"title":{},"body":{"index.html":{}}}],["writestream",{"_index":835,"title":{},"body":{"injectables/FileService.html":{}}}],["writestream.end",{"_index":838,"title":{},"body":{"injectables/FileService.html":{}}}],["writestream.on('error",{"_index":843,"title":{},"body":{"injectables/FileService.html":{}}}],["writestream.on('finish",{"_index":839,"title":{},"body":{"injectables/FileService.html":{}}}],["writestream.write(buffer",{"_index":837,"title":{},"body":{"injectables/FileService.html":{}}}],["x",{"_index":2786,"title":{},"body":{"index.html":{}}}],["xóa",{"_index":1204,"title":{},"body":{"controllers/MediaController.html":{},"injectables/PostsService.html":{}}}],["year",{"_index":249,"title":{},"body":{"injectables/AdminService.html":{}}}],["yes",{"_index":2172,"title":{},"body":{"classes/SocketIoAdapter.html":{},"miscellaneous/functions.html":{}}}],["youtube",{"_index":2788,"title":{},"body":{"index.html":{}}}],["zeros",{"_index":236,"title":{},"body":{"injectables/AdminService.html":{}}}],["zod",{"_index":2683,"title":{},"body":{"dependencies.html":{}}}],["zone.js",{"_index":2685,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":140,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogsModule.html":{},"modules/CategorysModule.html":{},"modules/CommentsModule.html":{},"modules/FileModule.html":{},"modules/HospitalModule.html":{},"modules/JwtUtilsModule.html":{},"modules/MailModule.html":{},"modules/MediaModule.html":{},"modules/MembershipsModule.html":{},"modules/MetricModule.html":{},"modules/NoteModule.html":{},"modules/PaymentModule.html":{},"modules/PayosModule.html":{},"modules/PostsModule.html":{},"modules/ReactionModule.html":{},"modules/RecordsModule.html":{},"modules/ReminderModule.html":{},"modules/StandardModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenAuthGuard.html":{"url":"guards/AccessTokenAuthGuard.html","title":"guard - AccessTokenAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtUtilsService: JwtUtilsService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtUtilsService\n                                                  \n                                                        \n                                                                        JwtUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { RefreshTokenRequest, UserRole } from '@pregnancy-journal-monorepo/contract';\nimport { RequestWithJWT } from 'express';\nimport { ROLES_KEY } from '../utils/decorators/role.decorator';\nimport { JwtUtilsService } from '../utils/jwt/jwtUtils.service';\n\n@Injectable()\nexport class AccessTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      throw new ForbiddenException('User access token authentication required');\n    }\n\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n// @Injectable()\n// export class EmailVerifyTokenAuthGuard implements CanActivate {\n//   constructor(\n//     private readonly jwtUtilsService: JwtUtilsService,\n//     private readonly configService: ConfigService,\n//   ) {}\n//\n//   canActivate(context: ExecutionContext): boolean {\n//     const request = context.switchToHttp().getRequest();\n//     const token = request.query.email_verify_token;\n//     if (!token) {\n//       throw new ForbiddenException('User authentication required');\n//     }\n//     try {\n//       const decoded_email_verify = this.jwtUtilsService.verifyToken({\n//         token: token,\n//         secret: this.configService.get('JWT_EMAIL_TOKEN_SECRET'),\n//       });\n//       request.decoded_email_verify = decoded_email_verify;\n//       return true;\n//     } catch (e) {\n//       throw new UnprocessableEntityException(e.message);\n//     }\n//   }\n// }\n\n@Injectable()\nexport class RefreshTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = (request.body as RefreshTokenRequest).refresh_token;\n    if (!token) {\n      throw new ForbiddenException('User authentication required');\n    }\n\n    try {\n      const decoded_refresh_token = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET') || 'jwt_secret',\n      });\n      const decoded_authorization = request.decoded_authorization;\n      if (decoded_authorization) {\n        if (decoded_authorization.user_id !== decoded_refresh_token.user_id) {\n          throw new ForbiddenException('Invalid token');\n        }\n      }\n      request.decoded_refresh_token = decoded_refresh_token;\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class RoleAuthGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [context.getHandler(), context.getClass()]);\n    if (!requiredRoles) {\n      return true;\n    }\n    try {\n      const request = context.switchToHttp().getRequest();\n      const token = request.headers.authorization?.split(' ')[1];\n      if (!token) {\n        throw new ForbiddenException('User authentication required');\n      }\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      if (!decoded_authorization) {\n        throw new ForbiddenException('User role authentication required');\n      }\n      const isAllowed = requiredRoles.includes(decoded_authorization.role);\n      if (!isAllowed) {\n        throw new ForbiddenException(\"You don't have permission to access\");\n      }\n      return isAllowed;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class IsLoggin implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      return true;\n    }\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n      return true;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/admin/admin.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleGetDashboard\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetDashboard\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetDashboard()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(dashboardContract.getDashboard)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/admin/admin.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { dashboardContract } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { AdminService } from './admin.service';\n\n@Controller()\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  @TsRestHandler(dashboardContract.getDashboard)\n  handleGetDashboard() {\n    return tsRestHandler(dashboardContract.getDashboard, async () => {\n      const dashboard = await this.adminService.getDashboard();\n      return { status: 200, body: dashboard };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nAdminModule -->\n\nDatabaseService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { UsersModule } from '../users/users.module';\nimport { AdminController } from './admin.controller';\nimport { AdminService } from './admin.service';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController],\n  providers: [AdminService, DatabaseService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getDashboard\n                            \n                            \n                                    Async\n                                getDashboardOverview\n                            \n                            \n                                    Async\n                                getDashboardPayment\n                            \n                            \n                                    Async\n                                getDashboardUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/admin/admin.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDashboard\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDashboard()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/admin/admin.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDashboardOverview\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDashboardOverview()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/admin/admin.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDashboardPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDashboardPayment()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/admin/admin.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDashboardUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDashboardUser()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/admin/admin.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DashboardOverviewType, DashboardPaymentType, DashboardType, DashboardUserType } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AdminService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async getDashboard(): Promise {\n    const overview = await this.getDashboardOverview();\n    const user = await this.getDashboardUser();\n    const payment = await this.getDashboardPayment();\n    return {\n      overview,\n      user,\n      payment,\n    };\n  }\n\n  async getDashboardOverview(): Promise {\n    const totalUsers = await this.usersService.users();\n\n    // Get all successful payments\n    const totalPayments = await this.databaseService.Payment.findMany({\n      where: {\n        status: 1,\n      },\n    });\n\n    // Get current month totalUsers and payments\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    const currentMonthUsers = totalUsers.filter((user) => {\n      const createDate = new Date(user.created_at);\n      return createDate.getMonth() === currentMonth && createDate.getFullYear() === currentYear;\n    });\n\n    // Calculate subscriber metrics\n    const totalSubscribers = totalPayments.filter((payment) => payment.expired_at && new Date(payment.expired_at) > new Date()).length;\n    // Get the first day of the current month\n    const firstDayOfMonth = new Date(currentYear, currentMonth, 1);\n\n    // Calculate new subscribers for the current month\n    const currentMonthSubscribers = totalPayments.filter((payment) => {\n      const paymentDate = new Date(payment.created_at);\n      return (\n        paymentDate >= firstDayOfMonth &&\n        paymentDate.getMonth() === currentMonth &&\n        paymentDate.getFullYear() === currentYear &&\n        payment.expired_at &&\n        new Date(payment.expired_at) > new Date()\n      );\n    }).length;\n\n    // Calculate package purchase metrics\n    const totalPackages = totalPayments.length;\n    const currentMonthPackages = totalPayments.filter((payment) => {\n      const paymentDate = new Date(payment.created_at);\n      return paymentDate.getMonth() === currentMonth && paymentDate.getFullYear() === currentYear;\n    }).length;\n\n    // Calculate revenue metrics\n    const totalRevenue = totalPayments.reduce((sum, payment) => sum + (payment.value || 0), 0);\n    const currentMonthRevenue = totalPayments\n      .filter((payment) => {\n        const paymentDate = new Date(payment.created_at);\n        return paymentDate.getMonth() === currentMonth && paymentDate.getFullYear() === currentYear;\n      })\n      .reduce((sum, payment) => sum + (payment.value || 0), 0);\n\n    return {\n      data: [\n        {\n          label: 'Total Users',\n          total: totalUsers.length,\n          currentMonth: currentMonthUsers.length,\n        },\n        {\n          label: 'Subscribers',\n          total: totalSubscribers,\n          currentMonth: currentMonthSubscribers,\n        },\n        {\n          label: 'Packages Purchased',\n          total: totalPackages,\n          currentMonth: currentMonthPackages,\n        },\n        {\n          label: 'Revenue',\n          total: totalRevenue,\n          currentMonth: currentMonthRevenue,\n        },\n      ],\n    };\n  }\n\n  async getDashboardUser(): Promise {\n    // Initialize arrays with zeros for all 12 months\n    const memberData = new Array(12).fill(0);\n    const subscriberData = new Array(12).fill(0);\n\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n\n    // Get all users once to prevent multiple database queries\n    const users = await this.usersService.users();\n\n    // Count users for each month of current year\n    for (const user of users) {\n      const createDate = new Date(user.created_at);\n      if (createDate.getFullYear() === currentYear) {\n        const month = createDate.getMonth();\n\n        // Since we only have memberData and subscriberData in the schema,\n        // we'll use subscriberData to track total new users per month\n        memberData[month]++;\n\n        // If needed, we can still track premium subscribers in memberData\n        if (await this.usersService.checkAccountMembership(user.user_id)) {\n          subscriberData[month]++;\n        }\n      }\n    }\n\n    return {\n      memberData,\n      subscriberData,\n    };\n  }\n\n  async getDashboardPayment(): Promise {\n    // Initialize arrays with zeros for all 12 months\n    const monthlyRevenue: number[] = new Array(12).fill(0);\n    const membership = new Array(12).fill(0);\n\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n\n    // Get all successful payments once to prevent multiple database queries\n    const payments = await this.databaseService.Payment.findMany({\n      where: {\n        status: 1,\n      },\n    });\n\n    // Count payments for each month of current year\n    for (const payment of payments) {\n      const paymentDate = new Date(payment.created_at);\n      if (paymentDate.getFullYear() === currentYear) {\n        const month = paymentDate.getMonth();\n\n        // Since we only have payment and membership in the schema,\n        // we'll use payment to track total payments per month\n        console.log(payment.value);\n        monthlyRevenue[month] += payment.value || 0;\n        console.log(payment[month]);\n        // If needed, we can still track membership payments in membership\n        if (await this.usersService.checkAccountMembership(payment.user_id)) {\n          membership[month]++;\n        }\n      }\n    }\n\n    return {\n      payment: monthlyRevenue,\n      membership: membership,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getData\n                        \n                    \n                \n            \n            \n                \n                        \n                    getData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nBlogsModule\n\nBlogsModule\n\nAppModule -->\n\nBlogsModule->AppModule\n\n\n\n\n\nCategorysModule\n\nCategorysModule\n\nAppModule -->\n\nCategorysModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\n\n\nHospitalModule\n\nHospitalModule\n\nAppModule -->\n\nHospitalModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nMembershipsModule\n\nMembershipsModule\n\nAppModule -->\n\nMembershipsModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nNoteModule\n\nNoteModule\n\nAppModule -->\n\nNoteModule->AppModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPayosModule\n\nPayosModule\n\nAppModule -->\n\nPayosModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nReactionModule\n\nReactionModule\n\nAppModule -->\n\nReactionModule->AppModule\n\n\n\n\n\nRecordsModule\n\nRecordsModule\n\nAppModule -->\n\nRecordsModule->AppModule\n\n\n\n\n\nReminderModule\n\nReminderModule\n\nAppModule -->\n\nReminderModule->AppModule\n\n\n\n\n\nStandardModule\n\nStandardModule\n\nAppModule -->\n\nStandardModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            BlogsModule\n                        \n                        \n                            CategorysModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            FileModule\n                        \n                        \n                            HospitalModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MediaModule\n                        \n                        \n                            MembershipsModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            NoteModule\n                        \n                        \n                            PaymentModule\n                        \n                        \n                            PayosModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            ReactionModule\n                        \n                        \n                            RecordsModule\n                        \n                        \n                            ReminderModule\n                        \n                        \n                            StandardModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AdminModule } from './admin/admin.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { BlogsModule } from './blogs/blogs.module';\nimport { CategorysModule } from './categorys/categorys.module';\nimport { CommentsModule } from './comments/comments.module';\nimport { FileModule } from './file/file.module';\nimport { HospitalModule } from './hosiptal/hospital.module';\nimport { MailModule } from './mail/mail.module';\nimport { MediaModule } from './media/media.module';\nimport { MembershipsModule } from './memberships/memberships.module';\nimport { MetricModule } from './metric/metric.module';\nimport { NoteModule } from './note/note.module';\nimport { PaymentModule } from './payment/payment.module';\nimport { PayosModule } from './payos/payos.module';\nimport { PostsModule } from './posts/posts.module';\nimport { ReactionModule } from './reaction/reaction.module';\nimport { RecordsModule } from './records/records.module';\nimport { ReminderModule } from './reminder/reminder.module';\nimport { StandardModule } from './standard/standard.module';\nimport { TagModule } from './tags/tag.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: '.env',\n    }),\n    MembershipsModule,\n    ReminderModule,\n    TagModule,\n    MetricModule,\n    HospitalModule,\n    CategorysModule,\n    BlogsModule,\n    FileModule,\n    MediaModule,\n    RecordsModule,\n    NoteModule,\n    StandardModule,\n    PostsModule,\n    CommentsModule,\n    ReactionModule,\n    MailModule,\n    PayosModule,\n    PaymentModule,\n    AdminModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Hello API' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nJwtUtilsModule->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport {\n  AccessTokenAuthGuard,\n  // EmailVerifyTokenAuthGuard,\n  IsLoggin,\n  RefreshTokenAuthGuard,\n  RoleAuthGuard,\n} from './auth.guard';\n\n@Module({\n  imports: [JwtUtilsModule],\n  providers: [\n    AccessTokenAuthGuard,\n    RoleAuthGuard,\n    // EmailVerifyTokenAuthGuard,\n    RefreshTokenAuthGuard,\n    IsLoggin,\n    ConfigModule,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Blog.html":{"url":"classes/Blog.html","title":"class - Blog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Blog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/blogs/entities/blog.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Blog {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogsController.html":{"url":"controllers/BlogsController.html","title":"controller - BlogsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/blogs/blogs.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                handleGetBlogByCategory\n                            \n                            \n                                    \n                                handleGetBlogByTag\n                            \n                            \n                                    \n                                handleGetOne\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(createBlogDto: BlogCreateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(blogContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBlogDto\n                                            \n                                                            BlogCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(blogContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll(page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(blogContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetBlogByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetBlogByCategory(category_id: string, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(blogContract.getBlogByCategory)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetBlogByTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetBlogByTag(tagId: string[], page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(blogContract.getBlogByTag)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tagId\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(blogContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(updateBlogDto: BlogUpdateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(blogContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateBlogDto\n                                            \n                                                            BlogUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Query } from '@nestjs/common';\nimport { blogContract, BlogCreateRequestType, BlogUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { BlogsService } from './blogs.service';\n\n@Controller()\nexport class BlogsController {\n  constructor(private readonly blogsService: BlogsService) {}\n\n  @TsRestHandler(blogContract.create)\n  handleCreate(@Body() createBlogDto: BlogCreateRequestType) {\n    return tsRestHandler(blogContract.create, async () => {\n      const result = await this.blogsService.create(createBlogDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(blogContract.getAll)\n  handleGetAll(@Query('page') page: number, @Query('limit') limit: number) {\n    return tsRestHandler(blogContract.getAll, async () => {\n      page = page ? page : 1;\n      limit = limit ? limit : 10;\n\n      const result = await this.blogsService.findAll(Number(page), Number(limit));\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(blogContract.getBlogByCategory)\n  handleGetBlogByCategory(@Param('category_id') category_id: string, @Query('page') page: number, @Query('limit') limit: number) {\n    return tsRestHandler(blogContract.getBlogByCategory, async () => {\n      page = page ? page : 1;\n      limit = limit ? limit : 10;\n      const result = await this.blogsService.findByCategory({ page, limit, category_id });\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(blogContract.getBlogByTag)\n  handleGetBlogByTag(@Param('tag_id') tagId: string[], @Query('page') page: number, @Query('limit') limit: number) {\n    return tsRestHandler(blogContract.getBlogByTag, async () => {\n      page = page ? page : 1;\n      limit = limit ? limit : 10;\n      const result = await this.blogsService.findByTag(page, limit, tagId);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(blogContract.getOne)\n  handleGetOne(@Param('id') id: string) {\n    return tsRestHandler(blogContract.getOne, async () => {\n      const result = await this.blogsService.findOne(id);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(blogContract.update)\n  handleUpdate(@Body() updateBlogDto: BlogUpdateRequestType) {\n    return tsRestHandler(blogContract.update, async () => {\n      const result = await this.blogsService.update(updateBlogDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(blogContract.delete)\n  handleDelete(@Param('id') id: string) {\n    return tsRestHandler(blogContract.delete, async () => {\n      const result = await this.blogsService.remove(id);\n      return { status: 200, body: result };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogsModule.html":{"url":"modules/BlogsModule.html","title":"module - BlogsModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BlogsModule\n\n\n\ncluster_BlogsModule_providers\n\n\n\n\nBlogsService\n\nBlogsService\n\n\n\nBlogsModule\n\nBlogsModule\n\nBlogsModule -->\n\nBlogsService->BlogsModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nBlogsModule -->\n\nDatabaseService->BlogsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/blogs/blogs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogsService\n                        \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { BlogsController } from './blogs.controller';\nimport { BlogsService } from './blogs.service';\n\n@Module({\n  controllers: [BlogsController],\n  providers: [BlogsService, DatabaseService],\n})\nexport class BlogsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogsService.html":{"url":"injectables/BlogsService.html","title":"injectable - BlogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/blogs/blogs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByCategory\n                            \n                            \n                                    Async\n                                findByTag\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createBlogDto: BlogCreateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBlogDto\n                                            \n                                                            BlogCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByCategory(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByTag(page: number, limit: number, tag_id: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tag_id\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:202\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:289\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateBlogDto: BlogUpdateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/blogs/blogs.service.ts:237\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateBlogDto\n                                            \n                                                            BlogUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { BlogCreateRequestType, BlogResponseType, BlogUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\n\n@Injectable()\nexport class BlogsService {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  async create(createBlogDto: BlogCreateRequestType) {\n    const category = await this.databaseService.Category.findUnique({\n      where: {\n        category_id: createBlogDto.category_id,\n      },\n    });\n\n    if (!category) {\n      throw new NotFoundException('Category not found');\n    }\n\n    const blog = await this.databaseService.Blog.create({\n      data: {\n        title: createBlogDto.title,\n        content: createBlogDto.content,\n        author: createBlogDto.author,\n        summary: createBlogDto.summary,\n        created_at: new Date(Date.now()),\n        updated_at: new Date(Date.now()),\n        blog_cover: createBlogDto.blog_cover,\n        category: {\n          connect: {\n            category_id: createBlogDto.category_id,\n          },\n        },\n      },\n    });\n\n    if (createBlogDto.tags_id) {\n      for (const tag_id of createBlogDto.tags_id) {\n        const tag = await this.databaseService.Tag.findUnique({\n          where: {\n            tag_id: tag_id,\n          },\n        });\n\n        if (!tag) {\n          throw new NotFoundException('Tag not found');\n        }\n      }\n\n      await this.databaseService.BlogOnTag.createMany({\n        data: createBlogDto.tags_id\n          .filter((tag_id) => tag_id !== undefined)\n          .map((tag_id) => ({\n            blog_id: blog.blog_id,\n            tag_id: tag_id as string,\n          })),\n      });\n    }\n\n    return blog;\n  }\n\n  async findAll(page: number, limit: number): Promise {\n    const result = await this.databaseService.Blog.findMany({\n      skip: page == 0 ? Number(page) : (page - 1) * limit,\n      take: Number(limit),\n      include: {\n        category: true,\n        blog_tag: {\n          include: {\n            tag: true,\n          },\n        },\n      },\n    });\n\n    const total_page = Math.ceil((await this.databaseService.Blog.count()) / limit);\n\n    const blogs = result.map((blog) => ({\n      blog_id: blog.blog_id,\n      title: blog.title,\n      author: blog.author,\n      content: blog.content,\n      created_at: blog.created_at,\n      updated_at: blog.updated_at,\n      blog_cover: blog.blog_cover,\n      category: {\n        status: blog.category.status,\n        title: blog.category.title,\n        category_id: blog.category.category_id,\n      },\n      tags: blog.blog_tag.map((item) => ({\n        title: item.tag.title,\n        tag_id: item.tag.tag_id,\n        status: item.tag.status,\n      })),\n      summary: blog.summary,\n    }));\n\n    return { blogs, total_page };\n  }\n\n  async findByCategory({ limit, category_id, page }: { page: number; limit: number; category_id: string }) {\n    const result = await this.databaseService.Blog.findMany({\n      skip: page == 0 ? Number(page) : (page - 1) * limit,\n      take: Number(limit),\n      where: {\n        category_id,\n      },\n      include: {\n        category: true,\n        blog_tag: {\n          include: {\n            tag: true,\n          },\n        },\n      },\n    });\n\n    const total_page = Math.ceil((await this.databaseService.Blog.count()) / limit);\n\n    const blogs = result.map((blog) => ({\n      blog_id: blog.blog_id,\n      title: blog.title,\n      author: blog.author,\n      content: blog.content,\n      created_at: blog.created_at,\n      updated_at: blog.updated_at,\n      blog_cover: blog.blog_cover,\n      category: {\n        status: blog.category.status,\n        title: blog.category.title,\n        category_id: blog.category.category_id,\n      },\n      tags: blog.blog_tag.map((item) => ({\n        title: item.tag.title,\n        tag_id: item.tag.tag_id,\n        status: item.tag.status,\n      })),\n      summary: blog.summary,\n    }));\n\n    return { blogs, total_page };\n  }\n\n  async findByTag(\n    page: number,\n    limit: number,\n    tag_id: string[],\n  ): Promise {\n    const result = await this.databaseService.Blog.findMany({\n      skip: page == 0 ? Number(page) : (page - 1) * limit,\n      take: Number(limit),\n      where: {\n        blog_tag: {\n          some: {\n            tag_id: {\n              in: tag_id,\n            },\n          },\n        },\n      },\n      include: {\n        category: true,\n        blog_tag: {\n          include: {\n            tag: true,\n          },\n        },\n      },\n    });\n\n    const total_page = Math.ceil((await this.databaseService.Blog.count()) / limit);\n\n    const blogs = result.map((blog) => ({\n      blog_id: blog.blog_id,\n      title: blog.title,\n      author: blog.author,\n      content: blog.content,\n      created_at: blog.created_at,\n      updated_at: blog.updated_at,\n      blog_cover: blog.blog_cover,\n      category: {\n        status: blog.category.status,\n        title: blog.category.title,\n        category_id: blog.category.category_id,\n      },\n      tags: blog.blog_tag.map((item) => ({\n        title: item.tag.title,\n        tag_id: item.tag.tag_id,\n        status: item.tag.status,\n      })),\n      summary: blog.summary,\n    }));\n\n    return { blogs, total_page };\n  }\n\n  async findOne(id: string): Promise {\n    const result = await this.databaseService.Blog.findUnique({\n      where: {\n        blog_id: id,\n      },\n      include: {\n        blog_tag: {\n          include: {\n            tag: true,\n          },\n        },\n        category: true,\n      },\n    });\n\n    if (!result) {\n      throw new NotFoundException('Blog not found');\n    }\n\n    const tags = result.blog_tag.map((item) => item.tag);\n\n    return {\n      blog_id: result.blog_id,\n      title: result.title,\n      content: result.content,\n      author: result.author,\n      summary: result.summary,\n      created_at: result.created_at,\n      updated_at: result.updated_at,\n      blog_cover: result.blog_cover,\n      category: result.category,\n      tags: tags,\n    };\n  }\n\n  async update(updateBlogDto: BlogUpdateRequestType) {\n    const cur = await this.databaseService.Blog.findUnique({\n      where: {\n        blog_id: updateBlogDto.blog_id,\n      },\n    });\n    const tags = updateBlogDto.tags_id;\n    updateBlogDto.tags_id = undefined;\n    if (!cur) {\n      throw new NotFoundException('Blog not found');\n    }\n    await this.databaseService.Blog.update({\n      where: {\n        blog_id: updateBlogDto.blog_id,\n      },\n      data: {\n        ...updateBlogDto,\n      },\n    });\n\n    if (tags) {\n      for (const tag_id of tags) {\n        const tag = await this.databaseService.Tag.findUnique({\n          where: {\n            tag_id: tag_id,\n          },\n        });\n\n        if (!tag) {\n          throw new NotFoundException('Tag not found');\n        }\n      }\n\n      await this.databaseService.BlogOnTag.deleteMany({\n        where: {\n          blog_id: updateBlogDto.blog_id,\n        },\n      });\n\n      await this.databaseService.BlogOnTag.createMany({\n        data: tags\n          .filter((tag_id) => tag_id !== undefined)\n          .map((tag_id) => ({\n            blog_id: updateBlogDto.blog_id,\n            tag_id: tag_id,\n          })),\n      });\n    }\n\n    return this.findOne(updateBlogDto.blog_id);\n  }\n\n  async remove(id: string) {\n    const cur = await this.findOne(id);\n    if (!cur) {\n      throw new NotFoundException('Blog not found');\n    }\n    await this.databaseService.BlogOnTag.deleteMany({\n      where: {\n        blog_id: id,\n      },\n    });\n\n    return this.databaseService.Blog.delete({\n      where: {\n        blog_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/categorys/entities/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(category: CategoryResponse)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/categorys/entities/category.entity.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        category\n                                                  \n                                                        \n                                                                        CategoryResponse\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/categorys/entities/category.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Status\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/categorys/entities/category.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/categorys/entities/category.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CategoryResponse, Status } from '@pregnancy-journal-monorepo/contract';\n\nexport class Category {\n  id: string;\n  title: string;\n  status: Status;\n\n  constructor(category: CategoryResponse) {\n    this.id = category.category_id;\n    this.title = category.title;\n    this.status = category.status;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategorysController.html":{"url":"controllers/CategorysController.html","title":"controller - CategorysController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategorysController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/categorys/categorys.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                handleGetOne\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(createCategoryDto: CategoryCreateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(categoryContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CategoryCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(categoryContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(categoryContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(categoryContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(updateCategoryDto: CategoryUpdateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(categoryContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateCategoryDto\n                                            \n                                                            CategoryUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param } from '@nestjs/common';\nimport { categoryContract, CategoryCreateRequest, CategoryUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { CategorysService } from './categorys.service';\n\n@Controller()\nexport class CategorysController {\n  constructor(private readonly categorysService: CategorysService) {}\n\n  @TsRestHandler(categoryContract.create)\n  handleCreate(@Body() createCategoryDto: CategoryCreateRequest) {\n    return tsRestHandler(categoryContract.create, async () => {\n      const result = await this.categorysService.create(createCategoryDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(categoryContract.getAll)\n  handleGetAll() {\n    return tsRestHandler(categoryContract.getAll, async () => {\n      const result = await this.categorysService.findAll();\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(categoryContract.getOne)\n  handleGetOne(@Param('id') id: string) {\n    return tsRestHandler(categoryContract.getOne, async () => {\n      const result = await this.categorysService.findOne(id);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(categoryContract.update)\n  handleUpdate(@Body() updateCategoryDto: CategoryUpdateRequest) {\n    return tsRestHandler(categoryContract.update, async () => {\n      const result = await this.categorysService.update(updateCategoryDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(categoryContract.delete)\n  handleDelete(@Param('id') id: string) {\n    return tsRestHandler(categoryContract.delete, async () => {\n      const result = await this.categorysService.remove(id);\n      return { status: 200, body: result };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategorysModule.html":{"url":"modules/CategorysModule.html","title":"module - CategorysModule","body":"\n                   \n\n\n\n\n    Modules\n    CategorysModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategorysModule\n\n\n\ncluster_CategorysModule_providers\n\n\n\n\nCategorysService\n\nCategorysService\n\n\n\nCategorysModule\n\nCategorysModule\n\nCategorysModule -->\n\nCategorysService->CategorysModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nCategorysModule -->\n\nDatabaseService->CategorysModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/categorys/categorys.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategorysService\n                        \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategorysController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { CategorysController } from './categorys.controller';\nimport { CategorysService } from './categorys.service';\n\n@Module({\n  controllers: [CategorysController],\n  providers: [CategorysService, DatabaseService],\n})\nexport class CategorysModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategorysService.html":{"url":"injectables/CategorysService.html","title":"injectable - CategorysService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategorysService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/categorys/categorys.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/categorys/categorys.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CategoryCreateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CategoryCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateCategoryDto: CategoryUpdateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/categorys/categorys.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateCategoryDto\n                                            \n                                                            CategoryUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CategoryCreateRequest, CategoryUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\n\n@Injectable()\nexport class CategorysService {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  async create(createCategoryDto: CategoryCreateRequest) {\n    return this.databaseService.Category.create({\n      data: {\n        status: createCategoryDto.status,\n        title: createCategoryDto.title,\n      },\n    });\n  }\n\n  findAll() {\n    return this.databaseService.Category.findMany();\n  }\n\n  async findOne(id: string) {\n    const result = await this.databaseService.Category.findUnique({\n      where: {\n        category_id: id,\n      },\n    });\n    if (!result) {\n      throw new NotFoundException('Category not found');\n    }\n    return result;\n  }\n\n  async update(updateCategoryDto: CategoryUpdateRequest) {\n    const cur = await this.findOne(updateCategoryDto.category_id);\n    if (!cur) {\n      throw new NotFoundException('Category not found');\n    }\n    return this.databaseService.Category.update({\n      where: {\n        category_id: updateCategoryDto.category_id,\n      },\n      data: updateCategoryDto,\n    });\n  }\n\n  async remove(id: string) {\n    const cur = await this.findOne(id);\n    if (!cur) {\n      throw new NotFoundException('Category not found');\n    }\n    return this.databaseService.Category.delete({\n      where: {\n        category_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/comments/comments.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(createCommentDto: CommentCreateRequestType, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(commentContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCommentDto\n                                            \n                                                        CommentCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(commentContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll(post_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(commentContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                post_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(updateCommentDto: CommentUpdateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(commentContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateCommentDto\n                                            \n                                                        CommentUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, NotFoundException, Param, Req, UseGuards } from '@nestjs/common';\nimport { commentContract, CommentCreateRequestType, CommentUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { RequestWithJWT } from 'express';\nimport { AccessTokenAuthGuard } from '../auth/auth.guard';\nimport { CommentsService } from './comments.service';\n\n@Controller()\nexport class CommentsController {\n  constructor(private readonly commentsService: CommentsService) {}\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(commentContract.create)\n  handleCreate(@Body() createCommentDto: CommentCreateRequestType, @Req() req: RequestWithJWT) {\n    return tsRestHandler(commentContract.create, async () => {\n      if (!req.decoded_authorization) {\n        throw new NotFoundException('Token is invalid');\n      }\n      const user_id = req.decoded_authorization.user_id;\n\n      const result = await this.commentsService.createComment({ comment: createCommentDto, user_id: user_id });\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(commentContract.getAll)\n  handleGetAll(@Param('post_id') post_id: string) {\n    return tsRestHandler(commentContract.getAll, async () => {\n      const result = await this.commentsService.getAllCommentsByPostId(post_id);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(commentContract.update)\n  handleUpdate(@Body() updateCommentDto: CommentUpdateRequestType) {\n    return tsRestHandler(commentContract.update, async () => {\n      const result = await this.commentsService.updateComment(updateCommentDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(commentContract.delete)\n  handleDelete(@Param('id') id: string) {\n    return tsRestHandler(commentContract.delete, async () => {\n      const result = await this.commentsService.deleteComment(id);\n      return { status: 200, body: result };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_CommentsModule_imports\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nJwtUtilsModule->CommentsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nCommentsModule -->\n\nPostsModule->CommentsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nCommentsModule -->\n\nUsersModule->CommentsModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nCommentsModule -->\n\nDatabaseService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentsService\n                        \n                        \n                            DatabaseService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { PostsModule } from '../posts/posts.module';\nimport { UsersModule } from '../users/users.module';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport { CommentsController } from './comments.controller';\nimport { CommentsService } from './comments.service';\n\n@Module({\n  imports: [UsersModule, PostsModule, JwtUtilsModule],\n  controllers: [CommentsController],\n  providers: [CommentsService, DatabaseService],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentsService.html":{"url":"injectables/CommentsService.html","title":"injectable - CommentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/comments/comments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                getAllCommentsByPostId\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DatabaseService, postService: PostsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/comments/comments.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createComment(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteComment(comment_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                comment_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllCommentsByPostId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllCommentsByPostId(post_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                post_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateComment(comment: CommentUpdateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/comments/comments.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                comment\n                                            \n                                                        CommentUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CommentCreateRequestType, CommentType, CommentUpdateRequestType } from '../../../../../libs/contract/src/lib/comment.contract';\nimport { DatabaseService } from '../database/database.service';\nimport { PostsService } from '../posts/posts.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class CommentsService {\n  constructor(\n    private readonly dataService: DatabaseService,\n    private readonly postService: PostsService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async createComment({ comment, user_id }: { comment: CommentCreateRequestType; user_id: string }): Promise {\n    await this.postService.findOne(comment.post_id);\n    await this.usersService.getUserById(user_id);\n    return await this.dataService.Comment.create({\n      data: {\n        content: comment.content,\n        created_at: new Date(Date.now()),\n        updated_at: new Date(Date.now()),\n        post: {\n          connect: {\n            post_id: comment.post_id,\n          },\n        },\n        user: {\n          connect: {\n            user_id: user_id,\n          },\n        },\n      },\n    });\n  }\n\n  async getAllCommentsByPostId(post_id: string) {\n    await this.postService.findOne(post_id);\n    return await this.dataService.Comment.findMany({\n      where: {\n        post_id,\n      },\n    });\n  }\n\n  async updateComment(comment: CommentUpdateRequestType) {\n    const result = await this.dataService.Comment.findUnique({\n      where: {\n        comment_id: comment.comment_id,\n      },\n    });\n    if (!result) {\n      throw new NotFoundException('Comment not found');\n    }\n\n    return await this.dataService.Comment.update({\n      where: {\n        comment_id: comment.comment_id,\n      },\n      data: {\n        content: comment.content,\n        updated_at: new Date(Date.now()),\n      },\n    });\n  }\n\n  async deleteComment(comment_id: string) {\n    const result = await this.dataService.Comment.findUnique({\n      where: {\n        comment_id,\n      },\n    });\n    if (!result) {\n      throw new NotFoundException('Comment not found');\n    }\n\n    return await this.dataService.Comment.delete({\n      where: {\n        comment_id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateReactionDto.html":{"url":"classes/CreateReactionDto.html","title":"class - CreateReactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateReactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reaction/dto/create-reaction.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateReactionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateStandardDto.html":{"url":"classes/CreateStandardDto.html","title":"class - CreateStandardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateStandardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/standard/dto/create-standard.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lowerBound\n                            \n                            \n                                metricId\n                            \n                            \n                                upperBound\n                            \n                            \n                                week\n                            \n                            \n                                whoStandardValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lowerBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/dto/create-standard.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metricId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/dto/create-standard.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upperBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/dto/create-standard.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        week\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/dto/create-standard.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whoStandardValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/dto/create-standard.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateStandardDto {\n  metricId: string;\n  week: number;\n  upperBound: number;\n  lowerBound: number;\n  whoStandardValue: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DatabaseService.html":{"url":"injectables/DatabaseService.html","title":"injectable - DatabaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DatabaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/database/database.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                prisma\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    Token\n                                \n                                \n                                    User\n                                \n                                \n                                    MemberShip\n                                \n                                \n                                    Reminder\n                                \n                                \n                                    Category\n                                \n                                \n                                    Tag\n                                \n                                \n                                    Standard\n                                \n                                \n                                    Metric\n                                \n                                \n                                    Hospital\n                                \n                                \n                                    Blog\n                                \n                                \n                                    BlogOnTag\n                                \n                                \n                                    Media\n                                \n                                \n                                    Record\n                                \n                                \n                                    RecordMetric\n                                \n                                \n                                    Note\n                                \n                                \n                                    Post\n                                \n                                \n                                    Comment\n                                \n                                \n                                    Payment\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/database/database.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        Token\n                    \n                \n\n                \n                    \n                        getToken()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:8\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        User\n                    \n                \n\n                \n                    \n                        getUser()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:12\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        MemberShip\n                    \n                \n\n                \n                    \n                        getMemberShip()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Reminder\n                    \n                \n\n                \n                    \n                        getReminder()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:20\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Category\n                    \n                \n\n                \n                    \n                        getCategory()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:24\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Tag\n                    \n                \n\n                \n                    \n                        getTag()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:28\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Standard\n                    \n                \n\n                \n                    \n                        getStandard()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:32\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Metric\n                    \n                \n\n                \n                    \n                        getMetric()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:36\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Hospital\n                    \n                \n\n                \n                    \n                        getHospital()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:40\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Blog\n                    \n                \n\n                \n                    \n                        getBlog()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:44\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        BlogOnTag\n                    \n                \n\n                \n                    \n                        getBlogOnTag()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:48\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Media\n                    \n                \n\n                \n                    \n                        getMedia()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Record\n                    \n                \n\n                \n                    \n                        getRecord()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        RecordMetric\n                    \n                \n\n                \n                    \n                        getRecordMetric()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:60\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Note\n                    \n                \n\n                \n                    \n                        getNote()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:64\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Post\n                    \n                \n\n                \n                    \n                        getPost()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:68\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Comment\n                    \n                \n\n                \n                    \n                        getComment()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Payment\n                    \n                \n\n                \n                    \n                        getPayment()\n                    \n                \n                            \n                                \n                                    Defined in apps/be-nestjs-app/src/app/database/database.service.ts:76\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class DatabaseService {\n  private readonly prisma = new PrismaClient();\n\n  get Token() {\n    return this.prisma.token;\n  }\n\n  get User() {\n    return this.prisma.user;\n  }\n\n  get MemberShip() {\n    return this.prisma.membership;\n  }\n\n  get Reminder() {\n    return this.prisma.reminder;\n  }\n\n  get Category() {\n    return this.prisma.category;\n  }\n\n  get Tag() {\n    return this.prisma.tag;\n  }\n\n  get Standard() {\n    return this.prisma.standard;\n  }\n\n  get Metric() {\n    return this.prisma.metric;\n  }\n\n  get Hospital() {\n    return this.prisma.hospital;\n  }\n\n  get Blog() {\n    return this.prisma.blog;\n  }\n\n  get BlogOnTag() {\n    return this.prisma.blog_tag;\n  }\n\n  get Media() {\n    return this.prisma.media;\n  }\n\n  get Record() {\n    return this.prisma.visit_record;\n  }\n\n  get RecordMetric() {\n    return this.prisma.visit_record_metric;\n  }\n\n  get Note() {\n    return this.prisma.note;\n  }\n\n  get Post() {\n    return this.prisma.post;\n  }\n\n  get Comment() {\n    return this.prisma.comment;\n  }\n\n  get Payment() {\n    return this.prisma.payment_history;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FileModule.html":{"url":"modules/FileModule.html","title":"module - FileModule","body":"\n                   \n\n\n\n\n    Modules\n    FileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\n\nFileService\n\nFileService\n\n\n\nFileModule\n\nFileModule\n\nFileModule -->\n\nFileService->FileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/file/file.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileService } from './file.service';\n\n@Module({\n  imports: [],\n  providers: [FileService],\n})\nexport class FileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FileService.html":{"url":"injectables/FileService.html","title":"injectable - FileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/file/file.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createPresignedUrlWithClient\n                            \n                            \n                                    Private\n                                s3Client\n                            \n                            \n                                    Private\n                                    Readonly\n                                uploadPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                deleteLocalFile\n                            \n                            \n                                    Async\n                                getFile\n                            \n                            \n                                    Async\n                                getImageUrl\n                            \n                            \n                                    Async\n                                uploadToR2\n                            \n                            \n                                    Async\n                                uploadToR2Blob\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/file/file.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/file/file.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteLocalFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteLocalFile(fileName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/file/file.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFile(filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/file/file.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getImageUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getImageUrl(filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/file/file.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadToR2\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadToR2(file: Express.Multer.File, filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/file/file.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadToR2Blob\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadToR2Blob(file: Blob, filename: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/file/file.service.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createPresignedUrlWithClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/file/file.service.ts:129\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        s3Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     S3Client\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/file/file.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        uploadPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : join(__dirname, '..', '..', 'images')\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/file/file.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { DeleteObjectCommand, GetObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { Upload } from '@aws-sdk/lib-storage';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Express } from 'express';\nimport { constants, createReadStream } from 'fs';\nimport { access, unlink } from 'fs/promises';\nimport { IncomingMessage } from 'http';\nimport { join } from 'path';\n\n@Injectable()\nexport class FileService {\n  private s3Client: S3Client;\n  private readonly uploadPath = join(__dirname, '..', '..', 'images');\n\n  constructor(private readonly configService: ConfigService) {\n    const endpoint = this.configService.get('CLOUDFLARE_ENDPOINT');\n    const accessKey = this.configService.get('CLOUDFLARE_ACCESS');\n    const secretKey = this.configService.get('CLOUDFLARE_SECRET');\n\n    if (!endpoint || !accessKey || !secretKey) {\n      throw new BadRequestException('Cloudflare credentials not set');\n    } else {\n      this.s3Client = new S3Client({\n        region: 'auto',\n        endpoint: endpoint,\n        credentials: {\n          accessKeyId: accessKey,\n          secretAccessKey: secretKey,\n        },\n      });\n    }\n  }\n\n  async uploadToR2(file: Express.Multer.File, filename: string) {\n    try {\n      const upload = new Upload({\n        client: this.s3Client,\n        params: {\n          Bucket: this.configService.get('CLOUDFLARE_BUCKET'),\n          Key: filename,\n          Body: createReadStream(file.path),\n        },\n      });\n      await upload.done();\n      return true;\n    } catch (error) {\n      console.error('Error uploading to R2:', error);\n      throw error;\n    }\n  }\n\n  async uploadToR2Blob(file: Blob, filename: string) {\n    try {\n      const upload = new Upload({\n        client: this.s3Client,\n        params: {\n          Bucket: this.configService.get('CLOUDFLARE_BUCKET'),\n          Key: filename,\n          Body: file,\n        },\n      });\n      await upload.done();\n      return true;\n    } catch (error) {\n      console.error('Error uploading to R2:', error);\n      throw error;\n    }\n  }\n\n  async getFile(filename: string) {\n    try {\n      const command = new GetObjectCommand({\n        Bucket: this.configService.get('CLOUDFLARE_BUCKET'),\n        Key: filename,\n      });\n\n      const response = await this.s3Client.send(command);\n      return response.Body;\n    } catch (error) {\n      console.error('Error getting file from R2:', error);\n      throw error;\n    }\n  }\n\n  // async downloadFile(filename: string) {\n  //   try {\n  //     const file = await this.getFile(filename);\n  //     const buffer = await streamToBuffer(file as IncomingMessage);\n  //\n  //     const filePath = join(this.uploadPath, filename);\n  //\n  //     // Ensure the upload directory exists\n  //     mkdirSync(this.uploadPath, { recursive: true });\n  //\n  //     const writeStream = createWriteStream(filePath);\n  //     writeStream.write(buffer);\n  //     writeStream.end();\n  //     // writeStream.on('finish', () => {\n  //     //   res.send({ message: 'File saved successfully', path: filePath });\n  //     // });\n  //     writeStream.on('error', (error) => {\n  //       throw new BadRequestException('Could not save file');\n  //     });\n  //     return filePath;\n  //   } catch (error) {\n  //     console.error('Error downloading file:', error);\n  //     throw error;\n  //   }\n  // }\n\n  async deleteFile(filename: string) {\n    try {\n      const command = new DeleteObjectCommand({\n        Bucket: this.configService.get('CLOUDFLARE_BUCKET'),\n        Key: filename,\n      });\n      // await this.deleteLocalFile(filename);\n      await this.s3Client.send(command);\n      return true;\n    } catch (error) {\n      console.error('Error deleting file from R2:', error);\n      throw error;\n    }\n  }\n\n  //hàm này dùng để tạo presign gửi đi khi upload (cũ bỏ ko làm cách này nữa)\n  createPresignedUrlWithClient = () => {\n    const bucket = this.configService.get('CLOUDFLARE_BUCKET');\n    const key = this.configService.get('CLOUDFLARE_SECRET');\n\n    const client = new S3Client({ region: 'auto' });\n    const command = new PutObjectCommand({ Bucket: bucket, Key: key });\n    return getSignedUrl(client, command, { expiresIn: 3600 });\n  };\n\n  // async getFilePath(filename: string) {\n  //   const filepath = await this.downloadFile(filename);\n  //   console.log(filepath);\n  //   return join(this.uploadPath, filepath);\n  // }\n\n  async deleteLocalFile(fileName: string) {\n    try {\n      const filePath = join(this.uploadPath, fileName);\n      await access(filePath, constants.F_OK);\n      await unlink(filePath);\n      return true;\n    } catch (error) {\n      console.error('Error deleting local file:', error);\n      throw error;\n    }\n  }\n\n  //lấy cái link presign để gửi đi khi mún download file, dùng tấm ảnh\n  async getImageUrl(filename: string) {\n    const command = new GetObjectCommand({\n      Bucket: this.configService.get('CLOUDFLARE_BUCKET'),\n      Key: filename,\n    });\n    const url = await getSignedUrl(this.s3Client, command, { expiresIn: 604800 });\n    return url;\n  }\n}\n\nfunction streamToBuffer(stream: IncomingMessage): Promise {\n  return new Promise((resolve, reject) => {\n    const chunks: Buffer[] = [];\n    stream.on('data', (chunk) => chunks.push(chunk));\n    stream.on('end', () => resolve(Buffer.concat(chunks)));\n    stream.on('error', reject);\n  });\n}\n\nexport const blobToFile = (blob: Blob, fileName: string): File => {\n  //Cast to a File() type\n  return new File([blob], fileName, { lastModified: new Date(Date.now()).getTime() });\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Hospital.html":{"url":"classes/Hospital.html","title":"class - Hospital","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Hospital\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                hospital_id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hospital_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class VisitRecord {\n  visit_record_id: string;\n  next_visit_doctor_date: Date | null;\n  visit_doctor_date: Date;\n  doctor_name: string;\n  hospital_id: string;\n  created_at: Date;\n  user_id: string;\n}\n\nexport class VisitRecordMetric {\n  visit_record_id: string;\n  created_at: Date;\n  value: number;\n  metric_id: string;\n  updated_at: Date;\n  visit_record_metric_id: string;\n  tag_id: string | null;\n}\n\nexport class Media {\n  visit_record_id: string | null;\n  created_at: Date;\n  media_id: string;\n  media_url: string;\n  post_id: string | null;\n}\n\nexport class Hospital {\n  hospital_id: string;\n  name: string;\n  city: string;\n}\n\nexport class VisitRecordIncludeOtherTables extends VisitRecord {\n  media: Media[];\n  hospital: Hospital;\n  visit_record_metric: VisitRecordMetric[];\n  week?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HospitalController.html":{"url":"controllers/HospitalController.html","title":"controller - HospitalController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HospitalController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/hosiptal/hospital.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCreateHospital\n                            \n                            \n                                    \n                                handleFindAllHospitals\n                            \n                            \n                                    \n                                handleFindOneHospitals\n                            \n                            \n                                    \n                                handleUpdateHospital\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCreateHospital\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreateHospital(hospital: HospitalCreateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(hospitalContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hospital\n                                            \n                                                            HospitalCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleFindAllHospitals\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFindAllHospitals()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(hospitalContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleFindOneHospitals\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFindOneHospitals(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(hospitalContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdateHospital\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdateHospital(hospital: HospitalUpdateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(hospitalContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hospital\n                                            \n                                                            HospitalUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, NotFoundException, Param } from '@nestjs/common';\nimport { hospitalContract, HospitalCreateRequestType, HospitalUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { HospitalService } from './hospital.service';\n\n@Controller()\nexport class HospitalController {\n  constructor(private readonly hospitalService: HospitalService) {}\n\n  @TsRestHandler(hospitalContract.getAll)\n  handleFindAllHospitals() {\n    return tsRestHandler(hospitalContract.getAll, async () => {\n      const hospitalises = await this.hospitalService.findAll();\n      return { status: 200, body: hospitalises };\n    });\n  }\n\n  @TsRestHandler(hospitalContract.getOne)\n  handleFindOneHospitals(@Param('id') id: string) {\n    return tsRestHandler(hospitalContract.getOne, async () => {\n      const hospital = await this.hospitalService.findOne(id);\n      if (!hospital) {\n        throw new NotFoundException('Hospital not found');\n      }\n      return { status: 200, body: hospital };\n    });\n  }\n\n  @TsRestHandler(hospitalContract.create)\n  handleCreateHospital(@Body() hospital: HospitalCreateRequestType) {\n    return tsRestHandler(hospitalContract.create, async () => {\n      const re = await this.hospitalService.create(hospital);\n      return { status: 200, body: re };\n    });\n  }\n\n  @TsRestHandler(hospitalContract.update)\n  handleUpdateHospital(@Body() hospital: HospitalUpdateRequestType) {\n    return tsRestHandler(hospitalContract.update, async () => {\n      const re = await this.hospitalService.update(hospital);\n      return { status: 200, body: re };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HospitalEntity.html":{"url":"classes/HospitalEntity.html","title":"class - HospitalEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HospitalEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/hosiptal/entities/hosiptal.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hospitalData: Hospital)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/hosiptal/entities/hosiptal.entity.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hospitalData\n                                                  \n                                                        \n                                                                        Hospital\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/hosiptal/entities/hosiptal.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/hosiptal/entities/hosiptal.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/hosiptal/entities/hosiptal.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        interface Hospital {\n  id: string;\n  city: string;\n  name: string;\n}\n\nexport class HospitalEntity {\n  id: string;\n  city: string;\n  name: string;\n\n  constructor(hospitalData: Hospital) {\n    this.id = hospitalData.id;\n    this.city = hospitalData.city;\n    this.name = hospitalData.name;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HospitalModule.html":{"url":"modules/HospitalModule.html","title":"module - HospitalModule","body":"\n                   \n\n\n\n\n    Modules\n    HospitalModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HospitalModule\n\n\n\ncluster_HospitalModule_providers\n\n\n\n\nDatabaseService\n\nDatabaseService\n\n\n\nHospitalModule\n\nHospitalModule\n\nHospitalModule -->\n\nDatabaseService->HospitalModule\n\n\n\n\n\nHospitalService\n\nHospitalService\n\nHospitalModule -->\n\nHospitalService->HospitalModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/hosiptal/hospital.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            HospitalService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HospitalController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { HospitalController } from './hospital.controller';\nimport { HospitalService } from './hospital.service';\n\n@Module({\n  controllers: [HospitalController],\n  providers: [HospitalService, DatabaseService],\n})\nexport class HospitalModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HospitalService.html":{"url":"injectables/HospitalService.html","title":"injectable - HospitalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HospitalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/hosiptal/hospital.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(hospital: HospitalCreateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hospital\n                                            \n                                                            HospitalCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(hospital: HospitalUpdateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/hosiptal/hospital.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hospital\n                                            \n                                                            HospitalUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { HospitalCreateRequestType, HospitalUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\n\n@Injectable()\nexport class HospitalService {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  findAll() {\n    return this.databaseService.Hospital.findMany();\n  }\n\n  async findOne(id: string) {\n    const result = await this.databaseService.Hospital.findUnique({\n      where: {\n        hospital_id: id,\n      },\n    });\n    if (!result) {\n      throw new NotFoundException('Hospital not found');\n    }\n    return result;\n  }\n\n  async create(hospital: HospitalCreateRequestType) {\n    return this.databaseService.Hospital.create({\n      data: hospital,\n    });\n  }\n\n  async update(hospital: HospitalUpdateRequestType) {\n    const result = await this.findOne(hospital.hospital_id);\n    if (!result) {\n      throw new NotFoundException('Hospital not found');\n    }\n    return this.databaseService.Hospital.update({\n      where: {\n        hospital_id: hospital.hospital_id,\n      },\n      data: hospital,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/IsLoggin.html":{"url":"guards/IsLoggin.html","title":"guard - IsLoggin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    IsLoggin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtUtilsService: JwtUtilsService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:134\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtUtilsService\n                                                  \n                                                        \n                                                                        JwtUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { RefreshTokenRequest, UserRole } from '@pregnancy-journal-monorepo/contract';\nimport { RequestWithJWT } from 'express';\nimport { ROLES_KEY } from '../utils/decorators/role.decorator';\nimport { JwtUtilsService } from '../utils/jwt/jwtUtils.service';\n\n@Injectable()\nexport class AccessTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      throw new ForbiddenException('User access token authentication required');\n    }\n\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n// @Injectable()\n// export class EmailVerifyTokenAuthGuard implements CanActivate {\n//   constructor(\n//     private readonly jwtUtilsService: JwtUtilsService,\n//     private readonly configService: ConfigService,\n//   ) {}\n//\n//   canActivate(context: ExecutionContext): boolean {\n//     const request = context.switchToHttp().getRequest();\n//     const token = request.query.email_verify_token;\n//     if (!token) {\n//       throw new ForbiddenException('User authentication required');\n//     }\n//     try {\n//       const decoded_email_verify = this.jwtUtilsService.verifyToken({\n//         token: token,\n//         secret: this.configService.get('JWT_EMAIL_TOKEN_SECRET'),\n//       });\n//       request.decoded_email_verify = decoded_email_verify;\n//       return true;\n//     } catch (e) {\n//       throw new UnprocessableEntityException(e.message);\n//     }\n//   }\n// }\n\n@Injectable()\nexport class RefreshTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = (request.body as RefreshTokenRequest).refresh_token;\n    if (!token) {\n      throw new ForbiddenException('User authentication required');\n    }\n\n    try {\n      const decoded_refresh_token = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET') || 'jwt_secret',\n      });\n      const decoded_authorization = request.decoded_authorization;\n      if (decoded_authorization) {\n        if (decoded_authorization.user_id !== decoded_refresh_token.user_id) {\n          throw new ForbiddenException('Invalid token');\n        }\n      }\n      request.decoded_refresh_token = decoded_refresh_token;\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class RoleAuthGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [context.getHandler(), context.getClass()]);\n    if (!requiredRoles) {\n      return true;\n    }\n    try {\n      const request = context.switchToHttp().getRequest();\n      const token = request.headers.authorization?.split(' ')[1];\n      if (!token) {\n        throw new ForbiddenException('User authentication required');\n      }\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      if (!decoded_authorization) {\n        throw new ForbiddenException('User role authentication required');\n      }\n      const isAllowed = requiredRoles.includes(decoded_authorization.role);\n      if (!isAllowed) {\n        throw new ForbiddenException(\"You don't have permission to access\");\n      }\n      return isAllowed;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class IsLoggin implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      return true;\n    }\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n      return true;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/utils/jwt/jwt.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            user_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserRole } from '@pregnancy-journal-monorepo/contract';\n\nexport interface JwtPayload {\n  user_id: string;\n  role: UserRole;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/JwtUtilsModule.html":{"url":"modules/JwtUtilsModule.html","title":"module - JwtUtilsModule","body":"\n                   \n\n\n\n\n    Modules\n    JwtUtilsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_JwtUtilsModule\n\n\n\ncluster_JwtUtilsModule_providers\n\n\n\ncluster_JwtUtilsModule_exports\n\n\n\n\nJwtUtilsService \n\nJwtUtilsService \n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\nJwtUtilsService  -->\n\nJwtUtilsModule->JwtUtilsService \n\n\n\n\n\nJwtUtilsService\n\nJwtUtilsService\n\nJwtUtilsModule -->\n\nJwtUtilsService->JwtUtilsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/utils/jwt/jwtUtils.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtUtilsService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtUtilsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtUtilsService } from './jwtUtils.service';\n\n@Module({\n  imports: [JwtModule],\n  providers: [JwtUtilsService],\n  exports: [JwtUtilsService],\n})\nexport class JwtUtilsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtUtilsService.html":{"url":"injectables/JwtUtilsService.html","title":"injectable - JwtUtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtUtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/utils/jwt/jwtUtils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateNewRefreshTokenExpiry\n                            \n                            \n                                signToken\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/utils/jwt/jwtUtils.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateNewRefreshTokenExpiry\n                        \n                    \n                \n            \n            \n                \ngenerateNewRefreshTokenExpiry(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/utils/jwt/jwtUtils.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signToken\n                        \n                    \n                \n            \n            \n                \nsignToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/utils/jwt/jwtUtils.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/utils/jwt/jwtUtils.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService, JwtSignOptions } from '@nestjs/jwt';\nimport { JwtPayload } from './jwt.interface';\n\n@Injectable()\nexport class JwtUtilsService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  signToken({\n    payload,\n    options = {\n      algorithm: 'HS256',\n    },\n    secret = this.configService.get('JWT_SECRET') || 'jwt_secret',\n  }: {\n    payload: JwtPayload;\n    options: JwtSignOptions;\n    secret: string;\n  }) {\n    options.secret = secret;\n    return this.jwtService.signAsync(payload, options);\n  }\n\n  verifyToken({ token, secret }: { token: string; secret: string }) {\n    return this.jwtService.verify(token, { secret });\n  }\n\n  generateNewRefreshTokenExpiry({ created_at, old_expires_in }: { created_at: Date; old_expires_in: string }) {\n    const created_time = created_at.getTime();\n    const now = new Date(Date.now()).getTime();\n    const expiresIn = Number(old_expires_in.replace('d', '')) * 24 * 60 * 60 * 1000;\n    const newExpiresIn = ((created_time + expiresIn - now) / 1000).toFixed(0);\n    return `${newExpiresIn}s`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MailController.html":{"url":"controllers/MailController.html","title":"controller - MailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/mail/mail.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mail\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { MailService } from './mail.service';\n\n@Controller('mail')\nexport class MailController {\n  constructor(private readonly mailService: MailService) {}\n\n  // @Get()\n  // handleMail() {\n  //   return this.mailService.resetPassword('940ccb81-ed13-11ef-9d96-0242ac110002');\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MailController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { MailController } from './mail.controller';\nimport { MailService } from './mail.service';\n\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.get('MAIL_HOST'),\n          port: 465,\n          ignoreTLS: true,\n          secure: true,\n          auth: {\n            user: configService.get('MAIL_USER'),\n            pass: configService.get('MAIL_PASSWORD'),\n          },\n        },\n        defaults: {\n          from: '\"No Reply\" ',\n        },\n        template: {\n          dir: join(__dirname, '/app/mail/templates/'),\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [MailController],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resetPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/mail/mail.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(user: UserResponseType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/mail/mail.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserResponseType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { UserResponseType } from '@pregnancy-journal-monorepo/contract';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class MailService {\n  constructor(private readonly mailerService: MailerService) {}\n\n  async resetPassword(user: UserResponseType) {\n    const uuid = uuidv4().replace(/[^0-9]/g, '');\n    const code = parseInt(uuid.slice(0, 6), 10);\n\n    await this.mailerService.sendMail({\n      to: user.email, // list of receivers\n      from: 'noreply@gmail.com', // sender address\n      subject: 'Reset Password', // Subject line\n      text: 'reset password', // plaintext body\n      template: 'reset-password',\n      context: {\n        name: user.name,\n        resetCode: code,\n      },\n    });\n\n    return code;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchConstraint.html":{"url":"classes/MatchConstraint.html","title":"class - MatchConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/utils/decorators/match.decorator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/utils/decorators/match.decorator.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { registerDecorator, ValidationArguments, ValidationOptions, ValidatorConstraint, ValidatorConstraintInterface } from 'class-validator';\n\nexport function Match(property: string, validationOptions?: ValidationOptions) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [property],\n      validator: MatchConstraint,\n    });\n  };\n}\n\n@ValidatorConstraint({ name: 'Match' })\nexport class MatchConstraint implements ValidatorConstraintInterface {\n  validate(value: any, args: ValidationArguments) {\n    const [relatedPropertyName] = args.constraints;\n    const relatedValue = (args.object as any)[relatedPropertyName];\n    return value === relatedValue;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Media.html":{"url":"classes/Media.html","title":"class - Media","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Media\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/media/entities/media.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Media {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Media-1.html":{"url":"classes/Media-1.html","title":"class - Media-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Media\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                media_id\n                            \n                            \n                                media_url\n                            \n                            \n                                post_id\n                            \n                            \n                                visit_record_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        media_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        media_url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_record_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class VisitRecord {\n  visit_record_id: string;\n  next_visit_doctor_date: Date | null;\n  visit_doctor_date: Date;\n  doctor_name: string;\n  hospital_id: string;\n  created_at: Date;\n  user_id: string;\n}\n\nexport class VisitRecordMetric {\n  visit_record_id: string;\n  created_at: Date;\n  value: number;\n  metric_id: string;\n  updated_at: Date;\n  visit_record_metric_id: string;\n  tag_id: string | null;\n}\n\nexport class Media {\n  visit_record_id: string | null;\n  created_at: Date;\n  media_id: string;\n  media_url: string;\n  post_id: string | null;\n}\n\nexport class Hospital {\n  hospital_id: string;\n  name: string;\n  city: string;\n}\n\nexport class VisitRecordIncludeOtherTables extends VisitRecord {\n  media: Media[];\n  hospital: Hospital;\n  visit_record_metric: VisitRecordMetric[];\n  week?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MediaController.html":{"url":"controllers/MediaController.html","title":"controller - MediaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MediaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/media/media.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleDeleteFile\n                            \n                            \n                                    \n                                handleGetLink\n                            \n                            \n                                    \n                                handleUploadFile\n                            \n                            \n                                    \n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDeleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDeleteFile(filename: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(mediaContract.deleteFile)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.controller.ts:265\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetLink(filename: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(mediaContract.getLink)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.controller.ts:303\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUploadFile(media: MediaResponse[], undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(mediaContract.updateFile)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.controller.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                media\n                                            \n                                                        MediaResponse[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(media: MediaResponse[], undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(mediaContract.updateMultiFiles)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                media\n                                            \n                                                        MediaResponse[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { BadRequestException, Body, Controller, NotFoundException, Param, Query } from '@nestjs/common';\nimport { mediaContract, MediaResponse } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { FileService } from '../file/file.service';\nimport { MediaService } from './media.service';\n\n@Controller()\nexport class MediaController {\n  constructor(\n    private readonly fileService: FileService,\n    private readonly mediaService: MediaService,\n  ) {}\n\n  @TsRestHandler(mediaContract.updateMultiFiles)\n  uploadFile(@Body() media: MediaResponse[], @Query() { post_id, record_id }: { post_id?: string; record_id?: string }) {\n    return tsRestHandler(mediaContract.updateMultiFiles, async () => {\n      if (!post_id && !record_id) {\n        throw new BadRequestException('No post_id or record_id provided');\n      }\n\n      console.log(media);\n      const { newMedias, deletedMedias } = await this.mediaService.updateWithRecordId({ media, record_id });\n\n      if (deletedMedias.length === 0 && newMedias.length === 0) {\n        return {\n          status: 200 as const,\n          body: [],\n        };\n      }\n      const media_urls = await Promise.all(newMedias.map((m) => fetch(m.media_url)));\n      const blobs = (await Promise.all(media_urls.map((m) => m.blob()))).map((blob) => {\n        return {\n          buffer: blob,\n          filename: Date.now() + '-blob',\n        };\n      });\n\n      const result: {\n        post_id: string | null;\n        media_id: string;\n        media_url: string;\n        created_at: Date;\n        visit_record_id: string | null;\n      }[] = [];\n\n      // IF UPDATE MEDIA HAVE NEW MEDIA\n      if (blobs) {\n        const uploads = await Promise.all(\n          blobs.map((blob) => {\n            return this.fileService.uploadToR2Blob(blob.buffer, blob.filename);\n          }),\n        );\n        if (!uploads) {\n          throw new BadRequestException('Error uploading file');\n        }\n\n        if (uploads.length !== blobs.length) {\n          throw new BadRequestException('Error uploading file with upload count not match');\n        }\n\n        if (uploads.some((upload) => !upload)) {\n          throw new BadRequestException('Error uploading file with some upload failed');\n        }\n\n        if (post_id) {\n          const create_result = await Promise.all(\n            blobs.map((blob) =>\n              this.mediaService.createWithPostId({\n                media_url: blob.filename,\n                post_id,\n              }),\n            ),\n          );\n          result.push(...create_result);\n        } else if (record_id) {\n          const create_result = await Promise.all(\n            blobs.map((blob) =>\n              this.mediaService.createWithRecordId({\n                media_url: blob.filename,\n                record_id,\n              }),\n            ),\n          );\n          result.push(...create_result);\n        } else {\n          throw new BadRequestException('No post_id or record_id provided');\n        }\n      }\n\n      // IF UPDATE MEDIA HAVE DELETE MEDIA\n      if (deletedMedias) {\n        try {\n          const deleted_result = await Promise.all(\n            deletedMedias.map((m) => {\n              return this.mediaService.remove(m.media_id);\n            }),\n          );\n          await Promise.all(\n            deletedMedias.map((m) => {\n              return this.fileService.deleteFile(m.media_url);\n            }),\n          );\n          result.push(...deleted_result);\n        } catch (error) {\n          throw new BadRequestException(error.message);\n        }\n      }\n\n      return {\n        status: 200 as const,\n        body: result,\n      };\n    });\n  }\n\n  @TsRestHandler(mediaContract.updateFile)\n  handleUploadFile(@Body() media: MediaResponse[], @Query() { post_id, record_id }: { post_id?: string; record_id?: string }) {\n    return tsRestHandler(mediaContract.updateMultiFiles, async () => {\n      if (!post_id && !record_id) {\n        throw new BadRequestException('No post_id or record_id provided');\n      }\n\n      if (!media) {\n        throw new BadRequestException('No media uploaded');\n      }\n\n      const media_urls = await Promise.all(media.map((m) => fetch(m.media_url)));\n      const blobs = (await Promise.all(media_urls.map((m) => m.blob()))).map((blob) => {\n        return {\n          buffer: blob,\n          filename: Date.now() + '-blob',\n        };\n      });\n\n      const result: {\n        post_id: string | null;\n        media_id: string;\n        media_url: string;\n        created_at: Date;\n        visit_record_id: string | null;\n      }[] = [];\n\n      // IF UPDATE MEDIA HAVE NEW MEDIA\n      if (blobs) {\n        const uploads = await Promise.all(\n          blobs.map((blob) => {\n            return this.fileService.uploadToR2Blob(blob.buffer, blob.filename);\n          }),\n        );\n        if (!uploads) {\n          throw new BadRequestException('Error uploading file');\n        }\n\n        if (uploads.length !== blobs.length) {\n          throw new BadRequestException('Error uploading file with upload count not match');\n        }\n\n        if (uploads.some((upload) => !upload)) {\n          throw new BadRequestException('Error uploading file with some upload failed');\n        }\n\n        if (post_id) {\n          const create_result = await Promise.all(\n            blobs.map((blob) =>\n              this.mediaService.createWithPostId({\n                media_url: blob.filename,\n                post_id,\n              }),\n            ),\n          );\n          result.push(...create_result);\n        } else if (record_id) {\n          const create_result = await Promise.all(\n            blobs.map((blob) =>\n              this.mediaService.createWithRecordId({\n                media_url: blob.filename,\n                record_id,\n              }),\n            ),\n          );\n          result.push(...create_result);\n        } else {\n          throw new BadRequestException('No post_id or record_id provided');\n        }\n      }\n\n      return {\n        status: 200 as const,\n        body: result,\n      };\n    });\n  }\n\n  // @TsRestHandler(mediaContract.updateFile)\n  // @UseInterceptors(FileInterceptor('file'))\n  // handleUpdateFile(\n  //   @UploadedFile() file: Express.Multer.File,\n  //   @Query()\n  //   {\n  //     post_id,\n  //     record_id,\n  //   }: {\n  //     post_id?: string;\n  //     record_id?: string;\n  //   },\n  // ) {\n  //   return tsRestHandler(mediaContract.updateFile, async () => {\n  //     if (!post_id && !record_id) {\n  //       throw new BadRequestException('No post_id or record_id provided');\n  //     }\n  //\n  //     if (!file) {\n  //       throw new BadRequestException('No file uploaded');\n  //     }\n  //\n  //     const uniqueName = Date.now() + '-' + file.originalname;\n  //     try {\n  //       const upload = await this.fileService.uploadToR2(file, uniqueName);\n  //       if (!upload) {\n  //         throw new BadRequestException('Error uploading file');\n  //       }\n  //       let result: MediaResponse;\n  //\n  //       if (post_id) {\n  //         result = await this.mediaService.createWithPostId({ media_url: uniqueName, post_id });\n  //       } else if (record_id) {\n  //         result = await this.mediaService.createWithRecordId({ media_url: uniqueName, record_id });\n  //       } else {\n  //         throw new BadRequestException('No post_id or record_id provided');\n  //       }\n  //\n  //       console.log(file);\n  //       if (file.path) await unlink(file.path);\n  //       //xóa file sau khi upload\n  //\n  //       return {\n  //         status: 200 as const,\n  //         body: result,\n  //       };\n  //     } catch (error) {\n  //       if (file.path) {\n  //         await unlink(file.path); // Xóa file tạm nếu upload thất bại\n  //       }\n  //       throw new BadRequestException(error.message);\n  //     }\n  //   });\n  // }\n\n  // @TsRestHandler(mediaContract.getFile)\n  // handleGetFile(@Param('filename') filename: string, @Res() res) {\n  //   return tsRestHandler(mediaContract.getFile, async () => {\n  //     try {\n  //       res.sendFile(await this.fileService.sendFile(filename));\n  //       return {\n  //         status: 200 as const,\n  //         body: 'File sent successfully',\n  //       };\n  //     } catch (error) {\n  //       throw new NotFoundException('File not found');\n  //     }\n  //   });\n  // }\n\n  @TsRestHandler(mediaContract.deleteFile)\n  handleDeleteFile(@Param('id') filename: string) {\n    return tsRestHandler(mediaContract.deleteFile, async () => {\n      try {\n        const media = await this.mediaService.remove(filename);\n        await this.fileService.deleteFile(media.media_url);\n\n        //xóa ở thư mục images\n        // await unlink(join(__dirname, '..', '..', 'images', filename));\n        return {\n          status: 200 as const,\n          body: {\n            message: 'File deleted successfully',\n          },\n        };\n      } catch (error) {\n        throw new NotFoundException('File not found');\n      }\n    });\n  }\n\n  // @TsRestHandler(mediaContract.getLink)\n  // handleGetLink(@Param('filename') filename: string) {\n  //   return tsRestHandler(mediaContract.getLink, async () => {\n  //     try {\n  //       const link = await this.fileService.createPresignedUrl(filename);\n  //       return {\n  //         status: 200 as const,\n  //         body: {\n  //           link,\n  //         },\n  //       };\n  //     } catch (error) {\n  //       throw new NotFoundException('File not found');\n  //     }\n  //   });\n  // }\n\n  @TsRestHandler(mediaContract.getLink)\n  handleGetLink(@Param('id') filename: string) {\n    return tsRestHandler(mediaContract.getLink, async () => {\n      try {\n        const link = await this.mediaService.findOne(filename);\n        return {\n          status: 200 as const,\n          body: link,\n        };\n      } catch (error) {\n        throw new NotFoundException('Media not found');\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MediaModule.html":{"url":"modules/MediaModule.html","title":"module - MediaModule","body":"\n                   \n\n\n\n\n    Modules\n    MediaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_exports\n\n\n\ncluster_MediaModule_providers\n\n\n\n\nFileService \n\nFileService \n\n\n\nMediaService \n\nMediaService \n\n\n\nMediaModule\n\nMediaModule\n\nFileService  -->\n\nMediaModule->FileService \n\n\n\nMediaService  -->\n\nMediaModule->MediaService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nMediaModule -->\n\nDatabaseService->MediaModule\n\n\n\n\n\nFileService\n\nFileService\n\nMediaModule -->\n\nFileService->MediaModule\n\n\n\n\n\nMediaService\n\nMediaService\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/media/media.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            FileService\n                        \n                        \n                            MediaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MediaController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FileService\n                        \n                        \n                            MediaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { DatabaseService } from '../database/database.service';\nimport { FileService } from '../file/file.service';\nimport { MediaController } from './media.controller';\nimport { MediaService } from './media.service';\n\n@Module({\n  imports: [\n    MulterModule.register({\n      dest: './uploads',\n      storage: diskStorage({\n        destination: './uploads',\n        filename: (req, file, cb) => {\n          cb(null, file.originalname);\n        },\n      }),\n    }),\n  ],\n  controllers: [MediaController],\n  providers: [MediaService, DatabaseService, FileService],\n  exports: [MediaService, FileService],\n})\nexport class MediaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MediaService.html":{"url":"injectables/MediaService.html","title":"injectable - MediaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/media/media.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createWithPostId\n                            \n                            \n                                    Async\n                                createWithRecordId\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateWithRecordId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, fileService: FileService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/media/media.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileService\n                                                  \n                                                        \n                                                                        FileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createWithPostId\n                        \n                    \n                \n            \n            \n                \n                        \n                    createWithPostId(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createWithRecordId\n                        \n                    \n                \n            \n            \n                \n                        \n                    createWithRecordId(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateWithRecordId\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateWithRecordId(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/media/media.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { MediaResponse } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { FileService } from '../file/file.service';\n\n@Injectable()\nexport class MediaService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly fileService: FileService,\n  ) {}\n\n  async updateWithRecordId({ media, record_id }: { media: MediaResponse[]; record_id?: string }) {\n    const record = await this.databaseService.Record.findUnique({\n      where: {\n        visit_record_id: record_id,\n      },\n    });\n    if (!record) {\n      throw new NotFoundException('Record not found');\n    }\n\n    const mediaOfRecord = await this.databaseService.Media.findMany({\n      where: {\n        visit_record_id: record_id,\n      },\n    });\n\n    const deletedMedias = mediaOfRecord.filter((m) => !media.find((m2) => m2.media_id === m.media_id));\n    const newMedias = media.filter((m) => !mediaOfRecord.find((m2) => m2.media_id === m.media_id));\n\n    return { newMedias, deletedMedias };\n  }\n\n  async createWithPostId({ media_url, post_id }: { media_url: string; post_id: string }) {\n    const post = this.databaseService.Post.findUnique({\n      where: {\n        post_id: post_id,\n      },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n\n    return await this.databaseService.Media.create({\n      data: {\n        media_url: media_url,\n        created_at: new Date(Date.now()),\n        post: {\n          connect: { post_id: post_id },\n        },\n      },\n    });\n  }\n\n  async createWithRecordId({ media_url, record_id }: { media_url: string; record_id: string }) {\n    const record = await this.databaseService.Record.findUnique({\n      where: {\n        visit_record_id: record_id,\n      },\n    });\n\n    if (!record) {\n      throw new NotFoundException('Record not found');\n    }\n\n    return await this.databaseService.Media.create({\n      data: {\n        media_url: media_url,\n        created_at: new Date(Date.now()),\n        visit_record: {\n          connect: { visit_record_id: record_id },\n        },\n      },\n    });\n  }\n\n  findAll() {\n    return this.databaseService.Media.findMany();\n  }\n\n  async findOne(id: string) {\n    const result = await this.databaseService.Media.findUnique({\n      where: {\n        media_id: id,\n      },\n      include: {\n        post: true,\n        visit_record: true,\n      },\n    });\n    if (!result) {\n      throw new NotFoundException('Media not found');\n    }\n    const imgLink = await this.fileService.getImageUrl(result.media_url);\n\n    return { media: result, imgLink: imgLink };\n  }\n\n  async remove(id: string) {\n    const result = await this.databaseService.Media.findUnique({\n      where: {\n        media_id: id,\n      },\n    });\n\n    if (!result) {\n      throw new NotFoundException('Media not found');\n    }\n\n    await this.fileService.deleteFile(result.media_url);\n    return await this.databaseService.Media.delete({\n      where: {\n        media_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MembershipsController.html":{"url":"controllers/MembershipsController.html","title":"controller - MembershipsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MembershipsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/memberships/memberships.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCreateMembership\n                            \n                            \n                                    \n                                handleDeleteMembership\n                            \n                            \n                                    \n                                handleFindAllMemberships\n                            \n                            \n                                    \n                                handleFindOneMembership\n                            \n                            \n                                    \n                                handleUpdateMembership\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCreateMembership\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreateMembership(body: MembershipCreateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(membershipContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        MembershipCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDeleteMembership\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDeleteMembership(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(membershipContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleFindAllMemberships\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFindAllMemberships()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(membershipContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleFindOneMembership\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFindOneMembership(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(membershipContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdateMembership\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdateMembership(body: MembershipUpdateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(membershipContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        MembershipUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param } from '@nestjs/common';\nimport { membershipContract, MembershipCreateRequest, MembershipUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { MembershipsService } from './memberships.service';\n\n@Controller()\nexport class MembershipsController {\n  constructor(private readonly membershipsService: MembershipsService) {}\n\n  @TsRestHandler(membershipContract.create)\n  handleCreateMembership(@Body() body: MembershipCreateRequest) {\n    return tsRestHandler(membershipContract.create, async () => {\n      const membership = await this.membershipsService.create(body);\n      return { status: 200, body: membership };\n    });\n  }\n\n  @TsRestHandler(membershipContract.getAll)\n  handleFindAllMemberships() {\n    return tsRestHandler(membershipContract.getAll, async () => {\n      const memberships = await this.membershipsService.findAll();\n      return { status: 200, body: memberships };\n    });\n  }\n\n  @TsRestHandler(membershipContract.getOne)\n  handleFindOneMembership(@Param('id') id: string) {\n    return tsRestHandler(membershipContract.getOne, async () => {\n      const membership = await this.membershipsService.findOne(id);\n      return { status: 200, body: membership };\n    });\n  }\n\n  @TsRestHandler(membershipContract.update)\n  handleUpdateMembership(@Body() body: MembershipUpdateRequest) {\n    return tsRestHandler(membershipContract.update, async () => {\n      const membership = await this.membershipsService.update(body);\n      return { status: 200, body: membership };\n    });\n  }\n\n  @TsRestHandler(membershipContract.delete)\n  handleDeleteMembership(@Param('id') id: string) {\n    return tsRestHandler(membershipContract.delete, async () => {\n      const deleted = await this.membershipsService.remove(id);\n      return { status: 200, body: deleted };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MembershipsModule.html":{"url":"modules/MembershipsModule.html","title":"module - MembershipsModule","body":"\n                   \n\n\n\n\n    Modules\n    MembershipsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MembershipsModule\n\n\n\ncluster_MembershipsModule_providers\n\n\n\ncluster_MembershipsModule_exports\n\n\n\n\nMembershipsService \n\nMembershipsService \n\n\n\nMembershipsModule\n\nMembershipsModule\n\nMembershipsService  -->\n\nMembershipsModule->MembershipsService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nMembershipsModule -->\n\nDatabaseService->MembershipsModule\n\n\n\n\n\nMembershipsService\n\nMembershipsService\n\nMembershipsModule -->\n\nMembershipsService->MembershipsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/memberships/memberships.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            MembershipsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MembershipsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MembershipsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { MembershipsController } from './memberships.controller';\nimport { MembershipsService } from './memberships.service';\n\n@Module({\n  controllers: [MembershipsController],\n  providers: [MembershipsService, DatabaseService],\n  exports: [MembershipsService],\n})\nexport class MembershipsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MembershipsService.html":{"url":"injectables/MembershipsService.html","title":"injectable - MembershipsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MembershipsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/memberships/memberships.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/memberships/memberships.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createMembershipDto: MembershipCreateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMembershipDto\n                                            \n                                                        MembershipCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateMembershipDto: MembershipUpdateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/memberships/memberships.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateMembershipDto\n                                            \n                                                        MembershipUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { MembershipCreateRequest, MembershipUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\n\n@Injectable()\nexport class MembershipsService {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  create(createMembershipDto: MembershipCreateRequest) {\n    return this.databaseService.MemberShip.create({\n      data: {\n        title: createMembershipDto.title,\n        description: createMembershipDto.description,\n        status: createMembershipDto.status,\n        price: createMembershipDto.price,\n        duration_days: createMembershipDto.duration_days,\n        created_at: new Date(),\n        updated_at: new Date(),\n      },\n    });\n  }\n\n  findAll() {\n    return this.databaseService.MemberShip.findMany();\n  }\n\n  async findOne(id: string) {\n    const res = await this.databaseService.MemberShip.findUnique({\n      where: {\n        membership_id: id,\n      },\n    });\n    if (!res) {\n      throw new NotFoundException('Membership not found');\n    }\n    return res;\n  }\n\n  async update(updateMembershipDto: MembershipUpdateRequest) {\n    await this.findOne(updateMembershipDto.membership_id);\n\n    return this.databaseService.MemberShip.update({\n      where: {\n        membership_id: updateMembershipDto.membership_id,\n      },\n      data: updateMembershipDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.databaseService.MemberShip.delete({\n      where: {\n        membership_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Metric.html":{"url":"classes/Metric.html","title":"class - Metric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Metric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                id\n                            \n                            \n                                lowerBoundMsg\n                            \n                            \n                                measurementUnit\n                            \n                            \n                                required\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                upperBoundMsg\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metric: MetricDTO)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metric\n                                                  \n                                                        \n                                                                        MetricDTO\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Standard[]\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lowerBoundMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        measurementUnit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upperBoundMsg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Standard } from '../../standard/entities/standard.entity';\n\nexport interface MetricDTO {\n  id: string;\n  title: string;\n  measurementUnit: string;\n  status: number;\n  required: boolean;\n  upperBoundMsg: string;\n  lowerBoundMsg: string;\n  bounds?: Standard[];\n}\n\nexport class Metric {\n  id: string;\n  title: string;\n  measurementUnit: string;\n  status: number;\n  required: boolean;\n  upperBoundMsg: string;\n  lowerBoundMsg: string;\n  bounds: Standard[];\n\n  constructor(metric: MetricDTO) {\n    this.id = metric.id;\n    this.title = metric.title;\n    this.measurementUnit = metric.measurementUnit;\n    this.status = metric.status;\n    this.required = metric.required;\n    this.upperBoundMsg = metric.upperBoundMsg;\n    this.lowerBoundMsg = metric.lowerBoundMsg;\n    this.bounds = metric.bounds || [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetricController.html":{"url":"controllers/MetricController.html","title":"controller - MetricController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetricController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/metric/metric.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                handleGetOne\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(createMetricDto: MetricCreateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(metricContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetricDto\n                                            \n                                                            MetricCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(metricContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(metricContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(metricContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(updateMetricDto: MetricUpdateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(metricContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateMetricDto\n                                            \n                                                            MetricUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param } from '@nestjs/common';\nimport { metricContract, MetricCreateRequestType, MetricUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { MetricService } from './metric.service';\n\n@Controller()\nexport class MetricController {\n  constructor(private readonly metricService: MetricService) {}\n\n  @TsRestHandler(metricContract.create)\n  handleCreate(@Body() createMetricDto: MetricCreateRequestType) {\n    return tsRestHandler(metricContract.create, async () => {\n      const result = await this.metricService.create(createMetricDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(metricContract.getAll)\n  handleGetAll() {\n    return tsRestHandler(metricContract.getAll, async () => {\n      const result = await this.metricService.findAll();\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(metricContract.getOne)\n  handleGetOne(@Param('id') id: string) {\n    return tsRestHandler(metricContract.getOne, async () => {\n      const result = await this.metricService.findOne(id);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(metricContract.update)\n  handleUpdate(@Body() updateMetricDto: MetricUpdateRequestType) {\n    return tsRestHandler(metricContract.update, async () => {\n      const result = await this.metricService.update(updateMetricDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(metricContract.delete)\n  handleDelete(@Param('id') id: string) {\n    return tsRestHandler(metricContract.delete, async () => {\n      const result = await this.metricService.remove(id);\n      return { status: 200, body: result };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricDTO.html":{"url":"interfaces/MetricDTO.html","title":"interface - MetricDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MetricDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            bounds\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            lowerBoundMsg\n                                        \n                                \n                                \n                                        \n                                            measurementUnit\n                                        \n                                \n                                \n                                        \n                                            required\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            upperBoundMsg\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bounds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bounds:         Standard[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Standard[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lowerBoundMsg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lowerBoundMsg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        measurementUnit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        measurementUnit:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        required\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        required:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        upperBoundMsg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        upperBoundMsg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Standard } from '../../standard/entities/standard.entity';\n\nexport interface MetricDTO {\n  id: string;\n  title: string;\n  measurementUnit: string;\n  status: number;\n  required: boolean;\n  upperBoundMsg: string;\n  lowerBoundMsg: string;\n  bounds?: Standard[];\n}\n\nexport class Metric {\n  id: string;\n  title: string;\n  measurementUnit: string;\n  status: number;\n  required: boolean;\n  upperBoundMsg: string;\n  lowerBoundMsg: string;\n  bounds: Standard[];\n\n  constructor(metric: MetricDTO) {\n    this.id = metric.id;\n    this.title = metric.title;\n    this.measurementUnit = metric.measurementUnit;\n    this.status = metric.status;\n    this.required = metric.required;\n    this.upperBoundMsg = metric.upperBoundMsg;\n    this.lowerBoundMsg = metric.lowerBoundMsg;\n    this.bounds = metric.bounds || [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetricModule\n\n\n\ncluster_MetricModule_providers\n\n\n\ncluster_MetricModule_exports\n\n\n\ncluster_MetricModule_imports\n\n\n\n\nTagModule\n\nTagModule\n\n\n\nMetricModule\n\nMetricModule\n\nMetricModule -->\n\nTagModule->MetricModule\n\n\n\n\n\nMetricService \n\nMetricService \n\nMetricService  -->\n\nMetricModule->MetricService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nMetricModule -->\n\nDatabaseService->MetricModule\n\n\n\n\n\nMetricService\n\nMetricService\n\nMetricModule -->\n\nMetricService->MetricModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            MetricService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetricController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetricService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { TagModule } from '../tags/tag.module';\nimport { MetricController } from './metric.controller';\nimport { MetricService } from './metric.service';\n\n@Module({\n  imports: [TagModule],\n  controllers: [MetricController],\n  providers: [MetricService, DatabaseService],\n  exports: [MetricService],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetricService.html":{"url":"injectables/MetricService.html","title":"injectable - MetricService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetricService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/metric/metric.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByMetricIdAndWeek\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, tagService: TagService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/metric/metric.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetricDto: MetricCreateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetricDto\n                                            \n                                                            MetricCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.service.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByMetricIdAndWeek\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByMetricIdAndWeek(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.service.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateMetricDto: MetricUpdateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/metric/metric.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateMetricDto\n                                            \n                                                            MetricUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { MetricCreateRequestType, MetricResponseType, MetricUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { TagService } from '../tags/tag.service';\n\n@Injectable()\nexport class MetricService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    // private readonly standardService: StandardService,\n    private readonly tagService: TagService,\n  ) {}\n\n  async create(createMetricDto: MetricCreateRequestType): Promise {\n    // if (createMetricDto.standard) {\n    //   return this.databaseService.Metric.create({\n    //     data: {\n    //       title: createMetricDto.title,\n    //       measurement_unit: createMetricDto.measurement_unit,\n    //       status: createMetricDto.status,\n    //       required: createMetricDto.required,\n    //       upperbound_msg: createMetricDto.upperbound_msg,\n    //       lowerbound_msg: createMetricDto.lowerbound_msg,\n    //       // standard: {\n    //       //   createMany: {\n    //       //     data: createMetricDto.standard.map((bound) => {\n    //       //       return {\n    //       //         week: bound.week,\n    //       //         upperbound: bound.upperbound,\n    //       //         lowerbound: bound.lowerbound,\n    //       //         who_standard_value: bound.who_standard_value,\n    //       //       };\n    //       //     }),\n    //       //   },\n    //       // },\n    //     },\n    //   });\n    // } else {\n\n    let metric = await this.databaseService.Metric.create({\n      data: {\n        title: createMetricDto.title,\n        measurement_unit: createMetricDto.measurement_unit,\n        status: createMetricDto.status,\n        required: createMetricDto.required,\n        upperbound_msg: createMetricDto.upperbound_msg,\n        lowerbound_msg: createMetricDto.lowerbound_msg,\n      },\n    });\n\n    if (createMetricDto.tag_id) {\n      const tag = await this.tagService.findOne(createMetricDto.tag_id);\n      metric = await this.databaseService.Metric.update({\n        where: {\n          metric_id: metric.metric_id,\n        },\n        data: {\n          tag: {\n            connect: {\n              tag_id: tag.tag_id,\n            },\n          },\n        },\n      });\n    }\n\n    return metric;\n  }\n\n  async findAll(): Promise {\n    const metric = await this.databaseService.Metric.findMany();\n    return Promise.all(\n      metric.map(async (m) => {\n        if (!m.tag_id) {\n          return {\n            metric_id: m.metric_id,\n            title: m.title,\n            measurement_unit: m.measurement_unit,\n            status: m.status,\n            required: m.required,\n            upperbound_msg: m.upperbound_msg,\n            lowerbound_msg: m.lowerbound_msg,\n          };\n        }\n        const tag = await this.databaseService.Tag.findUnique({\n          where: {\n            tag_id: m.tag_id,\n          },\n        });\n        if (!tag) {\n          return {\n            metric_id: m.metric_id,\n            title: m.title,\n            measurement_unit: m.measurement_unit,\n            status: m.status,\n            required: m.required,\n            upperbound_msg: m.upperbound_msg,\n            lowerbound_msg: m.lowerbound_msg,\n          };\n        }\n        return {\n          metric_id: m.metric_id,\n          title: m.title,\n          measurement_unit: m.measurement_unit,\n          status: m.status,\n          required: m.required,\n          upperbound_msg: m.upperbound_msg,\n          lowerbound_msg: m.lowerbound_msg,\n          tag,\n        };\n      }),\n    );\n  }\n\n  async findOne(id: string) {\n    const cur = await this.databaseService.Metric.findUnique({\n      where: {\n        metric_id: id,\n      },\n      include: {\n        standard: true,\n        visit_record_metric: true,\n      },\n    });\n    if (!cur) {\n      throw new NotFoundException('Metric not found');\n    }\n    return cur;\n  }\n\n  async update(updateMetricDto: MetricUpdateRequestType) {\n    const cur = await this.findOne(updateMetricDto.metric_id);\n    if (!cur) {\n      throw new NotFoundException('Metric not found');\n    }\n    const tag = updateMetricDto.tag_id;\n    if (tag) {\n      await this.tagService.findOne(tag); // check if tag exists\n    }\n    updateMetricDto.tag_id = undefined;\n\n    let metric = await this.databaseService.Metric.update({\n      where: {\n        metric_id: updateMetricDto.metric_id,\n      },\n      data: updateMetricDto,\n    });\n\n    if (tag) {\n      metric = await this.databaseService.Metric.update({\n        where: {\n          metric_id: updateMetricDto.metric_id,\n        },\n        data: {\n          tag: {\n            connect: {\n              tag_id: tag,\n            },\n          },\n        },\n      });\n    }\n    return metric;\n  }\n\n  async remove(id: string) {\n    const deleted = await this.findOne(id);\n    await this.databaseService.Standard.deleteMany({\n      where: {\n        metric_id: id,\n      },\n    });\n    await this.databaseService.Metric.delete({\n      where: {\n        metric_id: id,\n      },\n    });\n    return deleted;\n  }\n\n  async findByMetricIdAndWeek({ metricId, week }: { metricId: string; week: number }) {\n    return await this.databaseService.Metric.findFirst({\n      where: {\n        metric_id: metricId,\n      },\n      include: {\n        standard: {\n          where: {\n            week: week,\n          },\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NoteController.html":{"url":"controllers/NoteController.html","title":"controller - NoteController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NoteController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/note/note.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                    \n                                handleGetOne\n                            \n                            \n                                    \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(note: NoteCreateRequest, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(noteContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                note\n                                            \n                                                        NoteCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(noteContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.controller.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll(req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(noteContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleGetOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(noteContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(note: NoteUpdateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(noteContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                note\n                                            \n                                                        NoteUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Req, UnauthorizedException, UseGuards } from '@nestjs/common';\nimport { noteContract, NoteCreateRequest, NoteUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { RequestWithJWT } from 'express';\nimport { AccessTokenAuthGuard } from '../auth/auth.guard';\nimport { JwtPayload } from '../utils/jwt/jwt.interface';\nimport { NoteService } from './note.service';\n\n@Controller()\nexport class NoteController {\n  constructor(private readonly noteService: NoteService) {}\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(noteContract.create)\n  handleCreate(@Body() note: NoteCreateRequest, @Req() req: RequestWithJWT) {\n    return tsRestHandler(noteContract.create, async () => {\n      if (!req.decoded_authorization) {\n        throw new UnauthorizedException('UnAuthorized');\n      }\n      const userId = req.decoded_authorization.user_id;\n\n      const result = await this.noteService.createNote({\n        note: note,\n        userId: userId,\n      });\n      return {\n        status: 200,\n        body: result,\n      };\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(noteContract.getAll)\n  handleGetAll(@Req() req: RequestWithJWT) {\n    return tsRestHandler(noteContract.getAll, async () => {\n      const user_id = (req.decoded_authorization as JwtPayload).user_id;\n      const result = await this.noteService.getAllNotes(user_id);\n      return {\n        status: 200,\n        body: result,\n      };\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(noteContract.getOne)\n  handleGetOne(@Param('id') id: string) {\n    return tsRestHandler(noteContract.getOne, async () => {\n      const result = await this.noteService.getNoteById(id);\n      return {\n        status: 200,\n        body: result,\n      };\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(noteContract.update)\n  handleUpdate(@Body() note: NoteUpdateRequest) {\n    return tsRestHandler(noteContract.update, async () => {\n      const result = await this.noteService.updateNoteById(note);\n      return {\n        status: 200,\n        body: result,\n      };\n    });\n  }\n\n  @TsRestHandler(noteContract.delete)\n  handleDelete(@Param('id') id: string) {\n    return tsRestHandler(noteContract.delete, async () => {\n      const result = await this.noteService.deleteNoteById(id);\n      console.log(result);\n      return {\n        status: 200,\n        body: result,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NoteModule.html":{"url":"modules/NoteModule.html","title":"module - NoteModule","body":"\n                   \n\n\n\n\n    Modules\n    NoteModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NoteModule\n\n\n\ncluster_NoteModule_imports\n\n\n\ncluster_NoteModule_providers\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nNoteModule\n\nNoteModule\n\nNoteModule -->\n\nJwtUtilsModule->NoteModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nNoteModule -->\n\nDatabaseService->NoteModule\n\n\n\n\n\nNoteService\n\nNoteService\n\nNoteModule -->\n\nNoteService->NoteModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/note/note.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            NoteService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NoteController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport { NoteController } from './note.controller';\nimport { NoteService } from './note.service';\n\n@Module({\n  imports: [JwtUtilsModule],\n  controllers: [NoteController],\n  providers: [NoteService, DatabaseService],\n})\nexport class NoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NoteService.html":{"url":"injectables/NoteService.html","title":"injectable - NoteService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NoteService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/note/note.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNote\n                            \n                            \n                                    Async\n                                deleteNoteById\n                            \n                            \n                                    Async\n                                getAllNotes\n                            \n                            \n                                    Async\n                                getNoteById\n                            \n                            \n                                    Async\n                                updateNoteById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/note/note.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createNote\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNote(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteNoteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteNoteById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllNotes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllNotes(user_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNoteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNoteById(noteId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                noteId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateNoteById\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateNoteById(note: NoteUpdateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/note/note.service.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                note\n                                            \n                                                        NoteUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { NoteCreateRequest, NoteResponse, NoteUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\n\n@Injectable()\nexport class NoteService {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  async createNote({ note, userId }: { note: NoteCreateRequest; userId: string }): Promise {\n    //kiểm tra coi user có tồn tại không\n    const user = await this.databaseService.User.findUnique({\n      where: {\n        user_id: userId,\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return this.databaseService.Note.create({\n      data: {\n        title: note.title,\n        content: note.content,\n        date: new Date(note.date),\n        status: note.status,\n        user: {\n          connect: {\n            user_id: userId,\n          },\n        },\n      },\n    });\n  }\n\n  async getAllNotes(user_id: string) {\n    return await this.databaseService.Note.findMany({\n      where: {\n        user_id: user_id,\n      },\n    });\n  }\n\n  async getNoteById(noteId: string) {\n    const note = await this.databaseService.Note.findUnique({\n      where: {\n        note_id: noteId,\n      },\n    });\n\n    if (!note) {\n      throw new NotFoundException('Note not found');\n    }\n\n    return note;\n  }\n\n  async updateNoteById(note: NoteUpdateRequest) {\n    const noteExist = await this.databaseService.Note.findUnique({\n      where: {\n        note_id: note.note_id,\n      },\n    });\n\n    if (!noteExist) {\n      throw new NotFoundException('Note not found');\n    }\n\n    if (note.date) {\n      const updatedNote = await this.databaseService.Note.update({\n        where: {\n          note_id: note.note_id,\n        },\n        data: {\n          title: note.title,\n          content: note.content,\n          date: new Date(note.date),\n          status: note.status,\n        },\n      });\n\n      if (!updatedNote) {\n        throw new NotFoundException('Note not found');\n      }\n\n      return updatedNote;\n    }\n\n    return await this.databaseService.Note.update({\n      where: {\n        note_id: note.note_id,\n      },\n      data: {\n        title: note.title,\n        content: note.content,\n        status: note.status,\n      },\n    });\n  }\n\n  async deleteNoteById(id: string) {\n    await this.getNoteById(id);\n\n    const deletedNote = await this.databaseService.Note.delete({\n      where: {\n        note_id: id,\n      },\n    });\n\n    if (!deletedNote) {\n      throw new NotFoundException('Note not found');\n    }\n\n    return deletedNote;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PaymentController.html":{"url":"controllers/PaymentController.html","title":"controller - PaymentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PaymentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/payment/payment.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleCreatePayment\n                            \n                            \n                                    \n                                handleGetAllPayments\n                            \n                            \n                                    \n                                handleUpdatePayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleCreatePayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreatePayment(paymentRequest: PaymentCreateRequestType, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(paymentContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/payment/payment.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paymentRequest\n                                            \n                                                        PaymentCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAllPayments\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAllPayments()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(paymentContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/payment/payment.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdatePayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdatePayment(paymentRequest: PaymentUpdateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(paymentContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/payment/payment.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paymentRequest\n                                            \n                                                        PaymentUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, NotFoundException, Req, UseGuards } from '@nestjs/common';\nimport { paymentContract, PaymentCreateRequestType, PaymentUpdateRequestType } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { RequestWithJWT } from 'express';\nimport { AccessTokenAuthGuard } from '../auth/auth.guard';\nimport { PaymentService } from './payment.service';\n\n@Controller()\nexport class PaymentController {\n  constructor(private readonly paymentService: PaymentService) {}\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(paymentContract.create)\n  handleCreatePayment(@Body() paymentRequest: PaymentCreateRequestType, @Req() req: RequestWithJWT) {\n    return tsRestHandler(paymentContract.create, async () => {\n      const user = req.decoded_authorization;\n      if (!user) {\n        throw new NotFoundException('User not found');\n      }\n      const payment = await this.paymentService.createPayment(paymentRequest, user.user_id);\n\n      return { status: 200, body: payment };\n    });\n  }\n\n  @TsRestHandler(paymentContract.update)\n  handleUpdatePayment(@Body() paymentRequest: PaymentUpdateRequestType) {\n    return tsRestHandler(paymentContract.update, async () => {\n      const payment = await this.paymentService.updatePayment(paymentRequest);\n      return { status: 200, body: payment };\n    });\n  }\n\n  @TsRestHandler(paymentContract.getAll)\n  handleGetAllPayments() {\n    return tsRestHandler(paymentContract.getAll, async () => {\n      const payments = await this.paymentService.getAllPayments();\n      return { status: 200, body: payments };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaymentModule.html":{"url":"modules/PaymentModule.html","title":"module - PaymentModule","body":"\n                   \n\n\n\n\n    Modules\n    PaymentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PaymentModule_imports\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nJwtUtilsModule->PaymentModule\n\n\n\n\n\nMembershipsModule\n\nMembershipsModule\n\nPaymentModule -->\n\nMembershipsModule->PaymentModule\n\n\n\n\n\nPayosModule\n\nPayosModule\n\nPaymentModule -->\n\nPayosModule->PaymentModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPaymentModule -->\n\nUsersModule->PaymentModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nPaymentModule -->\n\nDatabaseService->PaymentModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/payment/payment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            PaymentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PaymentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                        \n                            MembershipsModule\n                        \n                        \n                            PayosModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { MembershipsModule } from '../memberships/memberships.module';\nimport { PayosModule } from '../payos/payos.module';\nimport { UsersModule } from '../users/users.module';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\n\n@Module({\n  imports: [UsersModule, JwtUtilsModule, MembershipsModule, PayosModule],\n  controllers: [PaymentController],\n  providers: [PaymentService, DatabaseService],\n})\nexport class PaymentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaymentService.html":{"url":"injectables/PaymentService.html","title":"injectable - PaymentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaymentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/payment/payment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPayment\n                            \n                            \n                                    Async\n                                getAllPayments\n                            \n                            \n                                    Async\n                                updatePayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, payosService: PayosService, userService: UsersService, membershipService: MembershipsService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/payment/payment.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        payosService\n                                                  \n                                                        \n                                                                        PayosService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        membershipService\n                                                  \n                                                        \n                                                                        MembershipsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPayment(paymentRequest: PaymentCreateRequestType, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/payment/payment.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paymentRequest\n                                            \n                                                        PaymentCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllPayments\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPayments()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/payment/payment.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePayment(paymentRequest: PaymentUpdateRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/payment/payment.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paymentRequest\n                                            \n                                                        PaymentUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { CheckoutRequestType } from '@payos/node/lib/type';\nimport {\n  PayIncludeUserInfo,\n  PaymentCreateRequestType,\n  PaymentResponseWithLinkType,\n  PaymentUpdateRequestType,\n  PayMethod,\n  PayStatus,\n} from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { MembershipsService } from '../memberships/memberships.service';\nimport { PayosService } from '../payos/payos.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class PaymentService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly payosService: PayosService,\n    private readonly userService: UsersService,\n    private readonly membershipService: MembershipsService,\n  ) {}\n\n  async createPayment(paymentRequest: PaymentCreateRequestType, userId: string): Promise {\n    const user = await this.userService.getUserById(userId);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const membership = await this.membershipService.findOne(paymentRequest.membership_id);\n    if (!membership) {\n      throw new NotFoundException('Membership not found');\n    }\n\n    const membershipExisted = await this.userService.checkAccountMembership(user.user_id);\n\n    if (membershipExisted) {\n      throw new NotFoundException('User already has a membership');\n    }\n\n    const payOsOrderCode = Number(new Date(Date.now()));\n    const payment = await this.databaseService.Payment.create({\n      data: {\n        user: { connect: { user_id: user.user_id } },\n        membership: { connect: { membership_id: membership.membership_id } },\n        value: membership.price,\n        status: PayStatus.FAILED,\n        payment_method: PayMethod.PAYOS,\n        created_at: new Date(Date.now()),\n        payos_order_code: String(payOsOrderCode),\n      },\n\n      include: {\n        membership: true,\n      },\n    });\n\n    const payRequest: CheckoutRequestType = {\n      orderCode: payOsOrderCode,\n      amount: membership.price,\n      returnUrl: 'https://pregnancy-journal-monorepo.pages.dev/membership',\n      cancelUrl: 'https://pregnancy-journal-monorepo.pages.dev/membership',\n      description: 'Payment for ' + membership.title,\n    };\n\n    const paymentUrl = await this.payosService.createLinkPayment(payRequest);\n\n    return { payment, payment_url: paymentUrl.checkoutUrl };\n  }\n\n  async updatePayment(paymentRequest: PaymentUpdateRequestType) {\n    const payment = await this.databaseService.Payment.findFirst({\n      where: { payos_order_code: paymentRequest.payos_order_code },\n      include: {\n        membership: true,\n      },\n    });\n    if (!payment) {\n      throw new NotFoundException('Payment not found');\n    }\n    return await this.databaseService.Payment.update({\n      where: { payment_history_id: payment.payment_history_id },\n      data: {\n        status: PayStatus.SUCCESS,\n        expired_at: new Date(Date.now() + payment.membership.duration_days * 24 * 60 * 60 * 1000),\n      },\n      include: {\n        membership: true,\n      },\n    });\n  }\n\n  async getAllPayments(): Promise {\n    return await this.databaseService.Payment.findMany({\n      include: {\n        membership: true,\n        user: {\n          select: {\n            name: true,\n            email: true,\n            phone: true,\n          },\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PayosController.html":{"url":"controllers/PayosController.html","title":"controller - PayosController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PayosController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/payos/payos.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { PayosService } from './payos.service';\n\n@Controller()\nexport class PayosController {\n  constructor(private readonly payosService: PayosService) {}\n\n  // @TsRestHandler(payosContract.create)\n  // async create(@Body() body: PayosCreateRequest) {\n  //   return tsRestHandler(payosContract.create, async ({ body }) => {\n  //     const payOsCreateRequest: CheckoutRequestType = {\n  //       ...body,\n  //       orderCode: Number(Date.now()),\n  //       cancelUrl: 'http://localhost:3000/payos/cancel',\n  //       returnUrl: 'http://localhost:3000/payos/return',\n  //     };\n  //     const payOsCreateResponse = await this.payosService.createLinkPayment(payOsCreateRequest);\n  //     return { status: 201, body: payOsCreateResponse };\n  //   });\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PayosModule.html":{"url":"modules/PayosModule.html","title":"module - PayosModule","body":"\n                   \n\n\n\n\n    Modules\n    PayosModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PayosModule\n\n\n\ncluster_PayosModule_exports\n\n\n\ncluster_PayosModule_providers\n\n\n\n\nPayosService \n\nPayosService \n\n\n\nPayosModule\n\nPayosModule\n\nPayosService  -->\n\nPayosModule->PayosService \n\n\n\n\n\nPayosService\n\nPayosService\n\nPayosModule -->\n\nPayosService->PayosModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/payos/payos.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PayosService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PayosController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PayosService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PayosController } from './payos.controller';\nimport { PayosService } from './payos.service';\n\n@Module({\n  controllers: [PayosController],\n  providers: [PayosService],\n  exports: [PayosService],\n})\nexport class PayosModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PayosService.html":{"url":"injectables/PayosService.html","title":"injectable - PayosService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PayosService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/payos/payos.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createLinkPayment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/payos/payos.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createLinkPayment\n                        \n                    \n                \n            \n            \n                \n                        \n                    createLinkPayment(payosCreateRequest: CheckoutRequestType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/payos/payos.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payosCreateRequest\n                                            \n                                                        CheckoutRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport PayOS from '@payos/node';\nimport { CheckoutRequestType } from '@payos/node/lib/type';\n\n@Injectable()\nexport class PayosService {\n  constructor(private configService: ConfigService) {}\n  async createLinkPayment(payosCreateRequest: CheckoutRequestType) {\n    const PAYOS_CLIENT_ID = this.configService.get('PAYOS_CLIENT_ID');\n    const PAYOS_API_KEY = this.configService.get('PAYOS_API_KEY');\n    const PAYOS_CHECKSUM_KEY = this.configService.get('PAYOS_CHECKSUM_KEY');\n\n    if (!PAYOS_CLIENT_ID || !PAYOS_API_KEY || !PAYOS_CHECKSUM_KEY) {\n      throw new NotFoundException('Please provide PAYOS_CLIENT_ID, PAYOS_API_KEY, PAYOS_CHECKSUM_KEY in .env file');\n    }\n\n    const payOS = new PayOS(PAYOS_CLIENT_ID, PAYOS_API_KEY, PAYOS_CHECKSUM_KEY);\n    return await payOS.createPaymentLink(payosCreateRequest);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/posts/posts.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                handleGetOne\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(createPostDto: PostCreateType, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(postContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                        PostCreateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(postContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll(page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(postContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(postContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(updatePostDto: PostUpdateType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(postContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                        PostUpdateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Query, Req, UnauthorizedException, UseGuards } from '@nestjs/common';\nimport { postContract, PostCreateType, PostUpdateType } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { RequestWithJWT } from 'express';\nimport { AccessTokenAuthGuard } from '../auth/auth.guard';\nimport { PostsService } from './posts.service';\n\n@Controller()\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(postContract.create)\n  handleCreate(@Body() createPostDto: PostCreateType, @Req() req: RequestWithJWT) {\n    return tsRestHandler(postContract.create, async () => {\n      const user = req.decoded_authorization?.user_id;\n      if (!user) {\n        throw new UnauthorizedException('Access token is invalid');\n      }\n\n      const post = await this.postsService.create(createPostDto, user);\n      return {\n        status: 200,\n        body: post,\n      };\n    });\n  }\n\n  @TsRestHandler(postContract.getAll)\n  handleGetAll(@Query('page') page: number, @Query('limit') limit: number) {\n    return tsRestHandler(postContract.getAll, async () => {\n      page = page ? page : 1;\n      limit = limit ? limit : 10;\n\n      const posts = await this.postsService.findAll(page, limit);\n      return {\n        status: 200,\n        body: {\n          total: posts.length,\n          data: posts,\n        },\n      };\n    });\n  }\n\n  @TsRestHandler(postContract.getOne)\n  handleGetOne(@Param('id') id: string) {\n    return tsRestHandler(postContract.getOne, async () => {\n      const post = await this.postsService.findOne(id);\n      return {\n        status: 200,\n        body: post,\n      };\n    });\n  }\n\n  @TsRestHandler(postContract.update)\n  handleUpdate(@Body() updatePostDto: PostUpdateType) {\n    return tsRestHandler(postContract.update, async () => {\n      const post = await this.postsService.update(updatePostDto);\n      return {\n        status: 200,\n        body: post,\n      };\n    });\n  }\n\n  @TsRestHandler(postContract.delete)\n  handleDelete(@Param('id') id: string) {\n    return tsRestHandler(postContract.delete, async () => {\n      await this.postsService.remove(id);\n      return {\n        status: 200,\n        body: {\n          message: 'Delete successfully',\n        },\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_exports\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nJwtUtilsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nPostsModule -->\n\nDatabaseService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\n\n@Module({\n  imports: [UsersModule, JwtUtilsModule],\n  controllers: [PostsController],\n  providers: [PostsService, DatabaseService],\n  exports: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/posts/posts.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: PostCreateType, user_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                        PostCreateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updatePostDto: PostUpdateType)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/posts/posts.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePostDto\n                                            \n                                                        PostUpdateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { PostCreateType, PostType, PostUpdateType } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly userService: UsersService,\n  ) {}\n\n  async create(createPostDto: PostCreateType, user_id: string): Promise {\n    await this.userService.getUserById(user_id);\n\n    return await this.databaseService.Post.create({\n      data: {\n        content: createPostDto.content,\n        updated_at: new Date(Date.now()),\n        created_at: new Date(Date.now()),\n        user: {\n          connect: { user_id: user_id },\n        },\n      },\n    });\n  }\n\n  async findAll(page: number, limit: number): Promise {\n    return await this.databaseService.Post.findMany({\n      skip: page == 0 ? Number(page) : (page - 1) * limit,\n      take: Number(limit),\n      orderBy: {\n        created_at: 'desc',\n      },\n    });\n  }\n\n  async findOne(id: string): Promise {\n    const post = await this.databaseService.Post.findUnique({\n      where: {\n        post_id: id,\n      },\n    });\n\n    if (!post) {\n      throw new NotFoundException('Post not found');\n    }\n    return post;\n  }\n\n  async update(updatePostDto: PostUpdateType) {\n    await this.findOne(updatePostDto.post_id);\n\n    return await this.databaseService.Post.update({\n      where: {\n        post_id: updatePostDto.post_id,\n      },\n      data: {\n        content: updatePostDto.content,\n        updated_at: new Date(Date.now()),\n      },\n    });\n  }\n\n  //tạm trc rồi thêm xóa comment react vs media sau\n  async remove(id: string) {\n    await this.findOne(id);\n    await this.databaseService.Post.delete({\n      where: {\n        post_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reaction.html":{"url":"classes/Reaction.html","title":"class - Reaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reaction/entities/reaction.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Reaction {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReactionController.html":{"url":"controllers/ReactionController.html","title":"controller - ReactionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReactionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reaction/reaction.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                reaction\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createReactionDto: CreateReactionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createReactionDto\n                                            \n                                                            CreateReactionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateReactionDto: UpdateReactionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateReactionDto\n                                            \n                                                            UpdateReactionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Patch, Post } from '@nestjs/common';\nimport { CreateReactionDto } from './dto/create-reaction.dto';\nimport { UpdateReactionDto } from './dto/update-reaction.dto';\nimport { ReactionService } from './reaction.service';\n\n@Controller('reaction')\nexport class ReactionController {\n  constructor(private readonly reactionService: ReactionService) {}\n\n  @Post()\n  create(@Body() createReactionDto: CreateReactionDto) {\n    return this.reactionService.create(createReactionDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.reactionService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.reactionService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateReactionDto: UpdateReactionDto) {\n    return this.reactionService.update(+id, updateReactionDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.reactionService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReactionModule.html":{"url":"modules/ReactionModule.html","title":"module - ReactionModule","body":"\n                   \n\n\n\n\n    Modules\n    ReactionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReactionModule\n\n\n\ncluster_ReactionModule_providers\n\n\n\n\nReactionService\n\nReactionService\n\n\n\nReactionModule\n\nReactionModule\n\nReactionModule -->\n\nReactionService->ReactionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reaction/reaction.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ReactionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReactionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ReactionController } from './reaction.controller';\nimport { ReactionService } from './reaction.service';\n\n@Module({\n  controllers: [ReactionController],\n  providers: [ReactionService],\n})\nexport class ReactionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReactionService.html":{"url":"injectables/ReactionService.html","title":"injectable - ReactionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReactionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reaction/reaction.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createReactionDto: CreateReactionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createReactionDto\n                                            \n                                                            CreateReactionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateReactionDto: UpdateReactionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reaction/reaction.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateReactionDto\n                                            \n                                                            UpdateReactionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateReactionDto } from './dto/create-reaction.dto';\nimport { UpdateReactionDto } from './dto/update-reaction.dto';\n\n@Injectable()\nexport class ReactionService {\n  create(createReactionDto: CreateReactionDto) {\n    return 'This action adds a new reaction';\n  }\n\n  findAll() {\n    return `This action returns all reaction`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} reaction`;\n  }\n\n  update(id: number, updateReactionDto: UpdateReactionDto) {\n    return `This action updates a #${id} reaction`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} reaction`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecordsController.html":{"url":"controllers/RecordsController.html","title":"controller - RecordsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecordsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/records.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleCreateRecord\n                            \n                            \n                                    \n                                handleDeleteRecord\n                            \n                            \n                                    \n                                handleGetRecordById\n                            \n                            \n                                    \n                                    \n                                handleGetRecordByUserId\n                            \n                            \n                                    \n                                handleUpdateRecord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleCreateRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreateRecord(record: RecordCreateRequest, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(recordContract.createRecord)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                record\n                                            \n                                                        RecordCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDeleteRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDeleteRecord(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(recordContract.deleteRecord)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetRecordById\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetRecordById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(recordContract.getRecordById)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleGetRecordByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetRecordByUserId(request: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(recordContract.getRecordByUserId)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdateRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdateRecord(record: RecordUpdateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(recordContract.updateRecord)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                record\n                                            \n                                                        RecordUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Req, UnauthorizedException, UseGuards } from '@nestjs/common';\nimport { recordContract, RecordCreateRequest, RecordUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { RequestWithJWT } from 'express';\nimport { AccessTokenAuthGuard } from '../auth/auth.guard';\nimport { JwtPayload } from '../utils/jwt/jwt.interface';\nimport { RecordsService } from './records.service';\n\n@Controller()\nexport class RecordsController {\n  constructor(private readonly recordService: RecordsService) {}\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(recordContract.createRecord)\n  handleCreateRecord(@Body() record: RecordCreateRequest, @Req() req: RequestWithJWT) {\n    return tsRestHandler(recordContract.createRecord, async () => {\n      const userId = (req.decoded_authorization as JwtPayload).user_id;\n      const result = await this.recordService.createRecord({ record, userId });\n      return {\n        status: 200,\n        body: result,\n      };\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(recordContract.getRecordByUserId)\n  handleGetRecordByUserId(@Req() request: RequestWithJWT) {\n    return tsRestHandler(recordContract.updateRecord, async () => {\n      if (!request.decoded_authorization) {\n        throw new UnauthorizedException('Unauthorized');\n      }\n      const id = request.decoded_authorization.user_id;\n      const record = await this.recordService.getRecordByUserId(id);\n      return {\n        status: 201,\n        body: record,\n      };\n    });\n  }\n\n  @TsRestHandler(recordContract.updateRecord)\n  handleUpdateRecord(@Body() record: RecordUpdateRequest) {\n    return tsRestHandler(recordContract.createRecord, async () => {\n      const result = await this.recordService.updateRecord(record);\n      return {\n        status: 201,\n        body: result,\n      };\n    });\n  }\n\n  @TsRestHandler(recordContract.deleteRecord)\n  handleDeleteRecord(@Param('id') id: string) {\n    return tsRestHandler(recordContract.createRecord, async () => {\n      const mes = await this.recordService.deleteRecord(id);\n      return {\n        status: 201,\n        body: mes,\n      };\n    });\n  }\n\n  @TsRestHandler(recordContract.getRecordById)\n  handleGetRecordById(@Param('id') id: string) {\n    return tsRestHandler(recordContract.getRecordById, async () => {\n      const record = await this.recordService.getRecordById(id);\n      return {\n        status: 201,\n        body: record[0],\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecordsModule.html":{"url":"modules/RecordsModule.html","title":"module - RecordsModule","body":"\n                   \n\n\n\n\n    Modules\n    RecordsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RecordsModule\n\n\n\ncluster_RecordsModule_imports\n\n\n\ncluster_RecordsModule_providers\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nRecordsModule\n\nRecordsModule\n\nRecordsModule -->\n\nJwtUtilsModule->RecordsModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nRecordsModule -->\n\nMediaModule->RecordsModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nRecordsModule -->\n\nMetricModule->RecordsModule\n\n\n\n\n\nReminderModule\n\nReminderModule\n\nRecordsModule -->\n\nReminderModule->RecordsModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nRecordsModule -->\n\nTagModule->RecordsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nRecordsModule -->\n\nUsersModule->RecordsModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nRecordsModule -->\n\nDatabaseService->RecordsModule\n\n\n\n\n\nRecordsService\n\nRecordsService\n\nRecordsModule -->\n\nRecordsService->RecordsModule\n\n\n\n\n\nStandardService\n\nStandardService\n\nRecordsModule -->\n\nStandardService->RecordsModule\n\n\n\n\n\nTimeUtilsService\n\nTimeUtilsService\n\nRecordsModule -->\n\nTimeUtilsService->RecordsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/records.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            RecordsService\n                        \n                        \n                            StandardService\n                        \n                        \n                            TimeUtilsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecordsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                        \n                            MediaModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            ReminderModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { MediaModule } from '../media/media.module';\nimport { MetricModule } from '../metric/metric.module';\nimport { ReminderModule } from '../reminder/reminder.module';\nimport { StandardService } from '../standard/standard.service';\nimport { TagModule } from '../tags/tag.module';\nimport { UsersModule } from '../users/users.module';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport { TimeUtilsService } from '../utils/time/timeUtils.service';\nimport { RecordsController } from './records.controller';\nimport { RecordsService } from './records.service';\n\n@Module({\n  imports: [JwtUtilsModule, MetricModule, TagModule, UsersModule, ReminderModule, MediaModule],\n  controllers: [RecordsController],\n  providers: [RecordsService, DatabaseService, TimeUtilsService, StandardService],\n})\nexport class RecordsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecordsService.html":{"url":"injectables/RecordsService.html","title":"injectable - RecordsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecordsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/records.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRecord\n                            \n                            \n                                    Async\n                                deleteRecord\n                            \n                            \n                                    Private\n                                    Async\n                                formatRecord\n                            \n                            \n                                    Public\n                                    Async\n                                getRecordById\n                            \n                            \n                                    Async\n                                getRecordByUserId\n                            \n                            \n                                    Private\n                                    Async\n                                getStandardIdByWeek\n                            \n                            \n                                    Private\n                                    Async\n                                getTagIdByValue\n                            \n                            \n                                    Async\n                                updateRecord\n                            \n                            \n                                    Private\n                                    Async\n                                updateRecordMetrics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataService: DatabaseService, timeUtilsService: TimeUtilsService, userService: UsersService, reminderService: ReminderService, mediaService: MediaService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/records/records.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timeUtilsService\n                                                  \n                                                        \n                                                                        TimeUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reminderService\n                                                  \n                                                        \n                                                                        ReminderService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRecord(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Create a new record and return formatted response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteRecord(recordId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:228\n                        \n                    \n\n\n            \n                \n                        Delete record by record ID and return success message\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recordId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        formatRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatRecord(records: VisitRecordIncludeOtherTables[], user: UserEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:322\n                        \n                    \n\n\n            \n                \n                        Format records for response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                records\n                                            \n                                                        VisitRecordIncludeOtherTables[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getRecordById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecordById(recordId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:285\n                        \n                    \n\n\n            \n                \n                        Get record by record ID and return formatted response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                recordId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecordByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecordByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Get all records by user ID and return formatted response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getStandardIdByWeek\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStandardIdByWeek(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:508\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getTagIdByValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTagIdByValue(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:372\n                        \n                    \n\n\n            \n                \n                        Checks the value of a record metric against the standard\nReturns the tag ID if the value is out of bounds\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateRecord\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRecord(record: RecordUpdateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:164\n                        \n                    \n\n\n            \n                \n                        Update record by record ID and return formatted response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                record\n                                            \n                                                        RecordUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        updateRecordMetrics\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateRecordMetrics(visitRecordId: string, metricsData: Array, userExpectBirthDate: Date, visitDoctorDate: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/records/records.service.ts:441\n                        \n                    \n\n\n            \n                \n                        Updates record metrics data based on provided data and creates new record metrics if not found\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                visitRecordId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Visit record ID\n\n                                            \n                                        \n                                        \n                                                metricsData\n                                            \n                                                        Array\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of metric data to update\n\n                                            \n                                        \n                                        \n                                                userExpectBirthDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User expected birthdate\n\n                                            \n                                        \n                                        \n                                                visitDoctorDate\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Visit doctor date\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { RecordCreateRequest, RecordResponse, RecordUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { MediaService } from '../media/media.service';\nimport { ReminderService } from '../reminder/reminder.service';\nimport { UserEntity } from '../users/models/user.entity';\nimport { UsersService } from '../users/users.service';\nimport { TimeUtilsService } from '../utils/time/timeUtils.service';\nimport { VisitRecordIncludeOtherTables } from './entities/record.entity';\n\n@Injectable()\nexport class RecordsService {\n  constructor(\n    private readonly dataService: DatabaseService,\n    private readonly timeUtilsService: TimeUtilsService,\n    private readonly userService: UsersService,\n    private readonly reminderService: ReminderService,\n    private readonly mediaService: MediaService,\n  ) {}\n\n  //================================================================================================\n  //                          PUBLIC FUNCTIONS - CRUD OPERATIONS\n  //================================================================================================\n\n  /**\n   * Create a new record and return formatted response\n   * @param record\n   * @param userId\n   * @returns Promise\n   * @throws NotFoundException\n   */\n  async createRecord({ record, userId }: { record: RecordCreateRequest; userId: string }): Promise {\n    const user = await this.dataService.User.findUnique({\n      where: { user_id: userId },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (!record.hospital_id) {\n      throw new NotFoundException('Hospital not found');\n    } else {\n      const hospital = await this.dataService.Hospital.findUnique({\n        where: { hospital_id: record.hospital_id },\n      });\n      if (!hospital) {\n        throw new NotFoundException('Hospital not found');\n      }\n    }\n    for (const data of record.data) {\n      const metric = await this.dataService.Metric.findUnique({\n        where: { metric_id: data.metric_id },\n      });\n      if (!metric) {\n        throw new NotFoundException('Metric not found');\n      }\n    }\n\n    const newRecord = await this.dataService.Record.create({\n      data: {\n        visit_doctor_date: record.visit_doctor_date,\n        next_visit_doctor_date: record.next_visit_doctor_date,\n        doctor_name: record.doctor_name,\n        created_at: new Date(Date.now()),\n        user: {\n          connect: {\n            user_id: userId,\n          },\n        },\n        hospital: {\n          connect: {\n            hospital_id: record.hospital_id,\n          },\n        },\n      },\n      include: {\n        media: true,\n        hospital: true,\n      },\n    });\n\n    // Process metrics sequentially to avoid any race conditions\n    for (const data of record.data) {\n      const tag_id = await this.getTagIdByValue({\n        value: data.value,\n        metric_id: data.metric_id,\n        userExpectBirthDate: user.expected_birth_date,\n        visit_doctor_date: new Date(record.visit_doctor_date),\n      });\n\n      await this.dataService.RecordMetric.create({\n        data: {\n          value: data.value,\n          created_at: new Date(Date.now()),\n          updated_at: new Date(Date.now()),\n          metric_id: data.metric_id,\n          visit_record_id: newRecord.visit_record_id,\n          tag_id: tag_id ? tag_id : null,\n        },\n      });\n    }\n\n    // Create reminder\n    await this.reminderService.createByNextVisitDoctorDate({\n      user_id: userId,\n      visit_record_id: newRecord.visit_record_id,\n      next_visit_doctor_date: record.next_visit_doctor_date,\n    });\n\n    const formatRecord = await this.getRecordById(newRecord.visit_record_id);\n    return formatRecord[0];\n  }\n\n  /**\n   * Get all records by user ID and return formatted response\n   * @param userId\n   * @returns Promise\n   * @throws NotFoundException\n   * @async\n   */\n  async getRecordByUserId(userId: string): Promise {\n    const user: UserEntity | null = await this.dataService.User.findUnique({\n      where: { user_id: userId },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    const records: VisitRecordIncludeOtherTables[] = await this.dataService.Record.findMany({\n      where: { user_id: userId },\n      include: {\n        visit_record_metric: true,\n        media: true,\n        hospital: true,\n      },\n      orderBy: {\n        visit_doctor_date: 'asc',\n      },\n    });\n\n    if (records.length === 0) {\n      return { total: 0, data: [] };\n    }\n\n    const result = await this.formatRecord(records, user);\n\n    return {\n      total: result.length,\n      data: result,\n    };\n  }\n\n  /**\n   * Update record by record ID and return formatted response\n   * @functions-used getUserById(), updateRecordMetrics(), getRecordById(), updateByNextVisitDoctorDate()\n   * @param record\n   * @returns Promise\n   * @throws NotFoundException\n   * @returns Promise\n   * @async\n   */\n  async updateRecord(record: RecordUpdateRequest): Promise {\n    // Find existing record to get user ID\n    const existingRecord = await this.dataService.Record.findUnique({\n      where: { visit_record_id: record.visit_record_id },\n      select: { user_id: true },\n    });\n\n    if (!existingRecord) {\n      throw new NotFoundException('Record not found');\n    }\n\n    // Get user details (needed for metric updates)\n    const user = await this.userService.getUserById(existingRecord.user_id);\n\n    // Verify hospital exists before connecting\n    const hospital = await this.dataService.Hospital.findUnique({\n      where: { hospital_id: record.hospital_id },\n    });\n\n    if (!hospital) {\n      throw new NotFoundException('Hospital not found');\n    }\n\n    // Update base record\n    const newRecord = await this.dataService.Record.update({\n      where: { visit_record_id: record.visit_record_id },\n      data: {\n        visit_doctor_date: record.visit_doctor_date,\n        next_visit_doctor_date: record.next_visit_doctor_date,\n        doctor_name: record.doctor_name,\n        hospital: {\n          connect: {\n            hospital_id: hospital.hospital_id,\n          },\n        },\n      },\n    });\n\n    // Update reminder if needed\n    if (record.next_visit_doctor_date) {\n      await this.reminderService.updateByNextVisitDoctorDate({\n        next_visit_doctor_date: record.next_visit_doctor_date,\n        visit_record_id: record.visit_record_id,\n        user_id: newRecord.user_id,\n      });\n    }\n\n    // Update record metrics if provided\n    if (record.data && record.data.length > 0) {\n      await this.updateRecordMetrics(record.visit_record_id, record.data, user.expected_birth_date, new Date(newRecord.visit_doctor_date));\n    }\n\n    // Return formatted record\n    const formatRecord = await this.getRecordById(record.visit_record_id);\n    return formatRecord[0];\n  }\n\n  /**\n   * Delete record by record ID and return success message\n   * @param recordId\n   * @returns Promise\n   * @throws NotFoundException\n   * @async\n   */\n  async deleteRecord(recordId: string) {\n    try {\n      const record = await this.dataService.Record.findUnique({\n        where: { visit_record_id: recordId },\n      });\n\n      if (!record) {\n        throw new NotFoundException('Record not found');\n      }\n\n      const deletedRecordMetric = await this.dataService.RecordMetric.findMany({\n        where: { visit_record_id: recordId },\n      });\n\n      if (deletedRecordMetric.length > 0) {\n        await this.dataService.RecordMetric.deleteMany({\n          where: { visit_record_id: recordId },\n        });\n      }\n\n      const deletedMedia = await this.dataService.Media.findMany({\n        where: { visit_record_id: recordId },\n      });\n\n      if (deletedMedia.length > 0) {\n        for (const media of deletedMedia) {\n          await this.mediaService.remove(media.media_id);\n        }\n      }\n\n      const deletedReminder = await this.dataService.Reminder.findMany({\n        where: { visit_record_id: recordId },\n      });\n\n      if (deletedReminder.length > 0) {\n        await this.dataService.Reminder.deleteMany({\n          where: { visit_record_id: recordId },\n        });\n      }\n\n      // Delete the main record last\n      await this.dataService.Record.delete({\n        where: { visit_record_id: recordId },\n      });\n      return { message: 'Record deleted' };\n    } catch (error) {\n      Logger.error(error);\n    }\n  }\n\n  /**\n   * Get record by record ID and return formatted response\n   * @param recordId\n   * @returns Promise\n   * @throws NotFoundException\n   * @async\n   */\n  public async getRecordById(recordId: string) {\n    const record = await this.dataService.Record.findUnique({\n      where: { visit_record_id: recordId },\n      include: {\n        visit_record_metric: true,\n        media: true,\n        hospital: true,\n      },\n    });\n\n    if (!record) {\n      throw new NotFoundException('Record not found');\n    }\n\n    const user = await this.dataService.User.findUnique({\n      where: { user_id: record.user_id },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return await this.formatRecord([record], user);\n  }\n\n  //================================================================================================\n  //                          PRIVATE FUNCTIONS - HELPER FUNCTIONS\n  //================================================================================================\n\n  /**\n   * Format records for response\n   * @param records\n   * @param user\n   * @returns Promise\n   * @async\n   * @private\n   */\n  private async formatRecord(records: VisitRecordIncludeOtherTables[], user: UserEntity): Promise {\n    return await Promise.all(\n      records.map(async (record) => {\n        // Calculate pregnancy week for this record\n        const week = this.timeUtilsService.calculatePregnancyWeeks({\n          expectedBirthDate: user.expected_birth_date,\n          visitDate: record.visit_doctor_date,\n        });\n\n        // Extract just the values and metric IDs from the metrics\n        const data = await Promise.all(\n          record.visit_record_metric.map(async (metricRecord) => {\n            const standardId = await this.getStandardIdByWeek({ week, metric_id: metricRecord.metric_id });\n            return {\n              metric_id: metricRecord.metric_id,\n              value: metricRecord.value,\n              tag_id: metricRecord.tag_id,\n              standard_id: standardId,\n            };\n          }),\n        );\n\n        // Return the simplified record structure\n        return {\n          week,\n          visit_record_id: record.visit_record_id,\n          visit_doctor_date: record.visit_doctor_date,\n          next_visit_doctor_date: record.next_visit_doctor_date as Date,\n          hospital: record.hospital,\n          doctor_name: record.doctor_name,\n          media: record.media.map((m) => ({\n            media_id: m.media_id,\n            media_url: m.media_url,\n          })),\n          data,\n        };\n      }),\n    );\n  }\n\n  /**\n   * Checks the value of a record metric against the standard\n   * Returns the tag ID if the value is out of bounds\n   * @param value\n   * @param metric_id\n   * @param userExpectBirthDate\n   * @param visit_doctor_date\n   * @private\n   * @async\n   */\n  private async getTagIdByValue({\n    value,\n    metric_id,\n    userExpectBirthDate,\n    visit_doctor_date,\n  }: {\n    value: number;\n    metric_id: string;\n    userExpectBirthDate: Date;\n    visit_doctor_date: Date;\n  }): Promise {\n    const week = this.timeUtilsService.calculatePregnancyWeeks({\n      expectedBirthDate: userExpectBirthDate,\n      visitDate: visit_doctor_date,\n    });\n\n    const metric = await this.dataService.Metric.findUnique({\n      where: { metric_id },\n    });\n\n    if (!metric) {\n      console.warn(`Metric with ID ${metric_id} not found when checking record value`);\n      return null;\n    }\n\n    const standards = await this.dataService.Standard.findMany({\n      where: { metric_id },\n      orderBy: { week: 'asc' }, // Ensure standards are sorted\n    });\n\n    if (standards.length === 0) {\n      console.warn(`No standards found for metric ${metric_id} (${metric.title || 'unnamed'})`);\n      return null;\n    }\n\n    // Handle case where week is before first standard\n    if (week  s.week === week);\n    if (exactMatch) {\n      const { lowerbound, upperbound } = exactMatch;\n      return value  upperbound ? metric.tag_id : null;\n    }\n\n    // Find the last standard with week less than current week\n    const applicableStandard = standards.filter((s) => s.week  b.week - a.week)[0]; // Get the highest applicable week\n\n    if (applicableStandard) {\n      const { lowerbound, upperbound } = applicableStandard;\n      return value  upperbound ? metric.tag_id : null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Updates record metrics data based on provided data and creates new record metrics if not found\n   * @param visitRecordId Visit record ID\n   * @param metricsData Array of metric data to update\n   * @param userExpectBirthDate User expected birthdate\n   * @param visitDoctorDate Visit doctor date\n   * @returns Promise\n   * @throws NotFoundException\n   * @private\n   * @async\n   */\n  private async updateRecordMetrics(\n    visitRecordId: string,\n    metricsData: Array,\n    userExpectBirthDate: Date,\n    visitDoctorDate: Date,\n  ): Promise {\n    // Fetch all metrics at once to validate\n    const metricIds = metricsData.map((m) => m.metric_id);\n    const metrics = await this.dataService.Metric.findMany({\n      where: { metric_id: { in: metricIds } },\n    });\n\n    if (metrics.length !== metricIds.length) {\n      const missingMetricIds = metricIds.filter((id) => !metrics.find((m) => m.metric_id === id));\n      throw new NotFoundException(`The following metrics were not found: ${missingMetricIds.join(', ')}`);\n    }\n\n    // Get existing record metrics to determine create vs update\n    const existingMetrics = await this.dataService.RecordMetric.findMany({\n      where: {\n        visit_record_id: visitRecordId,\n        metric_id: { in: metricIds },\n      },\n    });\n\n    const existingMetricMap = new Map(existingMetrics.map((m) => [m.metric_id, m]));\n\n    // Process each metric\n    for (const metricData of metricsData) {\n      // Check value and determine tag\n      const tagId = await this.getTagIdByValue({\n        value: metricData.value,\n        metric_id: metricData.metric_id,\n        userExpectBirthDate: userExpectBirthDate,\n        visit_doctor_date: visitDoctorDate,\n      });\n\n      const existingMetric = existingMetricMap.get(metricData.metric_id);\n\n      if (existingMetric) {\n        // Update existing metric\n        await this.dataService.RecordMetric.update({\n          where: {\n            visit_record_metric_id: existingMetric.visit_record_metric_id,\n          },\n          data: {\n            value: metricData.value,\n            tag_id: tagId || null,\n            updated_at: new Date(Date.now()),\n          },\n        });\n      } else {\n        // Create new metric\n        await this.dataService.RecordMetric.create({\n          data: {\n            value: metricData.value,\n            created_at: new Date(Date.now()),\n            updated_at: new Date(Date.now()),\n            metric_id: metricData.metric_id,\n            visit_record_id: visitRecordId,\n            tag_id: tagId || null,\n          },\n        });\n      }\n    }\n  }\n\n  private async getStandardIdByWeek({ week, metric_id }: { week: number; metric_id: string }): Promise {\n    const standards = await this.dataService.Standard.findMany({\n      where: {\n        metric_id,\n      },\n    });\n\n    if (standards.length === 0) {\n      return null;\n    }\n\n    if (week  standards[standards.length - 1].week) {\n      return standards[standards.length - 1].standard_id;\n    }\n\n    const standard = standards.find((s) => s.week === week);\n    if (standard) {\n      return standard.standard_id;\n    }\n\n    return standards.filter((s) => s.week  b.week - a.week)[0].standard_id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RefreshTokenAuthGuard.html":{"url":"guards/RefreshTokenAuthGuard.html","title":"guard - RefreshTokenAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RefreshTokenAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtUtilsService: JwtUtilsService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:64\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtUtilsService\n                                                  \n                                                        \n                                                                        JwtUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { RefreshTokenRequest, UserRole } from '@pregnancy-journal-monorepo/contract';\nimport { RequestWithJWT } from 'express';\nimport { ROLES_KEY } from '../utils/decorators/role.decorator';\nimport { JwtUtilsService } from '../utils/jwt/jwtUtils.service';\n\n@Injectable()\nexport class AccessTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      throw new ForbiddenException('User access token authentication required');\n    }\n\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n// @Injectable()\n// export class EmailVerifyTokenAuthGuard implements CanActivate {\n//   constructor(\n//     private readonly jwtUtilsService: JwtUtilsService,\n//     private readonly configService: ConfigService,\n//   ) {}\n//\n//   canActivate(context: ExecutionContext): boolean {\n//     const request = context.switchToHttp().getRequest();\n//     const token = request.query.email_verify_token;\n//     if (!token) {\n//       throw new ForbiddenException('User authentication required');\n//     }\n//     try {\n//       const decoded_email_verify = this.jwtUtilsService.verifyToken({\n//         token: token,\n//         secret: this.configService.get('JWT_EMAIL_TOKEN_SECRET'),\n//       });\n//       request.decoded_email_verify = decoded_email_verify;\n//       return true;\n//     } catch (e) {\n//       throw new UnprocessableEntityException(e.message);\n//     }\n//   }\n// }\n\n@Injectable()\nexport class RefreshTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = (request.body as RefreshTokenRequest).refresh_token;\n    if (!token) {\n      throw new ForbiddenException('User authentication required');\n    }\n\n    try {\n      const decoded_refresh_token = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET') || 'jwt_secret',\n      });\n      const decoded_authorization = request.decoded_authorization;\n      if (decoded_authorization) {\n        if (decoded_authorization.user_id !== decoded_refresh_token.user_id) {\n          throw new ForbiddenException('Invalid token');\n        }\n      }\n      request.decoded_refresh_token = decoded_refresh_token;\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class RoleAuthGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [context.getHandler(), context.getClass()]);\n    if (!requiredRoles) {\n      return true;\n    }\n    try {\n      const request = context.switchToHttp().getRequest();\n      const token = request.headers.authorization?.split(' ')[1];\n      if (!token) {\n        throw new ForbiddenException('User authentication required');\n      }\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      if (!decoded_authorization) {\n        throw new ForbiddenException('User role authentication required');\n      }\n      const isAllowed = requiredRoles.includes(decoded_authorization.role);\n      if (!isAllowed) {\n        throw new ForbiddenException(\"You don't have permission to access\");\n      }\n      return isAllowed;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class IsLoggin implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      return true;\n    }\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n      return true;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Reminder.html":{"url":"interfaces/Reminder.html","title":"interface - Reminder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Reminder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            remind_date\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            user_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remind_date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        remind_date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         ReminderType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ReminderType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ReminderType } from '@pregnancy-journal-monorepo/contract';\n\ninterface Reminder {\n  id: string;\n  title: string;\n  type: ReminderType;\n  content: string;\n  remind_date: Date;\n  user_id: string;\n  status: string;\n}\n\nexport class ReminderEntity {\n  id: string;\n  title: string;\n  type: ReminderType;\n  content: string;\n  remind_date: Date;\n  user_id: string;\n  status: string;\n\n  constructor(reminderData: Reminder) {\n    this.id = reminderData.id;\n    this.title = reminderData.title;\n    this.type = reminderData.type;\n    this.content = reminderData.content;\n    this.remind_date = reminderData.remind_date;\n    this.user_id = reminderData.user_id;\n    this.status = reminderData.status;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ReminderController.html":{"url":"controllers/ReminderController.html","title":"controller - ReminderController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ReminderController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reminder/reminder.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleFindAll\n                            \n                            \n                                    \n                                handleFindOne\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(body: ReminderCreateRequest, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(reminderContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ReminderCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(reminderContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleFindAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(reminderContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleFindOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleFindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(reminderContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(body: ReminderUpdateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(reminderContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ReminderUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Req, UseGuards } from '@nestjs/common';\nimport { reminderContract, ReminderCreateRequest, ReminderType, ReminderUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { RequestWithJWT } from 'express';\nimport { AccessTokenAuthGuard } from '../auth/auth.guard';\nimport { ReminderService } from './reminder.service';\n\n@Controller()\nexport class ReminderController {\n  constructor(private readonly reminderService: ReminderService) {}\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(reminderContract.create)\n  handleCreate(@Body() body: ReminderCreateRequest, @Req() req: RequestWithJWT) {\n    return tsRestHandler(reminderContract.create, async () => {\n      const auth = req.decoded_authorization;\n\n      if (!auth) {\n        return { status: 401, body: { message: 'Unauthorized' } };\n      }\n\n      const reminder = await this.reminderService.create(body, auth.user_id);\n      return { status: 200, body: reminder };\n    });\n  }\n\n  @TsRestHandler(reminderContract.getAll)\n  handleFindAll() {\n    return tsRestHandler(reminderContract.getAll, async () => {\n      const reminders = await this.reminderService.findAll();\n      return { status: 200, body: reminders };\n    });\n  }\n\n  @TsRestHandler(reminderContract.getOne)\n  handleFindOne(@Param('id') id: string) {\n    return tsRestHandler(reminderContract.getOne, async () => {\n      const reminder = await this.reminderService.findOne(id);\n      if (!reminder) {\n        return { status: 404, body: { message: 'Reminder not found' } };\n      }\n      return { status: 200, body: reminder };\n    });\n  }\n\n  @TsRestHandler(reminderContract.update)\n  handleUpdate(@Body() body: ReminderUpdateRequest) {\n    return tsRestHandler(reminderContract.update, async () => {\n      const isExist = await this.reminderService.findOne(body.reminder_id);\n      if (!isExist) {\n        return { status: 404, body: { message: 'Reminder not found' } };\n      }\n      if (isExist.type == ReminderType.FOLLOW_UP_MEETING) {\n        return { status: 400, body: { message: 'Cannot update meeting' } };\n      }\n      const reminder = await this.reminderService.update(body);\n      return { status: 200, body: reminder };\n    });\n  }\n\n  @TsRestHandler(reminderContract.delete)\n  handleDelete(@Param() { id }: { id: string }) {\n    return tsRestHandler(reminderContract.delete, async () => {\n      const isExist = await this.reminderService.findOne(id);\n      if (!isExist) {\n        return { status: 404, body: { message: 'Reminder not found' } };\n      }\n      if (isExist.type == ReminderType.FOLLOW_UP_MEETING) {\n        return { status: 400, body: { message: 'Cannot delete meeting' } };\n      }\n      const deleted = await this.reminderService.remove(id);\n      return { status: 200, body: deleted };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReminderEntity.html":{"url":"classes/ReminderEntity.html","title":"class - ReminderEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReminderEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                remind_date\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reminderData: Reminder)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reminderData\n                                                  \n                                                        \n                                                                        Reminder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remind_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ReminderType\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ReminderType } from '@pregnancy-journal-monorepo/contract';\n\ninterface Reminder {\n  id: string;\n  title: string;\n  type: ReminderType;\n  content: string;\n  remind_date: Date;\n  user_id: string;\n  status: string;\n}\n\nexport class ReminderEntity {\n  id: string;\n  title: string;\n  type: ReminderType;\n  content: string;\n  remind_date: Date;\n  user_id: string;\n  status: string;\n\n  constructor(reminderData: Reminder) {\n    this.id = reminderData.id;\n    this.title = reminderData.title;\n    this.type = reminderData.type;\n    this.content = reminderData.content;\n    this.remind_date = reminderData.remind_date;\n    this.user_id = reminderData.user_id;\n    this.status = reminderData.status;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ReminderModule.html":{"url":"modules/ReminderModule.html","title":"module - ReminderModule","body":"\n                   \n\n\n\n\n    Modules\n    ReminderModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReminderModule\n\n\n\ncluster_ReminderModule_imports\n\n\n\ncluster_ReminderModule_exports\n\n\n\ncluster_ReminderModule_providers\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nReminderModule\n\nReminderModule\n\nReminderModule -->\n\nJwtUtilsModule->ReminderModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nReminderModule -->\n\nUsersModule->ReminderModule\n\n\n\n\n\nReminderService \n\nReminderService \n\nReminderService  -->\n\nReminderModule->ReminderService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nReminderModule -->\n\nDatabaseService->ReminderModule\n\n\n\n\n\nReminderService\n\nReminderService\n\nReminderModule -->\n\nReminderService->ReminderModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reminder/reminder.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            ReminderService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ReminderController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ReminderService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport { ReminderController } from './reminder.controller';\nimport { ReminderService } from './reminder.service';\n\n@Module({\n  imports: [UsersModule, JwtUtilsModule],\n  controllers: [ReminderController],\n  providers: [ReminderService, DatabaseService],\n  exports: [ReminderService],\n})\nexport class ReminderModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ReminderService.html":{"url":"injectables/ReminderService.html","title":"injectable - ReminderService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReminderService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reminder/reminder.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createByNextVisitDoctorDate\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateByNextVisitDoctorDate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createReminderDto: ReminderCreateRequest, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createReminderDto\n                                            \n                                                            ReminderCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createByNextVisitDoctorDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    createByNextVisitDoctorDate(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(updateReminderDto: ReminderUpdateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateReminderDto\n                                            \n                                                            ReminderUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateByNextVisitDoctorDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateByNextVisitDoctorDate(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/reminder/reminder.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ReminderCreateRequest, ReminderResponse, ReminderType, ReminderUpdateRequest, Status } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class ReminderService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly userService: UsersService,\n  ) {}\n\n  async createByNextVisitDoctorDate({\n    visit_record_id,\n    user_id,\n    next_visit_doctor_date,\n  }: {\n    visit_record_id: string;\n    user_id: string;\n    next_visit_doctor_date: string;\n  }): Promise {\n    const nextVisitDoctorDate = new Date(next_visit_doctor_date);\n    const remind_date = new Date(nextVisitDoctorDate);\n    remind_date.setDate(remind_date.getDate() - 1);\n    const reminder_content = `Bạn có lịch hẹn tái khám vào ngày ${nextVisitDoctorDate.getDate()}/${nextVisitDoctorDate.getMonth() + 1}/${remind_date.getFullYear()}`;\n\n    return await this.databaseService.Reminder.create({\n      data: {\n        title: 'Ngày tái khám',\n        content: reminder_content,\n        status: Status.ACTIVE,\n        type: ReminderType.FOLLOW_UP_MEETING,\n        remind_date,\n        user: {\n          connect: {\n            user_id,\n          },\n        },\n        visit_record: {\n          connect: {\n            visit_record_id,\n          },\n        },\n      },\n    });\n  }\n\n  async create(createReminderDto: ReminderCreateRequest, userId: string): Promise {\n    await this.userService.getUserById(userId);\n\n    return await this.databaseService.Reminder.create({\n      data: {\n        color: createReminderDto.color,\n        title: createReminderDto.title,\n        content: createReminderDto.content,\n        status: Status.ACTIVE,\n        type: createReminderDto.type || ReminderType.USER_CREATED_EVENT,\n        remind_date: new Date(createReminderDto.remind_date),\n        user: {\n          connect: {\n            user_id: userId,\n          },\n        },\n      },\n    });\n  }\n\n  findAll() {\n    return this.databaseService.Reminder.findMany();\n  }\n\n  async findOne(id: string) {\n    const result = await this.databaseService.Reminder.findUnique({\n      where: {\n        reminder_id: id,\n      },\n    });\n    if (!result) {\n      return null;\n    }\n    return result;\n  }\n\n  async updateByNextVisitDoctorDate({\n    next_visit_doctor_date,\n    visit_record_id,\n    user_id,\n  }: {\n    next_visit_doctor_date: string;\n    visit_record_id: string;\n    user_id: string;\n  }) {\n    const nextVisitDoctorDate = new Date(next_visit_doctor_date);\n    const remind_date = new Date(nextVisitDoctorDate);\n    remind_date.setDate(remind_date.getDate() - 1);\n    const reminder_content = `Bạn có lịch hẹn tái khám vào ngày ${nextVisitDoctorDate.getDate()}/${nextVisitDoctorDate.getMonth() + 1}/${remind_date.getFullYear()}`;\n\n    const reminder = await this.databaseService.Reminder.findFirst({\n      where: {\n        visit_record_id,\n      },\n    });\n\n    if (!reminder) {\n      return await this.createByNextVisitDoctorDate({ visit_record_id, user_id, next_visit_doctor_date });\n    }\n    return await this.databaseService.Reminder.update({\n      where: {\n        reminder_id: reminder.reminder_id,\n      },\n      data: {\n        title: 'Ngày tái khám',\n        content: reminder_content,\n        remind_date,\n      },\n    });\n  }\n\n  async update(updateReminderDto: ReminderUpdateRequest) {\n    return await this.databaseService.Reminder.update({\n      where: {\n        reminder_id: updateReminderDto.reminder_id,\n      },\n      data: {\n        title: updateReminderDto.title,\n        content: updateReminderDto.content,\n        remind_date: new Date(updateReminderDto.remind_date as string),\n      },\n    });\n  }\n\n  async remove(id: string) {\n    return await this.databaseService.Reminder.delete({\n      where: {\n        reminder_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleAuthGuard.html":{"url":"guards/RoleAuthGuard.html","title":"guard - RoleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, jwtUtilsService: JwtUtilsService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:97\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtUtilsService\n                                                  \n                                                        \n                                                                        JwtUtilsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/auth/auth.guard.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Reflector } from '@nestjs/core';\nimport { RefreshTokenRequest, UserRole } from '@pregnancy-journal-monorepo/contract';\nimport { RequestWithJWT } from 'express';\nimport { ROLES_KEY } from '../utils/decorators/role.decorator';\nimport { JwtUtilsService } from '../utils/jwt/jwtUtils.service';\n\n@Injectable()\nexport class AccessTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      throw new ForbiddenException('User access token authentication required');\n    }\n\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n// @Injectable()\n// export class EmailVerifyTokenAuthGuard implements CanActivate {\n//   constructor(\n//     private readonly jwtUtilsService: JwtUtilsService,\n//     private readonly configService: ConfigService,\n//   ) {}\n//\n//   canActivate(context: ExecutionContext): boolean {\n//     const request = context.switchToHttp().getRequest();\n//     const token = request.query.email_verify_token;\n//     if (!token) {\n//       throw new ForbiddenException('User authentication required');\n//     }\n//     try {\n//       const decoded_email_verify = this.jwtUtilsService.verifyToken({\n//         token: token,\n//         secret: this.configService.get('JWT_EMAIL_TOKEN_SECRET'),\n//       });\n//       request.decoded_email_verify = decoded_email_verify;\n//       return true;\n//     } catch (e) {\n//       throw new UnprocessableEntityException(e.message);\n//     }\n//   }\n// }\n\n@Injectable()\nexport class RefreshTokenAuthGuard implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = (request.body as RefreshTokenRequest).refresh_token;\n    if (!token) {\n      throw new ForbiddenException('User authentication required');\n    }\n\n    try {\n      const decoded_refresh_token = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET') || 'jwt_secret',\n      });\n      const decoded_authorization = request.decoded_authorization;\n      if (decoded_authorization) {\n        if (decoded_authorization.user_id !== decoded_refresh_token.user_id) {\n          throw new ForbiddenException('Invalid token');\n        }\n      }\n      request.decoded_refresh_token = decoded_refresh_token;\n      return true;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class RoleAuthGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(ROLES_KEY, [context.getHandler(), context.getClass()]);\n    if (!requiredRoles) {\n      return true;\n    }\n    try {\n      const request = context.switchToHttp().getRequest();\n      const token = request.headers.authorization?.split(' ')[1];\n      if (!token) {\n        throw new ForbiddenException('User authentication required');\n      }\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      if (!decoded_authorization) {\n        throw new ForbiddenException('User role authentication required');\n      }\n      const isAllowed = requiredRoles.includes(decoded_authorization.role);\n      if (!isAllowed) {\n        throw new ForbiddenException(\"You don't have permission to access\");\n      }\n      return isAllowed;\n    } catch (e) {\n      throw new ForbiddenException(e.message);\n    }\n  }\n}\n\n@Injectable()\nexport class IsLoggin implements CanActivate {\n  constructor(\n    private readonly jwtUtilsService: JwtUtilsService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest();\n    const token = request.headers.authorization?.split(' ')[1];\n    if (!token) {\n      return true;\n    }\n    try {\n      const decoded_authorization = this.jwtUtilsService.verifyToken({\n        token,\n        secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET') || 'jwt_secret',\n      });\n      request.decoded_authorization = decoded_authorization;\n      return true;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SocketIoAdapter.html":{"url":"classes/SocketIoAdapter.html","title":"class - SocketIoAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SocketIoAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/socket-io.adapter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        IoAdapter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createIOServer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(app: INestApplication)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/socket-io.adapter.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        app\n                                                  \n                                                        \n                                                                    INestApplication\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createIOServer\n                        \n                    \n                \n            \n            \n                \ncreateIOServer(port: number, options?: ServerOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/socket-io.adapter.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                port\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        ServerOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { INestApplication } from '@nestjs/common';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport { ServerOptions } from 'socket.io';\n\nexport class SocketIoAdapter extends IoAdapter {\n  constructor(app: INestApplication) {\n    super(app);\n  }\n\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server = super.createIOServer(port, {\n      ...options,\n      cors: {\n        origin: process.env.FE_URL || 'http://localhost:4200', // Frontend origin\n        methods: ['GET', 'POST'],\n        credentials: true,\n      },\n    });\n    return server;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Standard.html":{"url":"classes/Standard.html","title":"class - Standard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Standard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                lowerBound\n                            \n                            \n                                metricId\n                            \n                            \n                                upperBound\n                            \n                            \n                                week\n                            \n                            \n                                whoStandardValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lowerBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metricId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        upperBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        week\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whoStandardValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Standard {\n  id: string;\n  metricId: string;\n  week: number;\n  upperBound: number;\n  lowerBound: number;\n  whoStandardValue: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StandardController.html":{"url":"controllers/StandardController.html","title":"controller - StandardController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StandardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/standard/standard.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleGetByMetricId\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(createStandardDto: StandardCreateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(standardContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createStandardDto\n                                            \n                                                            StandardCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(standardId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(standardContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                standardId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetByMetricId\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetByMetricId(metricId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(standardContract.getAllStandardByMetricId)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                metricId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(updateStandard: StandardUpdateReq)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(standardContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateStandard\n                                            \n                                                            StandardUpdateReq\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param } from '@nestjs/common';\nimport { standardContract, StandardCreateRequest, StandardUpdateReq } from '@pregnancy-journal-monorepo/contract';\nimport { TsRestHandler, tsRestHandler } from '@ts-rest/nest';\nimport { StandardService } from './standard.service';\n\n@Controller()\nexport class StandardController {\n  constructor(private readonly standardService: StandardService) {}\n\n  @TsRestHandler(standardContract.create)\n  handleCreate(@Body() createStandardDto: StandardCreateRequest) {\n    return tsRestHandler(standardContract.create, async () => {\n      const standard = await this.standardService.create(createStandardDto);\n      return {\n        status: 201,\n        body: standard,\n      };\n    });\n  }\n\n  @TsRestHandler(standardContract.getAllStandardByMetricId)\n  handleGetByMetricId(@Param('metric_id') metricId: string) {\n    return tsRestHandler(standardContract.create, async () => {\n      const standard = await this.standardService.findStandardByMetricId(metricId);\n      return {\n        status: 200,\n        body: standard,\n      };\n    });\n  }\n\n  @TsRestHandler(standardContract.update)\n  handleUpdate(@Body() updateStandard: StandardUpdateReq) {\n    return tsRestHandler(standardContract.create, async () => {\n      const standard = await this.standardService.update(updateStandard);\n      return {\n        status: 201,\n        body: standard,\n      };\n    });\n  }\n\n  @TsRestHandler(standardContract.delete)\n  handleDelete(@Param('standard_id') standardId: string) {\n    return tsRestHandler(standardContract.create, async () => {\n      const standard = await this.standardService.remove(standardId);\n      return {\n        status: 201,\n        body: standard,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StandardModule.html":{"url":"modules/StandardModule.html","title":"module - StandardModule","body":"\n                   \n\n\n\n\n    Modules\n    StandardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StandardModule\n\n\n\ncluster_StandardModule_imports\n\n\n\ncluster_StandardModule_providers\n\n\n\n\nMetricModule\n\nMetricModule\n\n\n\nStandardModule\n\nStandardModule\n\nStandardModule -->\n\nMetricModule->StandardModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nStandardModule -->\n\nDatabaseService->StandardModule\n\n\n\n\n\nStandardService\n\nStandardService\n\nStandardModule -->\n\nStandardService->StandardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/standard/standard.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            StandardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StandardController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MetricModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { MetricModule } from '../metric/metric.module';\nimport { StandardController } from './standard.controller';\nimport { StandardService } from './standard.service';\n\n@Module({\n  imports: [MetricModule],\n  controllers: [StandardController],\n  providers: [StandardService, DatabaseService],\n})\nexport class StandardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StandardService.html":{"url":"injectables/StandardService.html","title":"injectable - StandardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StandardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/standard/standard.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                findStandardByMetricId\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService, metricService: MetricService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/standard/standard.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metricService\n                                                  \n                                                        \n                                                                        MetricService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createStandardDto: StandardCreateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createStandardDto\n                                            \n                                                            StandardCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findStandardByMetricId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findStandardByMetricId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.service.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(updateStandardDto: StandardUpdateReq)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/standard/standard.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateStandardDto\n                                            \n                                                            StandardUpdateReq\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Standard, StandardCreateRequest, StandardUpdateReq } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\nimport { MetricService } from '../metric/metric.service';\n\n@Injectable()\nexport class StandardService {\n  constructor(\n    private readonly databaseService: DatabaseService,\n    private readonly metricService: MetricService,\n  ) {}\n\n  async create(createStandardDto: StandardCreateRequest) {\n    const metric = await this.metricService.findOne(createStandardDto.metric_id);\n\n    if (!metric) {\n      throw new NotFoundException('Metric not found');\n    }\n\n    return this.databaseService.Standard.create({\n      data: {\n        week: createStandardDto.week,\n        upperbound: createStandardDto.upperbound,\n        lowerbound: createStandardDto.lowerbound,\n        who_standard_value: createStandardDto.who_standard_value,\n        metric: {\n          connect: {\n            metric_id: createStandardDto.metric_id,\n          },\n        },\n      },\n    });\n  }\n\n  findAll() {\n    return this.databaseService.Standard.findMany();\n  }\n\n  findOne(id: string) {\n    return this.databaseService.Standard.findUnique({\n      where: {\n        standard_id: id,\n      },\n    });\n  }\n\n  async findStandardByMetricId(id: string): Promise {\n    await this.metricService.findOne(id);\n\n    const result = await this.databaseService.Metric.findUnique({\n      include: {\n        standard: true,\n      },\n      where: {\n        metric_id: id,\n      },\n    });\n\n    if (!result) {\n      return [];\n    }\n\n    return result.standard;\n  }\n\n  update(updateStandardDto: StandardUpdateReq) {\n    const cur = this.findOne(updateStandardDto.standard_id);\n    if (!cur) {\n      throw new NotFoundException('Standard not found');\n    }\n\n    return this.databaseService.Standard.update({\n      where: {\n        standard_id: updateStandardDto.standard_id,\n      },\n      data: updateStandardDto,\n    });\n  }\n\n  remove(id: string) {\n    const cur = this.findOne(id);\n    if (!cur) {\n      throw new NotFoundException('Standard not found');\n    }\n    return this.databaseService.Standard.delete({\n      where: {\n        standard_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/tags/entities/tag.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Tag {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/tags/tag.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleCreate\n                            \n                            \n                                    \n                                handleDelete\n                            \n                            \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                handleGetOne\n                            \n                            \n                                    \n                                handleGetTagsByUser\n                            \n                            \n                                    \n                                handleUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(createTagDto: TagCreateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(tagContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            TagCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(tagContract.delete)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(tagContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(tagContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetTagsByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetTagsByUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(tagContract.getTagsByUser)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(updateTagDto: TagUpdateRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(tagContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTagDto\n                                            \n                                                            TagUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param } from '@nestjs/common';\nimport { tagContract, TagCreateRequest, TagUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { tsRestHandler, TsRestHandler } from '@ts-rest/nest';\nimport { TagService } from './tag.service';\n\n@Controller()\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @TsRestHandler(tagContract.create)\n  handleCreate(@Body() createTagDto: TagCreateRequest) {\n    return tsRestHandler(tagContract.create, async () => {\n      const result = await this.tagService.create(createTagDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(tagContract.getAll)\n  handleGetAll() {\n    return tsRestHandler(tagContract.getAll, async () => {\n      const result = await this.tagService.findAll();\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(tagContract.getOne)\n  handleGetOne(@Param('id') id: string) {\n    return tsRestHandler(tagContract.getOne, async () => {\n      const result = await this.tagService.findOne(id);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(tagContract.getTagsByUser)\n  handleGetTagsByUser(@Param('userId') userId: string) {\n    return tsRestHandler(tagContract.getTagsByUser, async () => {\n      const result = await this.tagService.findAllByUser(userId);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(tagContract.update)\n  handleUpdate(@Body() updateTagDto: TagUpdateRequest) {\n    return tsRestHandler(tagContract.update, async () => {\n      const result = await this.tagService.update(updateTagDto);\n      return { status: 200, body: result };\n    });\n  }\n\n  @TsRestHandler(tagContract.delete)\n  handleDelete(@Param('id') id: string) {\n    return tsRestHandler(tagContract.delete, async () => {\n      const result = await this.tagService.remove(id);\n      return { status: 200, body: result };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagModule\n\n\n\ncluster_TagModule_exports\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService \n\nTagService \n\n\n\nTagModule\n\nTagModule\n\nTagService  -->\n\nTagModule->TagService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nTagModule -->\n\nDatabaseService->TagModule\n\n\n\n\n\nTagService\n\nTagService\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/tags/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { TagController } from './tag.controller';\nimport { TagService } from './tag.service';\n\n@Module({\n  controllers: [TagController],\n  providers: [TagService, DatabaseService],\n  exports: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/tags/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(databaseService: DatabaseService)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/tags/tag.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        databaseService\n                                                  \n                                                        \n                                                                        DatabaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTagDto: TagCreateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            TagCreateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(updateTagDto: TagUpdateRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/tags/tag.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateTagDto\n                                            \n                                                            TagUpdateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { TagCreateRequest, TagResponse, TagUpdateRequest } from '@pregnancy-journal-monorepo/contract';\nimport { DatabaseService } from '../database/database.service';\n\n@Injectable()\nexport class TagService {\n  constructor(private readonly databaseService: DatabaseService) {}\n\n  create(createTagDto: TagCreateRequest): Promise {\n    return this.databaseService.Tag.create({\n      data: {\n        title: createTagDto.title,\n        status: createTagDto.status,\n      },\n    });\n  }\n\n  findAll() {\n    return this.databaseService.Tag.findMany();\n  }\n\n  async findAllByUser(userId: string): Promise {\n    const user = await this.databaseService.User.findUnique({\n      where: { user_id: userId },\n      include: {\n        visit_record: {\n          orderBy: {\n            visit_doctor_date: 'asc',\n          },\n          include: {\n            visit_record_metric: true,\n          },\n        },\n      },\n    });\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    const lastRecord = user.visit_record[user.visit_record.length - 1];\n\n    if (!lastRecord) {\n      return [];\n    }\n\n    const tags_id = lastRecord.visit_record_metric.map((metric) => metric.tag_id).filter((tag_id) => tag_id !== null);\n\n    const tags = await Promise.all(tags_id.map((tag_id) => this.databaseService.Tag.findUnique({ where: { tag_id } })));\n\n    return tags.filter((tag): tag is TagResponse => tag !== null);\n  }\n\n  async findOne(id: string) {\n    const result = await this.databaseService.Tag.findUnique({\n      where: {\n        tag_id: id,\n      },\n    });\n    if (!result) {\n      throw new NotFoundException('Tag not found');\n    }\n    return result;\n  }\n\n  update(updateTagDto: TagUpdateRequest) {\n    const cur = this.findOne(updateTagDto.tag_id);\n    if (!cur) {\n      throw new NotFoundException('Tag not found');\n    }\n    return this.databaseService.Tag.update({\n      where: {\n        tag_id: updateTagDto.tag_id,\n      },\n      data: updateTagDto,\n    });\n  }\n\n  remove(id: string) {\n    const cur = this.findOne(id);\n    if (!cur) {\n      throw new NotFoundException('Tag not found');\n    }\n    return this.databaseService.Tag.delete({\n      where: {\n        tag_id: id,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeUtilsService.html":{"url":"injectables/TimeUtilsService.html","title":"injectable - TimeUtilsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeUtilsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/utils/time/timeUtils.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                calculatePregnancyWeeks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        calculatePregnancyWeeks\n                        \n                    \n                \n            \n            \n                \ncalculatePregnancyWeeks(undefined: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/utils/time/timeUtils.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class TimeUtilsService {\n  calculatePregnancyWeeks({ expectedBirthDate, visitDate }: { expectedBirthDate: Date; visitDate: Date }) {\n    const timeDiff = expectedBirthDate.getTime() - visitDate.getTime();\n    const daysRemaining = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));\n\n    // Tính tuần thai\n    const pregnancyWeek = 40 - daysRemaining / 7;\n\n    return Number(pregnancyWeek.toFixed(0));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenDataType.html":{"url":"interfaces/TokenDataType.html","title":"interface - TokenDataType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenDataType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            created_at\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            refresh_token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updated_at\n                                        \n                                \n                                \n                                        \n                                            user_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        created_at:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refresh_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refresh_token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updated_at:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        interface TokenDataType {\n  id?: string;\n  user_id: string;\n  refresh_token: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport class TokenDto {\n  id?: string;\n  user: string;\n  refresh_token: string;\n  created_at: Date;\n  updated_at: Date;\n\n  constructor(tokenData: TokenDataType) {\n    this.user = tokenData.user_id;\n    this.refresh_token = tokenData.refresh_token;\n    this.created_at = tokenData.created_at || new Date(Date.now());\n    this.updated_at = tokenData.updated_at || new Date(Date.now());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                refresh_token\n                            \n                            \n                                updated_at\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tokenData: TokenDataType)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tokenData\n                                                  \n                                                        \n                                                                        TokenDataType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        interface TokenDataType {\n  id?: string;\n  user_id: string;\n  refresh_token: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport class TokenDto {\n  id?: string;\n  user: string;\n  refresh_token: string;\n  created_at: Date;\n  updated_at: Date;\n\n  constructor(tokenData: TokenDataType) {\n    this.user = tokenData.user_id;\n    this.refresh_token = tokenData.refresh_token;\n    this.created_at = tokenData.created_at || new Date(Date.now());\n    this.updated_at = tokenData.updated_at || new Date(Date.now());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateReactionDto.html":{"url":"classes/UpdateReactionDto.html","title":"class - UpdateReactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateReactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/reaction/dto/update-reaction.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateReactionDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReactionDto } from './create-reaction.dto';\n\nexport class UpdateReactionDto extends PartialType(CreateReactionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateStandardDto.html":{"url":"classes/UpdateStandardDto.html","title":"class - UpdateStandardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateStandardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/standard/dto/update-standard.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateStandardDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/standard/dto/update-standard.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateStandardDto } from './create-standard.dto';\n\nexport class UpdateStandardDto extends PartialType(CreateStandardDto) {\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/users/models/user.entity.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            created_at\n                                        \n                                \n                                \n                                        \n                                            district\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            expectedBirthDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastOvulationDate\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            province\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updated_at\n                                        \n                                \n                                \n                                        \n                                            ward\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        created_at:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        district\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        district:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expectedBirthDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expectedBirthDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastOvulationDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastOvulationDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        province\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        province:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         UserRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserRole\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         UserStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updated_at:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ward\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ward:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserRole, UserStatus } from '@pregnancy-journal-monorepo/contract';\n\ninterface User {\n  id?: string;\n  name: string;\n  email: string;\n  password: string;\n  lastOvulationDate?: Date;\n  expectedBirthDate: Date;\n  phone: string;\n  province: string;\n  district: string;\n  ward: string;\n  address: string;\n  role?: UserRole;\n  status?: UserStatus;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport class UserEntity {\n  id?: string;\n  name: string;\n  email: string;\n  password: string;\n  last_ovulation_date?: Date;\n  expected_birth_date: Date;\n  phone: string;\n  province: string;\n  district: string;\n  ward: string;\n  address: string;\n  role: UserRole;\n  status: UserStatus;\n  created_at: Date;\n  updated_at: Date;\n\n  constructor(userData: User) {\n    this.id = userData.id;\n    this.name = userData.name;\n    this.phone = userData.phone;\n    this.password = userData.password;\n    this.email = userData.email;\n    this.last_ovulation_date = userData.lastOvulationDate;\n    this.expected_birth_date = userData.expectedBirthDate;\n    this.province = userData.province;\n    this.district = userData.district;\n    this.ward = userData.ward;\n    this.address = userData.address;\n    this.created_at = userData.created_at || new Date(Date.now());\n    this.updated_at = userData.updated_at || new Date(Date.now());\n    this.role = userData.role || UserRole.MEMBER;\n    this.status = userData.status || UserStatus.ACTIVE;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/users/models/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                created_at\n                            \n                            \n                                district\n                            \n                            \n                                email\n                            \n                            \n                                expected_birth_date\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                last_ovulation_date\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                province\n                            \n                            \n                                role\n                            \n                            \n                                status\n                            \n                            \n                                updated_at\n                            \n                            \n                                ward\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userData: User)\n                    \n                \n                        \n                            \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userData\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        district\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expected_birth_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        last_ovulation_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        province\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ward\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/users/models/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UserRole, UserStatus } from '@pregnancy-journal-monorepo/contract';\n\ninterface User {\n  id?: string;\n  name: string;\n  email: string;\n  password: string;\n  lastOvulationDate?: Date;\n  expectedBirthDate: Date;\n  phone: string;\n  province: string;\n  district: string;\n  ward: string;\n  address: string;\n  role?: UserRole;\n  status?: UserStatus;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport class UserEntity {\n  id?: string;\n  name: string;\n  email: string;\n  password: string;\n  last_ovulation_date?: Date;\n  expected_birth_date: Date;\n  phone: string;\n  province: string;\n  district: string;\n  ward: string;\n  address: string;\n  role: UserRole;\n  status: UserStatus;\n  created_at: Date;\n  updated_at: Date;\n\n  constructor(userData: User) {\n    this.id = userData.id;\n    this.name = userData.name;\n    this.phone = userData.phone;\n    this.password = userData.password;\n    this.email = userData.email;\n    this.last_ovulation_date = userData.lastOvulationDate;\n    this.expected_birth_date = userData.expectedBirthDate;\n    this.province = userData.province;\n    this.district = userData.district;\n    this.ward = userData.ward;\n    this.address = userData.address;\n    this.created_at = userData.created_at || new Date(Date.now());\n    this.updated_at = userData.updated_at || new Date(Date.now());\n    this.role = userData.role || UserRole.MEMBER;\n    this.status = userData.status || UserStatus.ACTIVE;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                handleChangePassword\n                            \n                            \n                                    \n                                    Async\n                                handleCreate\n                            \n                            \n                                    \n                                    Async\n                                handleForgotPassword\n                            \n                            \n                                    \n                                handleGetAll\n                            \n                            \n                                    \n                                    Async\n                                handleGetOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleGetProfile\n                            \n                            \n                                    \n                                    Async\n                                handleLogin\n                            \n                            \n                                    \n                                    Async\n                                handleRegister\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleSignInWithToken\n                            \n                            \n                                    \n                                    Async\n                                handleUpdate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleUpdateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleChangePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleChangePassword(body: ChangePasswordRequest, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(authContract.changePassword)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        ChangePasswordRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCreate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCreate(body: UserCreateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(userContract.create)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UserCreateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleForgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleForgotPassword(body: ForgotPasswordRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(authContract.forgotPassword)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        ForgotPasswordRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleGetAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(userContract.getAll)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:141\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(userContract.getOne)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleGetProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetProfile(req: RequestWithJWT, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(userContract.getProfile)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLogin(body: LoginRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(authContract.login)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        LoginRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleRegister\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRegister(body: RegisterRequest)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(authContract.register)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        RegisterRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleSignInWithToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSignInWithToken(req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(authContract.signInWithToken)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdate(body: UserUpdateRequestType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @TsRestHandler(userContract.update)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UserUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleUpdateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUpdateProfile(body: UserUpdateRequestType, req: RequestWithJWT)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AccessTokenAuthGuard)@TsRestHandler(userContract.updateProfile)\n                \n            \n\n                    \n                        \n                            Defined in apps/be-nestjs-app/src/app/users/users.controller.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            UserUpdateRequestType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        RequestWithJWT\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, ConflictException, Controller, NotFoundException, Param, Req, UseGuards } from '@nestjs/common';\nimport {\n  authContract,\n  ChangePasswordRequest,\n  ForgotPasswordRequest,\n  LoginRequest,\n  RegisterRequest,\n  userContract,\n  UserCreateRequestType,\n  UserUpdateRequestType,\n} from '@pregnancy-journal-monorepo/contract';\nimport { TsRestHandler, tsRestHandler } from '@ts-rest/nest';\nimport { RequestWithJWT } from 'express';\nimport { AccessTokenAuthGuard } from '../auth/auth.guard';\nimport { UsersService } from './users.service';\n\n@Controller()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  //sử dung them middleware\n  @TsRestHandler(authContract.login)\n  async handleLogin(@Body() body: LoginRequest) {\n    return tsRestHandler(authContract.login, async () => {\n      const user = await this.usersService.login(body);\n      if (!user) {\n        throw new NotFoundException('Phone number or password is incorrect');\n      }\n      return { status: 200, body: user };\n    });\n  }\n\n  @TsRestHandler(authContract.register)\n  async handleRegister(@Body() body: RegisterRequest) {\n    return tsRestHandler(authContract.register, async () => {\n      const email = await this.usersService.checkEmail(body.email);\n      if (!email) {\n        const users = await this.usersService.register(body);\n        return { status: 201, body: users };\n      } else {\n        return {\n          status: 401,\n          body: { message: 'Email is already registered' },\n        };\n      }\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(authContract.signInWithToken)\n  async handleSignInWithToken(@Req() req: RequestWithJWT) {\n    return tsRestHandler(authContract.signInWithToken, async () => {\n      const user_id = req.decoded_authorization?.user_id;\n\n      if (!user_id) {\n        throw new NotFoundException('Token is invalid');\n      }\n\n      const user = await this.usersService.signInWithToken(user_id);\n      if (!user) {\n        throw new NotFoundException('Token is invalid');\n      }\n      return { status: 201, body: user };\n    });\n  }\n\n  // @TsRestHandler(authContract.changePassword)\n  // async handleChangePassword(@Body() body: any) {\n  //   return tsRestHandler(authContract.changePassword, async () => {\n  //     const user = await this.usersService.changePassword(body);\n  //     if (!user) {\n  //       throw new NotFoundException('Token is invalid');\n  //     }\n  //     return { status: 201, body: user };\n  //   });\n  // }\n\n  // @UseGuards(AccessTokenAuthGuard, RefreshTokenAuthGuard)\n  // @TsRestHandler(authContract.logout)\n  // async handleLogout(@Body() body: TokenRequest, @Req() req: RequestWithJWT) {\n  //   return tsRestHandler(authContract.logout, async () => {\n  //     const user_id = req.decoded_authorization;\n  //     const { refresh_token } = body;\n  //\n  //     if (!user_id) {\n  //       throw new UnauthorizedException('Unauthorized');\n  //     }\n  //\n  //     // const refresh_token_id = await this.usersService.checkRefreshToken({\n  //     //   user_id,\n  //     //   refresh_token,\n  //     // });\n  //     // if (!refresh_token_id) {\n  //     //   throw new UnauthorizedException('Unauthorized Refresh Token');\n  //     // }\n  //     await this.usersService.logout(user_id);\n  //     return {\n  //       status: 200,\n  //       body: { message: 'Logout successfully' },\n  //     };\n  //   });\n  // }\n\n  // @UseGuards(RefreshTokenAuthGuard)\n  // @TsRestHandler(authContract.refreshToken)\n  // async handleRefreshToken(@Body() body: TokenRequest, @Req() req: RequestWithJWT) {\n  //   return tsRestHandler(authContract.refreshToken, async () => {\n  //     const { user_id } = req.decoded_refresh_token;\n  //     const { refresh_token } = body;\n  //     const refresh_token_id = await this.usersService.checkRefreshToken({\n  //       user_id,\n  //       refresh_token,\n  //     });\n  //     if (!refresh_token_id) {\n  //       throw new UnauthorizedException('Unauthorized Refresh Token');\n  //     }\n  //     const users = await this.usersService.refreshToken({\n  //       refresh_token_id,\n  //       user_id,\n  //     });\n  //     return { status: 200, body: users };\n  //   });\n  // }\n\n  @TsRestHandler(userContract.create)\n  async handleCreate(@Body() body: UserCreateRequestType) {\n    //check if email already exists\n    const user = await this.usersService.checkEmail(body.email);\n    if (user) {\n      throw new ConflictException('Email already exists');\n    }\n    return tsRestHandler(userContract.create, async () => {\n      const users = await this.usersService.create(body);\n      return { status: 200, body: users };\n    });\n  }\n\n  // @Roles(UserRole.ADMIN)\n  // @UseGuards(RoleAuthGuard, AccessTokenAuthGuard)\n  @TsRestHandler(userContract.getAll)\n  handleGetAll() {\n    return tsRestHandler(userContract.getAll, async () => {\n      const users = await this.usersService.users();\n      return { status: 200, body: users };\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(userContract.getProfile)\n  async handleGetProfile(@Req() req: RequestWithJWT, @Param('id') id: string) {\n    return tsRestHandler(userContract.getProfile, async () => {\n      const user_id = req.decoded_authorization?.user_id;\n      if (!user_id) {\n        throw new NotFoundException('User ko  not found');\n      }\n      const users = await this.usersService.getUserProfile(user_id);\n      return { status: 200, body: users };\n    });\n  }\n\n  @TsRestHandler(userContract.getOne)\n  async handleGetOne(@Param('id') id: string) {\n    return tsRestHandler(userContract.getOne, async () => {\n      const users = await this.usersService.getUserById(id);\n      return { status: 200, body: users };\n    });\n  }\n\n  @TsRestHandler(userContract.update)\n  async handleUpdate(@Body() body: UserUpdateRequestType) {\n    return tsRestHandler(userContract.update, async () => {\n      if (!body.user_id) {\n        throw new NotFoundException('User not found');\n      }\n      const users = await this.usersService.updateUser(body);\n      return { status: 200, body: users };\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(userContract.updateProfile)\n  async handleUpdateProfile(@Body() body: UserUpdateRequestType, @Req() req: RequestWithJWT) {\n    return tsRestHandler(userContract.updateProfile, async () => {\n      const user_id = req.decoded_authorization?.user_id;\n      if (!user_id) {\n        throw new NotFoundException('User not found');\n      }\n      const users = await this.usersService.updateProfile(body, user_id);\n      return { status: 200, body: users };\n    });\n  }\n\n  @UseGuards(AccessTokenAuthGuard)\n  @TsRestHandler(authContract.changePassword)\n  async handleChangePassword(@Body() body: ChangePasswordRequest, @Req() req: RequestWithJWT) {\n    return tsRestHandler(authContract.changePassword, async () => {\n      const user_id = req.decoded_authorization?.user_id;\n      if (!user_id) {\n        throw new NotFoundException('User not found');\n      }\n\n      const user = await this.usersService.changePassword(body, user_id);\n      if (!user) {\n        throw new NotFoundException('Token is invalid');\n      }\n      return { status: 201, body: user };\n    });\n  }\n\n  @TsRestHandler(authContract.forgotPassword)\n  async handleForgotPassword(@Body() body: ForgotPasswordRequest) {\n    return tsRestHandler(authContract.forgotPassword, async () => {\n      const result = await this.usersService.forgotPassword(body.email);\n      if (!result) {\n        throw new NotFoundException('Email is invalid');\n      }\n      return {\n        status: 201,\n        body: {\n          message: result,\n        },\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nJwtUtilsModule->UsersModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nUsersModule -->\n\nMailModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nUsersModule -->\n\nDatabaseService->UsersModule\n\n\n\n\n\nMailService\n\nMailService\n\nUsersModule -->\n\nMailService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DatabaseService\n                        \n                        \n                            MailService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            JwtUtilsModule\n                        \n                        \n                            MailModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DatabaseService } from '../database/database.service';\nimport { MailModule } from '../mail/mail.module';\nimport { MailService } from '../mail/mail.service';\nimport { JwtUtilsModule } from '../utils/jwt/jwtUtils.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [JwtUtilsModule, MailModule],\n  controllers: [UsersController],\n  providers: [UsersService, DatabaseService, MailService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VisitRecord.html":{"url":"classes/VisitRecord.html","title":"class - VisitRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VisitRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                doctor_name\n                            \n                            \n                                hospital_id\n                            \n                            \n                                next_visit_doctor_date\n                            \n                            \n                                user_id\n                            \n                            \n                                visit_doctor_date\n                            \n                            \n                                visit_record_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doctor_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hospital_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next_visit_doctor_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_doctor_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_record_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class VisitRecord {\n  visit_record_id: string;\n  next_visit_doctor_date: Date | null;\n  visit_doctor_date: Date;\n  doctor_name: string;\n  hospital_id: string;\n  created_at: Date;\n  user_id: string;\n}\n\nexport class VisitRecordMetric {\n  visit_record_id: string;\n  created_at: Date;\n  value: number;\n  metric_id: string;\n  updated_at: Date;\n  visit_record_metric_id: string;\n  tag_id: string | null;\n}\n\nexport class Media {\n  visit_record_id: string | null;\n  created_at: Date;\n  media_id: string;\n  media_url: string;\n  post_id: string | null;\n}\n\nexport class Hospital {\n  hospital_id: string;\n  name: string;\n  city: string;\n}\n\nexport class VisitRecordIncludeOtherTables extends VisitRecord {\n  media: Media[];\n  hospital: Hospital;\n  visit_record_metric: VisitRecordMetric[];\n  week?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VisitRecordIncludeOtherTables.html":{"url":"classes/VisitRecordIncludeOtherTables.html","title":"class - VisitRecordIncludeOtherTables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VisitRecordIncludeOtherTables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            VisitRecord\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                hospital\n                            \n                            \n                                media\n                            \n                            \n                                visit_record_metric\n                            \n                            \n                                    Optional\n                                week\n                            \n                            \n                                created_at\n                            \n                            \n                                doctor_name\n                            \n                            \n                                hospital_id\n                            \n                            \n                                next_visit_doctor_date\n                            \n                            \n                                user_id\n                            \n                            \n                                visit_doctor_date\n                            \n                            \n                                visit_record_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        hospital\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Hospital\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Media[]\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_record_metric\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VisitRecordMetric[]\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        week\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                        \n                            \n                                Inherited from         VisitRecord\n\n                            \n                        \n                    \n                        \n                                Defined in         VisitRecord:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doctor_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         VisitRecord\n\n                            \n                        \n                    \n                        \n                                Defined in         VisitRecord:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hospital_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         VisitRecord\n\n                            \n                        \n                    \n                        \n                                Defined in         VisitRecord:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next_visit_doctor_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                        \n                            \n                                Inherited from         VisitRecord\n\n                            \n                        \n                    \n                        \n                                Defined in         VisitRecord:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         VisitRecord\n\n                            \n                        \n                    \n                        \n                                Defined in         VisitRecord:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_doctor_date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                        \n                            \n                                Inherited from         VisitRecord\n\n                            \n                        \n                    \n                        \n                                Defined in         VisitRecord:4\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_record_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         VisitRecord\n\n                            \n                        \n                    \n                        \n                                Defined in         VisitRecord:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class VisitRecord {\n  visit_record_id: string;\n  next_visit_doctor_date: Date | null;\n  visit_doctor_date: Date;\n  doctor_name: string;\n  hospital_id: string;\n  created_at: Date;\n  user_id: string;\n}\n\nexport class VisitRecordMetric {\n  visit_record_id: string;\n  created_at: Date;\n  value: number;\n  metric_id: string;\n  updated_at: Date;\n  visit_record_metric_id: string;\n  tag_id: string | null;\n}\n\nexport class Media {\n  visit_record_id: string | null;\n  created_at: Date;\n  media_id: string;\n  media_url: string;\n  post_id: string | null;\n}\n\nexport class Hospital {\n  hospital_id: string;\n  name: string;\n  city: string;\n}\n\nexport class VisitRecordIncludeOtherTables extends VisitRecord {\n  media: Media[];\n  hospital: Hospital;\n  visit_record_metric: VisitRecordMetric[];\n  week?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VisitRecordMetric.html":{"url":"classes/VisitRecordMetric.html","title":"class - VisitRecordMetric","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VisitRecordMetric\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                metric_id\n                            \n                            \n                                tag_id\n                            \n                            \n                                updated_at\n                            \n                            \n                                value\n                            \n                            \n                                visit_record_id\n                            \n                            \n                                visit_record_metric_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metric_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tag_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_record_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        visit_record_metric_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in apps/be-nestjs-app/src/app/records/entities/record.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class VisitRecord {\n  visit_record_id: string;\n  next_visit_doctor_date: Date | null;\n  visit_doctor_date: Date;\n  doctor_name: string;\n  hospital_id: string;\n  created_at: Date;\n  user_id: string;\n}\n\nexport class VisitRecordMetric {\n  visit_record_id: string;\n  created_at: Date;\n  value: number;\n  metric_id: string;\n  updated_at: Date;\n  visit_record_metric_id: string;\n  tag_id: string | null;\n}\n\nexport class Media {\n  visit_record_id: string | null;\n  created_at: Date;\n  media_id: string;\n  media_url: string;\n  post_id: string | null;\n}\n\nexport class Hospital {\n  hospital_id: string;\n  name: string;\n  city: string;\n}\n\nexport class VisitRecordIncludeOtherTables extends VisitRecord {\n  media: Media[];\n  hospital: Hospital;\n  visit_record_metric: VisitRecordMetric[];\n  week?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/be-nestjs-app/src/app/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n            guard\n            AccessTokenAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n            guard\n            IsLoggin\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n            guard\n            RefreshTokenAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/auth/auth.guard.ts\n            \n            guard\n            RoleAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/blogs/blogs.controller.ts\n            \n            controller\n            BlogsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/blogs/blogs.service.ts\n            \n            injectable\n            BlogsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/blogs/entities/blog.entity.ts\n            \n            class\n            Blog\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/categorys/categorys.controller.ts\n            \n            controller\n            CategorysController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/categorys/categorys.service.ts\n            \n            injectable\n            CategorysService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/categorys/entities/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/comments/comments.service.ts\n            \n            injectable\n            CommentsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/database/database.service.ts\n            \n            injectable\n            DatabaseService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/file/file.service.ts\n            \n            injectable\n            FileService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/app/file/file.service.ts\n            \n            function\n            streamToBuffer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/app/file/file.service.ts\n            \n            variable\n            blobToFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/hosiptal/entities/hosiptal.entity.ts\n            \n            class\n            HospitalEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/hosiptal/entities/hosiptal.entity.ts\n            \n            interface\n            Hospital\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/hosiptal/hospital.controller.ts\n            \n            controller\n            HospitalController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/hosiptal/hospital.service.ts\n            \n            injectable\n            HospitalService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/mail/mail.controller.ts\n            \n            controller\n            MailController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/media/entities/media.entity.ts\n            \n            class\n            Media\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/media/media.controller.ts\n            \n            controller\n            MediaController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/media/media.service.ts\n            \n            injectable\n            MediaService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/memberships/memberships.controller.ts\n            \n            controller\n            MembershipsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/memberships/memberships.service.ts\n            \n            injectable\n            MembershipsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts\n            \n            class\n            Metric\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/metric/entities/metric.entity.ts\n            \n            interface\n            MetricDTO\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/metric/metric.controller.ts\n            \n            controller\n            MetricController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/metric/metric.service.ts\n            \n            injectable\n            MetricService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/note/note.controller.ts\n            \n            controller\n            NoteController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/note/note.service.ts\n            \n            injectable\n            NoteService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/payment/payment.controller.ts\n            \n            controller\n            PaymentController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/payment/payment.service.ts\n            \n            injectable\n            PaymentService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/payos/payos.controller.ts\n            \n            controller\n            PayosController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/payos/payos.service.ts\n            \n            injectable\n            PayosService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reaction/dto/create-reaction.dto.ts\n            \n            class\n            CreateReactionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reaction/dto/update-reaction.dto.ts\n            \n            class\n            UpdateReactionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reaction/entities/reaction.entity.ts\n            \n            class\n            Reaction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reaction/reaction.controller.ts\n            \n            controller\n            ReactionController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reaction/reaction.service.ts\n            \n            injectable\n            ReactionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n            \n            class\n            Hospital\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n            \n            class\n            Media\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n            \n            class\n            VisitRecord\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n            \n            class\n            VisitRecordIncludeOtherTables\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/records/entities/record.entity.ts\n            \n            class\n            VisitRecordMetric\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/records/records.controller.ts\n            \n            controller\n            RecordsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/records/records.service.ts\n            \n            injectable\n            RecordsService\n            \n                72 %\n                (8/11)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts\n            \n            class\n            ReminderEntity\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reminder/entities/reminder.entity.ts\n            \n            interface\n            Reminder\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reminder/reminder.controller.ts\n            \n            controller\n            ReminderController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/reminder/reminder.service.ts\n            \n            injectable\n            ReminderService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/standard/dto/create-standard.dto.ts\n            \n            class\n            CreateStandardDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/standard/dto/update-standard.dto.ts\n            \n            class\n            UpdateStandardDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/standard/entities/standard.entity.ts\n            \n            class\n            Standard\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/standard/standard.controller.ts\n            \n            controller\n            StandardController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/standard/standard.service.ts\n            \n            injectable\n            StandardService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/tags/entities/tag.entity.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/tags/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/tags/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/users/models/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/users/models/user.entity.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/app/utils/const/REG.ts\n            \n            variable\n            UUID_REG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/utils/decorators/match.decorator.ts\n            \n            class\n            MatchConstraint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/app/utils/decorators/match.decorator.ts\n            \n            function\n            Match\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/app/utils/decorators/optional.decorator.ts\n            \n            function\n            IsOptionalNonNullable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/app/utils/decorators/role.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/app/utils/decorators/role.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts\n            \n            class\n            TokenDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/utils/jwt/jwt.dto.ts\n            \n            interface\n            TokenDataType\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/utils/jwt/jwt.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/utils/jwt/jwtUtils.service.ts\n            \n            injectable\n            JwtUtilsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/app/utils/time/timeUtils.service.ts\n            \n            injectable\n            TimeUtilsService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        apps/be-nestjs-app/src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                apps/be-nestjs-app/src/socket-io.adapter.ts\n            \n            class\n            SocketIoAdapter\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^19.2.0\n        \n            @angular/cdk : ^19.0.4\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/material : ^19.0.4\n        \n            @angular/material-luxon-adapter : ^19.0.4\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            @aws-sdk/client-s3 : ^3.741.0\n        \n            @aws-sdk/lib-storage : ^3.741.0\n        \n            @aws-sdk/s3-request-presigner : ^3.741.0\n        \n            @formkit/auto-animate : ^0.8.2\n        \n            @fullcalendar/angular : ^6.1.16\n        \n            @fullcalendar/core : ^6.1.15\n        \n            @fullcalendar/daygrid : ^6.1.15\n        \n            @fullcalendar/interaction : ^6.1.15\n        \n            @jsverse/transloco : ^7.5.1\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.2\n        \n            @nestjs/config : ^4.0.0\n        \n            @nestjs/core : ^10.0.2\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^10.0.2\n        \n            @nestjs/platform-socket.io : ^10.4.15\n        \n            @nestjs/swagger : ^8.1.0\n        \n            @nestjs/websockets : ^10.4.15\n        \n            @payos/node : ^1.0.10\n        \n            @primeng/themes : ^19.0.9\n        \n            @prisma/client : ^6.1.0\n        \n            @splidejs/splide : ^4.1.4\n        \n            @ts-rest/core : ^3.51.0\n        \n            @ts-rest/nest : ^3.51.0\n        \n            @ts-rest/open-api : ^3.51.0\n        \n            @types/express : 4.17.21\n        \n            angular-oauth2-oidc : ^19.0.0\n        \n            apexcharts : ^4.4.0\n        \n            api-contract : ^1.0.0\n        \n            axios : ^1.6.0\n        \n            chart.js : ^4.4.8\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cors : ^2.8.5\n        \n            crypto-js : ^4.2.0\n        \n            express : ^4.21.2\n        \n            handlebars : ^4.7.8\n        \n            highlight.js : ^11.11.1\n        \n            jsonc-eslint-parser : ^2.4.0\n        \n            less : ^4.2.0\n        \n            lodash-es : ^4.17.21\n        \n            luxon : ^3.5.0\n        \n            multer : ^1.4.5-lts.1\n        \n            ng-apexcharts : ^1.15.0\n        \n            ng-auto-animate : ^0.4.1\n        \n            ngx-image-compress : ^18.1.5\n        \n            ngx-infinite-scroll : ^19.0.0\n        \n            ngx-quill : ^27.0.0\n        \n            ngx-splide : ^7.0.1\n        \n            nodemailer : ^6.10.0\n        \n            perfect-scrollbar : ^1.5.6\n        \n            primeicons : ^7.0.0\n        \n            primeng : ^19.0.9\n        \n            quill : ^2.0.3\n        \n            quill-image-compress : ^2.0.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~7.8.1\n        \n            socket.io : ^4.8.1\n        \n            tailwindcss-primeui : ^0.5.0\n        \n            tslib : ^2.8.1\n        \n            uuid : ^11.1.0\n        \n            zod : ^3.24.1\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                        \n                            IsOptionalNonNullable   (apps/.../optional.decorator.ts)\n                        \n                        \n                            Match   (apps/.../match.decorator.ts)\n                        \n                        \n                            streamToBuffer   (apps/.../file.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/be-nestjs-app/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    apps/be-nestjs-app/src/app/utils/decorators/optional.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsOptionalNonNullable\n                        \n                    \n                \n            \n            \n                \nIsOptionalNonNullable(data?)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    apps/be-nestjs-app/src/app/utils/decorators/match.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Match\n                        \n                    \n                \n            \n            \n                \nMatch(property: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                property\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    apps/be-nestjs-app/src/app/file/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        streamToBuffer\n                        \n                    \n                \n            \n            \n                \nstreamToBuffer(stream: IncomingMessage)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                stream\n                                            \n                                                        IncomingMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nPregnancyJournal\n\n✨ Your new, shiny Nx workspace is almost ready ✨.\nLearn more about this workspace setup and its capabilities or run npx nx graph to visually explore what was created. Now, let's get you up to speed!\nFinish your CI setup\nClick here to finish setting up your workspace!\nRun tasks\nTo run the dev server for your app, use:\nExample :npx nx serve fe-angular-appTo create a production bundle:\nExample :npx nx build fe-angular-appTo see all available targets to run for a project, run:\nExample :npx nx show project fe-angular-appThese targets are either inferred automatically or defined in the project.json or package.json files.\nMore about running tasks in the docs »\nAdd new projects\nWhile you could add new projects to your workspace manually, you might want to leverage Nx plugins and their code generation feature.\nUse the plugin's generator to create new projects.\nTo generate a new application, use:\nExample :npx nx g @nx/angular:app demoTo generate a new library, use:\nExample :npx nx g @nx/angular:lib mylibYou can use npx nx list to get a list of installed plugins. Then, run npx nx list  to learn about more specific capabilities of a particular plugin. Alternatively, install Nx Console to browse plugins and generators in your IDE.\nLearn more about Nx plugins » | Browse the plugin registry »\nLearn more about Nx on CI\nInstall Nx Console\nNx Console is an editor extension that enriches your developer experience. It lets you run tasks, generate code, and improves code autocompletion in your IDE. It is available for VSCode and IntelliJ.\nInstall Nx Console »\nUseful links\nLearn more:\n\nLearn more about this workspace setup\nLearn about Nx on CI\nReleasing Packages with Nx release\nWhat are Nx plugins?\n\nAnd join the Nx community:\n\nDiscord\nFollow us on X or LinkedIn\nOur Youtube channel\nOur blog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategorysModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HospitalModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        JwtUtilsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MediaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MembershipsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NoteModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaymentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PayosModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReactionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecordsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReminderModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StandardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_BlogsModule\n\n\n\ncluster_BlogsModule_providers\n\n\n\ncluster_CategorysModule\n\n\n\ncluster_CategorysModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_FileModule\n\n\n\ncluster_FileModule_providers\n\n\n\ncluster_HospitalModule\n\n\n\ncluster_HospitalModule_providers\n\n\n\ncluster_JwtUtilsModule\n\n\n\ncluster_JwtUtilsModule_exports\n\n\n\ncluster_JwtUtilsModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_exports\n\n\n\ncluster_MediaModule_providers\n\n\n\ncluster_MembershipsModule\n\n\n\ncluster_MembershipsModule_exports\n\n\n\ncluster_MembershipsModule_providers\n\n\n\ncluster_MetricModule\n\n\n\ncluster_MetricModule_exports\n\n\n\ncluster_MetricModule_providers\n\n\n\ncluster_NoteModule\n\n\n\ncluster_NoteModule_providers\n\n\n\ncluster_PaymentModule\n\n\n\ncluster_PaymentModule_providers\n\n\n\ncluster_PayosModule\n\n\n\ncluster_PayosModule_exports\n\n\n\ncluster_PayosModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_exports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_ReactionModule\n\n\n\ncluster_ReactionModule_providers\n\n\n\ncluster_RecordsModule\n\n\n\ncluster_RecordsModule_providers\n\n\n\ncluster_ReminderModule\n\n\n\ncluster_ReminderModule_exports\n\n\n\ncluster_ReminderModule_providers\n\n\n\ncluster_TagModule\n\n\n\ncluster_TagModule_exports\n\n\n\ncluster_TagModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nUsersModule->CommentsModule\n\n\n\n\n\nPaymentModule\n\nPaymentModule\n\nPaymentModule -->\n\nUsersModule->PaymentModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nRecordsModule\n\nRecordsModule\n\nRecordsModule -->\n\nUsersModule->RecordsModule\n\n\n\n\n\nReminderModule\n\nReminderModule\n\nReminderModule -->\n\nUsersModule->ReminderModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nDatabaseService\n\nDatabaseService\n\nUsersModule -->\n\nDatabaseService->UsersModule\n\n\n\nAdminModule -->\n\nDatabaseService->AdminModule\n\n\n\n\n\nBlogsModule\n\nBlogsModule\n\nBlogsModule -->\n\nDatabaseService->BlogsModule\n\n\n\n\n\nCategorysModule\n\nCategorysModule\n\nCategorysModule -->\n\nDatabaseService->CategorysModule\n\n\n\nCommentsModule -->\n\nDatabaseService->CommentsModule\n\n\n\n\n\nHospitalModule\n\nHospitalModule\n\nHospitalModule -->\n\nDatabaseService->HospitalModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nMediaModule -->\n\nDatabaseService->MediaModule\n\n\n\n\n\nMembershipsModule\n\nMembershipsModule\n\nMembershipsModule -->\n\nDatabaseService->MembershipsModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nMetricModule -->\n\nDatabaseService->MetricModule\n\n\n\n\n\nNoteModule\n\nNoteModule\n\nNoteModule -->\n\nDatabaseService->NoteModule\n\n\n\nPaymentModule -->\n\nDatabaseService->PaymentModule\n\n\n\nPostsModule -->\n\nDatabaseService->PostsModule\n\n\n\nRecordsModule -->\n\nDatabaseService->RecordsModule\n\n\n\nReminderModule -->\n\nDatabaseService->ReminderModule\n\n\n\n\n\nStandardModule\n\nStandardModule\n\nStandardModule -->\n\nDatabaseService->StandardModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nDatabaseService->TagModule\n\n\n\nAppModule -->\n\nBlogsModule->AppModule\n\n\n\nAppModule -->\n\nCategorysModule->AppModule\n\n\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nFileModule\n\nFileModule\n\nAppModule -->\n\nFileModule->AppModule\n\n\n\nAppModule -->\n\nHospitalModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nUsersModule -->\n\nMailModule->UsersModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\nRecordsModule -->\n\nMediaModule->RecordsModule\n\n\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nFileService \n\nFileService \n\nFileService  -->\n\nMediaModule->FileService \n\n\n\n\n\nMediaService \n\nMediaService \n\nMediaService  -->\n\nMediaModule->MediaService \n\n\n\nPaymentModule -->\n\nMembershipsModule->PaymentModule\n\n\n\nAppModule -->\n\nMembershipsModule->AppModule\n\n\n\n\n\nMembershipsService \n\nMembershipsService \n\nMembershipsService  -->\n\nMembershipsModule->MembershipsService \n\n\n\nRecordsModule -->\n\nMetricModule->RecordsModule\n\n\n\nStandardModule -->\n\nMetricModule->StandardModule\n\n\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nMetricService \n\nMetricService \n\nMetricService  -->\n\nMetricModule->MetricService \n\n\n\nAppModule -->\n\nNoteModule->AppModule\n\n\n\nAppModule -->\n\nPaymentModule->AppModule\n\n\n\n\n\nPayosModule\n\nPayosModule\n\nPaymentModule -->\n\nPayosModule->PaymentModule\n\n\n\nAppModule -->\n\nPayosModule->AppModule\n\n\n\n\n\nPayosService \n\nPayosService \n\nPayosService  -->\n\nPayosModule->PayosService \n\n\n\nCommentsModule -->\n\nPostsModule->CommentsModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostsModule->PostsService \n\n\n\n\n\nReactionModule\n\nReactionModule\n\nAppModule -->\n\nReactionModule->AppModule\n\n\n\nAppModule -->\n\nRecordsModule->AppModule\n\n\n\nRecordsModule -->\n\nReminderModule->RecordsModule\n\n\n\nAppModule -->\n\nReminderModule->AppModule\n\n\n\n\n\nReminderService \n\nReminderService \n\nReminderService  -->\n\nReminderModule->ReminderService \n\n\n\nAppModule -->\n\nStandardModule->AppModule\n\n\n\nMetricModule -->\n\nTagModule->MetricModule\n\n\n\nRecordsModule -->\n\nTagModule->RecordsModule\n\n\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nTagService \n\nTagService \n\nTagService  -->\n\nTagModule->TagService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nJwtUtilsModule\n\nJwtUtilsModule\n\nUsersModule -->\n\nJwtUtilsModule->UsersModule\n\n\n\nCommentsModule -->\n\nJwtUtilsModule->CommentsModule\n\n\n\nNoteModule -->\n\nJwtUtilsModule->NoteModule\n\n\n\nPaymentModule -->\n\nJwtUtilsModule->PaymentModule\n\n\n\nPostsModule -->\n\nJwtUtilsModule->PostsModule\n\n\n\nRecordsModule -->\n\nJwtUtilsModule->RecordsModule\n\n\n\nReminderModule -->\n\nJwtUtilsModule->ReminderModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nJwtUtilsModule->AuthModule\n\n\n\n\n\nJwtUtilsService \n\nJwtUtilsService \n\nJwtUtilsService  -->\n\nJwtUtilsModule->JwtUtilsService \n\n\n\n\n\nBlogsService\n\nBlogsService\n\nBlogsModule -->\n\nBlogsService->BlogsModule\n\n\n\n\n\nCategorysService\n\nCategorysService\n\nCategorysModule -->\n\nCategorysService->CategorysModule\n\n\n\n\n\nCommentsService\n\nCommentsService\n\nCommentsModule -->\n\nCommentsService->CommentsModule\n\n\n\n\n\nFileService\n\nFileService\n\nFileModule -->\n\nFileService->FileModule\n\n\n\nMediaModule -->\n\nFileService->MediaModule\n\n\n\n\n\nHospitalService\n\nHospitalService\n\nHospitalModule -->\n\nHospitalService->HospitalModule\n\n\n\n\n\nJwtUtilsService\n\nJwtUtilsService\n\nJwtUtilsModule -->\n\nJwtUtilsService->JwtUtilsModule\n\n\n\n\n\nMailService\n\nMailService\n\nUsersModule -->\n\nMailService->UsersModule\n\n\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMediaService\n\nMediaService\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\nMembershipsService\n\nMembershipsService\n\nMembershipsModule -->\n\nMembershipsService->MembershipsModule\n\n\n\n\n\nMetricService\n\nMetricService\n\nMetricModule -->\n\nMetricService->MetricModule\n\n\n\n\n\nNoteService\n\nNoteService\n\nNoteModule -->\n\nNoteService->NoteModule\n\n\n\n\n\nPaymentService\n\nPaymentService\n\nPaymentModule -->\n\nPaymentService->PaymentModule\n\n\n\n\n\nPayosService\n\nPayosService\n\nPayosModule -->\n\nPayosService->PayosModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nReactionService\n\nReactionService\n\nReactionModule -->\n\nReactionService->ReactionModule\n\n\n\n\n\nRecordsService\n\nRecordsService\n\nRecordsModule -->\n\nRecordsService->RecordsModule\n\n\n\n\n\nStandardService\n\nStandardService\n\nRecordsModule -->\n\nStandardService->RecordsModule\n\n\n\nStandardModule -->\n\nStandardService->StandardModule\n\n\n\n\n\nTimeUtilsService\n\nTimeUtilsService\n\nRecordsModule -->\n\nTimeUtilsService->RecordsModule\n\n\n\n\n\nReminderService\n\nReminderService\n\nReminderModule -->\n\nReminderService->ReminderModule\n\n\n\n\n\nTagService\n\nTagService\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        23 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    20 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            blobToFile   (apps/.../file.service.ts)\n                        \n                        \n                            Roles   (apps/.../role.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (apps/.../role.decorator.ts)\n                        \n                        \n                            UUID_REG   (apps/.../REG.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/be-nestjs-app/src/app/file/file.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        blobToFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (blob: Blob, fileName: string): File => {\n  //Cast to a File() type\n  return new File([blob], fileName, { lastModified: new Date(Date.now()).getTime() });\n}\n                    \n                \n\n\n        \n    \n\n    apps/be-nestjs-app/src/app/utils/decorators/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    apps/be-nestjs-app/src/app/utils/const/REG.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UUID_REG\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-f\\d]{8}-[a-f\\d]{4}-[1-5][a-f\\d]{3}-[89ab][a-f\\d]{3}-[a-f\\d]{12}$/\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
