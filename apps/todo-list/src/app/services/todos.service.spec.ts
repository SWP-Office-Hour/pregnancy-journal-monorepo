import { TestBed } from '@angular/core/testing';

import { provideHttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { Todo } from '../model/todo.type';
import { TodosService } from './todos.service';

describe('TodosService', () => {
  let service: TodosService;

  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [provideHttpClient()],
    });
    service = TestBed.inject(TodosService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
// Generated by Qodo Gen

describe('TodosService', () => {
  let service: TodosService;
  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [TodosService, provideHttpClient()],
    });
    service = TestBed.inject(TodosService);
  });
  // Service successfully retrieves array of Todo items from API endpoint
  it('should return array of Todo items when API call is successful', () => {
    const mockTodos: Todo[] = [
      { id: 1, title: 'Test todo', completed: false, userId: 1 },
      { id: 2, title: 'Another todo', completed: true, userId: 1 },
    ];

    const httpMock = { get: jest.fn() };
    service.http = httpMock as any;

    httpMock.get.mockReturnValue(of(mockTodos));

    service.getTodosFromApi().subscribe((todos) => {
      expect(todos).toEqual(mockTodos);
      expect(httpMock.get).toHaveBeenCalledWith('https://jsonplaceholder.typicode.com/todos');
    });
  });

  // Handle empty array response from API
  it('should handle empty array response from API', () => {
    const httpMock = { get: jest.fn() };
    service.http = httpMock as any;

    httpMock.get.mockReturnValue(of([]));

    service.getTodosFromApi().subscribe((todos) => {
      expect(todos).toEqual([]);
      expect(todos.length).toBe(0);
      expect(httpMock.get).toHaveBeenCalledWith('https://jsonplaceholder.typicode.com/todos');
    });
  });
});
