name: CD

on:
  push:
    branches: [main, testci]

permissions:
  id-token: write
  contents: read
  actions: read
  deployments: write

env:
  HUSKY: 0
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NX_POWERPACK_LICENSE: ${{ secrets.NX_POWERPACK_LICENSE }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  main-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache node modules of entire Monorepo
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm i

      - uses: nrwl/nx-set-shas@v4

      - name: Echo NX_BASE and NX_HEAD
        run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"

      # Nx Affected runs only tasks affected by the changes in this PR/commit. Learn more: https://nx.dev/ci/features/affected
      # When you enable task distribution, run the e2e-ci task instead of e2e
      #      - run: npx cypress install
      #      - run: npx nx affected -t lint test build e2e

      #      - id: nx-format-check
      #        run: npx nx format:check
      - id: nx-affected
        run: npx nx affected -t lint build
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - if: ${{ steps.nx-affected.outcome == 'failure' }}
        run: exit 1
  ##############################################################################################

  deployment:
    needs: [main-ci]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache node modules of entire Monorepo
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm i

      - uses: nrwl/nx-set-shas@v4

      - name: Echo NX_BASE and NX_HEAD
        run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"

      - id: run-affected
        run: npx nx show projects --affected
        name: Show affected projects
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - if: contains(${{steps.run-affected.outputs}}, 'be-nestjs')
        uses: docker/setup-buildx-action@v3

      - if: contains(${{steps.run-affected.outputs}}, 'be-nestjs')
        name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: registry.digitalocean.com/office-hour/
          username: ${{ secrets.DIOCEAN_USERNAME }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - if: contains(${{steps.run-affected.outputs}}, 'be-nestjs')
        name: Run container if BE code affected
        run: INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} npx nx affected -t container --verbose
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - id: fe-angular-deploy-flag
        if: contains(${{steps.run-affected.outputs}}, 'fe-angular')
        run: npx nx run fe-angular-app:build:production
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - if: ${{ steps.fe-angular-deploy-flag.outcome == 'success' }}
        name: Publish
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: pregnancy-journal-monorepo # e.g. 'my-project'
          directory: dist/apps/fe-angular-app # e.g. 'dist'
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      ############################ TESTING AT LOCAL ######################################################

      # - name: Install doctl
      #   uses: digitalocean/action-doctl@v2
      #   with:
      #     token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      # - id: build_be
      #   run: npx nx run be-nestjs-app:build
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # # - if: ${{ steps.build_be =='be-nestjs-app' }}
      # - name: Build and push Docker image
      #   id: push
      #   uses: docker/build-push-action@v6.13.0
      #   with:
      #     context: .
      #     file: ./apps/be-nestjs-app/Dockerfile
      #     push: true
      #     tags: registry.digitalocean.com/office-hour/api:latest
      #     cache-from: type=registry,ref=registry.digitalocean.com/office-hour/cache:buildcache
      #     cache-to: type=registry,ref=registry.digitalocean.com/office-hour/cache:buildcache,modes=max

  ############################ TESTING WORKFLOW ######################################################
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*
  #         cache: 'npm'

  #     - name: Cache node modules of entire Monorepo
  #       id: cache-npm
  #       uses: actions/cache@v4
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ./node_modules
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
  #       name: List the state of node modules
  #       continue-on-error: true
  #       run: npm list
  #     - name: Install dependencies
  #       run: npm i

  #     # - uses: nrwl/nx-set-shas@v4

  #     - run: |
  #         echo "BASE: ${{ env.NX_BASE }}"
  #         echo "HEAD: ${{ env.NX_HEAD }}"

  #     # - run: INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} npx nx affected -t container --verbose
  #     #   env:
  #     #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #     - id: run-affected
  #       run: npx nx show projects --affected

  #     - run: |
  #         echo "${{ steps.run-affected.outputs }}"

  #     - id: fe-angular-deploy-flag
  #       if: contains( ${{ steps.run-affected.outputs }}, 'fe-angular')
  #       run: npx nx run fe-angular-app:build
